diff --git a/asm/macros/event.inc b/asm/macros/event.inc
index 8010c6991..b88c2c6cb 100644
--- a/asm/macros/event.inc
+++ b/asm/macros/event.inc
@@ -2008,12 +2008,6 @@
 	.endm
 
 	@ Jumps to dest if the Quest Log is currently showing playback scenes (dest is usually a release/end)
-	.macro goto_if_questlog dest:req
-	special GetQuestLogState
-	compare VAR_RESULT, 2
-	goto_if_eq \dest
-	.endm
-
 	@ Prints a braille message, then waits for users input.
 	.macro braillemessage_wait text:req
 	setvar VAR_0x8006, 0
diff --git a/data/event_scripts.s b/data/event_scripts.s
index 8545cf621..668e869d7 100644
--- a/data/event_scripts.s
+++ b/data/event_scripts.s
@@ -37,11 +37,9 @@
 #include "constants/weather.h"
 #include "constants/union_room.h"
 #include "constants/trade.h"
-#include "constants/quest_log.h"
 #include "constants/daycare.h"
 #include "constants/easy_chat.h"
 #include "constants/trainer_card.h"
-#include "constants/help_system.h"
 #include "constants/trainer_fan_club.h"
 #include "constants/mystery_gift.h"
 	.include "asm/macros.inc"
@@ -1101,7 +1099,6 @@ EventScript_OutOfCenterPartyHeal::
 EventScript_WallTownMap::
 	lockall
 	msgbox Text_ATownMap
-	goto_if_questlog EventScript_ReleaseEnd
 	fadescreen FADE_TO_BLACK
 	special ShowTownMap
 	waitstate
@@ -1344,7 +1341,6 @@ Text_TestMsg::
 	.include "data/text/sign_lady.inc"
 	.include "data/text/trainer_card.inc"
 	.include "data/scripts/trainer_card.inc"
-	.include "data/text/help_system.inc"
 	.include "data/scripts/cable_club.inc"
 	.include "data/scripts/field_moves.inc"
 	.include "data/scripts/item_ball_scripts.inc"
diff --git a/data/maps/BirthIsland_Exterior/scripts.inc b/data/maps/BirthIsland_Exterior/scripts.inc
index 64515f8d5..9b25193a0 100644
--- a/data/maps/BirthIsland_Exterior/scripts.inc
+++ b/data/maps/BirthIsland_Exterior/scripts.inc
@@ -44,8 +44,6 @@ BirthIsland_Exterior_EventScript_TryRemoveDeoxys::
 BirthIsland_Exterior_EventScript_Triangle::
 	lock
 	faceplayer
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
 	special DoDeoxysTriangleInteraction
 	waitstate
 	switch VAR_RESULT
diff --git a/data/maps/CeladonCity_Condominiums_3F/scripts.inc b/data/maps/CeladonCity_Condominiums_3F/scripts.inc
index 866138a9f..6d682e5a0 100644
--- a/data/maps/CeladonCity_Condominiums_3F/scripts.inc
+++ b/data/maps/CeladonCity_Condominiums_3F/scripts.inc
@@ -30,7 +30,6 @@ CeladonCity_Condominiums_3F_EventScript_ShowDiploma::
 	message CeladonCity_Condominiums_3F_Text_CompletedPokedexCongratulations
 	waitmessage
 	delay 60
-	goto_if_questlog EventScript_ReleaseEnd
 	special ShowDiploma
 	waitstate
 	release
diff --git a/data/maps/CeladonCity_DepartmentStore_2F/scripts.inc b/data/maps/CeladonCity_DepartmentStore_2F/scripts.inc
index c15e291c1..b0e9944c7 100644
--- a/data/maps/CeladonCity_DepartmentStore_2F/scripts.inc
+++ b/data/maps/CeladonCity_DepartmentStore_2F/scripts.inc
@@ -14,7 +14,7 @@ CeladonCity_DepartmentStore_2F_EventScript_FloorSign::
 	end
 
 CeladonCity_DepartmentStore_2F_EventScript_ClerkItems::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
@@ -40,7 +40,7 @@ CeladonCity_DepartmentStore_2F_Items::
 	end
 
 CeladonCity_DepartmentStore_2F_EventScript_ClerkTMs::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/CeladonCity_DepartmentStore_4F/scripts.inc b/data/maps/CeladonCity_DepartmentStore_4F/scripts.inc
index 98069ca2e..8cc236773 100644
--- a/data/maps/CeladonCity_DepartmentStore_4F/scripts.inc
+++ b/data/maps/CeladonCity_DepartmentStore_4F/scripts.inc
@@ -14,7 +14,7 @@ CeladonCity_DepartmentStore_4F_EventScript_FloorSign::
 	end
 
 CeladonCity_DepartmentStore_4F_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/CeladonCity_DepartmentStore_5F/scripts.inc b/data/maps/CeladonCity_DepartmentStore_5F/scripts.inc
index 8625e2244..6195466f4 100644
--- a/data/maps/CeladonCity_DepartmentStore_5F/scripts.inc
+++ b/data/maps/CeladonCity_DepartmentStore_5F/scripts.inc
@@ -14,7 +14,7 @@ CeladonCity_DepartmentStore_5F_EventScript_FloorSign::
 	end
 
 CeladonCity_DepartmentStore_5F_EventScript_ClerkXItems::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
@@ -38,7 +38,7 @@ CeladonCity_DepartmentStore_5F_XItems::
 	end
 
 CeladonCity_DepartmentStore_5F_EventScript_ClerkVitamins::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/CeladonCity_DepartmentStore_Roof/scripts.inc b/data/maps/CeladonCity_DepartmentStore_Roof/scripts.inc
index 364d83c43..125c3af70 100644
--- a/data/maps/CeladonCity_DepartmentStore_Roof/scripts.inc
+++ b/data/maps/CeladonCity_DepartmentStore_Roof/scripts.inc
@@ -2,8 +2,7 @@ CeladonCity_DepartmentStore_Roof_MapScripts::
 	.byte 0
 
 CeladonCity_DepartmentStore_Roof_EventScript_ThirstyGirl::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
 	lock
 	faceplayer
 	call CeladonCity_DepartmentStore_Roof_EventScript_CheckPlayerHasDrinks
diff --git a/data/maps/CeladonCity_GameCorner/scripts.inc b/data/maps/CeladonCity_GameCorner/scripts.inc
index b169961a6..cd80e9eae 100644
--- a/data/maps/CeladonCity_GameCorner/scripts.inc
+++ b/data/maps/CeladonCity_GameCorner/scripts.inc
@@ -21,7 +21,7 @@ CeladonCity_GameCorner_EventScript_InfoClerk::
 	end
 
 CeladonCity_GameCorner_EventScript_CoinsClerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	showmoneybox 0, 0
diff --git a/data/maps/CeladonCity_GameCorner_PrizeRoom/scripts.inc b/data/maps/CeladonCity_GameCorner_PrizeRoom/scripts.inc
index 9c753f3ad..6bf566372 100644
--- a/data/maps/CeladonCity_GameCorner_PrizeRoom/scripts.inc
+++ b/data/maps/CeladonCity_GameCorner_PrizeRoom/scripts.inc
@@ -13,7 +13,7 @@ CeladonCity_GameCorner_PrizeRoom_EventScript_PrizeClerkMons::
 	lock
 	faceplayer
 	goto_if_unset FLAG_GOT_COIN_CASE, CeladonCity_GameCorner_PrizeRoom_EventScript_NeedCoinCase
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	showcoinsbox 0, 0
 	msgbox CeladonCity_GameCorner_PrizeRoom_Text_WeExchangeCoinsForPrizes
 	goto CeladonCity_GameCorner_PrizeRoom_EventScript_ChoosePrizeMon
@@ -241,7 +241,7 @@ CeladonCity_GameCorner_PrizeRoom_EventScript_PrizeClerkTMs::
 	lock
 	faceplayer
 	goto_if_unset FLAG_GOT_COIN_CASE, CeladonCity_GameCorner_PrizeRoom_EventScript_NeedCoinCase
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	showcoinsbox 0, 0
 	msgbox CeladonCity_GameCorner_PrizeRoom_Text_WeExchangeCoinsForPrizes
 	goto CeladonCity_GameCorner_PrizeRoom_EventScript_ChoosePrizeTM
@@ -332,7 +332,7 @@ CeladonCity_GameCorner_PrizeRoom_EventScript_PrizeClerkItems::
 	lock
 	faceplayer
 	goto_if_unset FLAG_GOT_COIN_CASE, CeladonCity_GameCorner_PrizeRoom_EventScript_NeedCoinCase
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	showcoinsbox 0, 0
 	msgbox CeladonCity_GameCorner_PrizeRoom_Text_WeExchangeCoinsForPrizes
 	goto CeladonCity_GameCorner_PrizeRoom_EventScript_ChoosePrizeItem
diff --git a/data/maps/CeruleanCave_B1F/scripts.inc b/data/maps/CeruleanCave_B1F/scripts.inc
index 63a110bb4..074bd5a4d 100644
--- a/data/maps/CeruleanCave_B1F/scripts.inc
+++ b/data/maps/CeruleanCave_B1F/scripts.inc
@@ -22,8 +22,7 @@ CeruleanCave_B1F_EventScript_ShowMewtwo::
 	return
 
 CeruleanCave_B1F_EventScript_Mewtwo::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
 	lock
 	faceplayer
 	waitse
diff --git a/data/maps/CeruleanCity_House4/scripts.inc b/data/maps/CeruleanCity_House4/scripts.inc
index 42ddde3f2..39305173f 100644
--- a/data/maps/CeruleanCity_House4/scripts.inc
+++ b/data/maps/CeruleanCity_House4/scripts.inc
@@ -7,8 +7,7 @@ CeruleanCity_House4_MapScripts::
 	.byte 0
 
 CeruleanCity_House4_EventScript_WonderNewsBerryMan::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
 	lock
 	specialvar REWARD_TYPE, WonderNews_GetRewardInfo
 	copyvar REWARD_ITEM, VAR_RESULT
diff --git a/data/maps/CeruleanCity_House5/scripts.inc b/data/maps/CeruleanCity_House5/scripts.inc
index a9413ecf1..83f28ba21 100644
--- a/data/maps/CeruleanCity_House5/scripts.inc
+++ b/data/maps/CeruleanCity_House5/scripts.inc
@@ -168,7 +168,7 @@ CeruleanCity_House5_EventScript_NotEnoughBerryPowder::
 
 CeruleanCity_House5_EventScript_BerryCrushRankings::
 	lockall
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	special ShowBerryCrushRankings
 	waitstate
 	releaseall
diff --git a/data/maps/CeruleanCity_Mart/scripts.inc b/data/maps/CeruleanCity_Mart/scripts.inc
index 3a8088a41..956359838 100644
--- a/data/maps/CeruleanCity_Mart/scripts.inc
+++ b/data/maps/CeruleanCity_Mart/scripts.inc
@@ -10,7 +10,7 @@ CeruleanCity_Mart_EventScript_Woman::
 	end
 
 CeruleanCity_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/CinnabarIsland_Mart/scripts.inc b/data/maps/CinnabarIsland_Mart/scripts.inc
index 616978243..bd235a4d9 100644
--- a/data/maps/CinnabarIsland_Mart/scripts.inc
+++ b/data/maps/CinnabarIsland_Mart/scripts.inc
@@ -10,7 +10,7 @@ CinnabarIsland_Mart_EventScript_Scientist::
 	end
 
 CinnabarIsland_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/FiveIsland_LostCave_Room10/scripts.inc b/data/maps/FiveIsland_LostCave_Room10/scripts.inc
index 646136ff4..174fb9c44 100644
--- a/data/maps/FiveIsland_LostCave_Room10/scripts.inc
+++ b/data/maps/FiveIsland_LostCave_Room10/scripts.inc
@@ -26,7 +26,6 @@ FiveIsland_LostCave_Room10_EventScript_FindSelphyScene::
 	applymovement LOCALID_SELPHY, FiveIsland_LostCave_Room10_Movement_SelphyApproach
 	waitmovement 0
 	msgbox FiveIsland_LostCave_Room10_Text_SelphyIntro
-	goto_if_questlog FiveIsland_LostCave_Room10_EventScript_SelphyQuestLog
 	trainerbattle_no_intro TRAINER_LADY_SELPHY, FiveIsland_LostCave_Room10_Text_SelphyDefeat
 	msgbox FiveIsland_LostCave_Room10_Text_MayIAskYouToTakeMeHome
 	closemessage
@@ -43,11 +42,6 @@ FiveIsland_LostCave_Room10_EventScript_SetSelphyFound::
 	setvar VAR_MAP_SCENE_FIVE_ISLAND_RESORT_GORGEOUS, 1
 	return
 
-FiveIsland_LostCave_Room10_EventScript_SelphyQuestLog::
-	settrainerflag TRAINER_LADY_SELPHY
-	call FiveIsland_LostCave_Room10_EventScript_SetSelphyFound
-	releaseall
-	end
 
 FiveIsland_LostCave_Room10_Movement_SelphyWander::
 	walk_left
diff --git a/data/maps/FiveIsland_MemorialPillar/scripts.inc b/data/maps/FiveIsland_MemorialPillar/scripts.inc
index 0fb6a4a24..9bc42c103 100644
--- a/data/maps/FiveIsland_MemorialPillar/scripts.inc
+++ b/data/maps/FiveIsland_MemorialPillar/scripts.inc
@@ -33,8 +33,7 @@ FiveIsland_MemorialPillar_EventScript_ReturnedForTM42::
 	end
 
 FiveIsland_MemorialPillar_EventScript_Memorial::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
 	lockall
 	goto_if_set FLAG_GOT_TM42_AT_MEMORIAL_PILLAR, FiveIsland_MemorialPillar_EventScript_MemorialLemonadeAlreadyPlaced
 	goto_if_set FLAG_NO_ROOM_FOR_TM42_AT_MEMORIAL_PILLAR, FiveIsland_MemorialPillar_EventScript_MemorialLemonadeAlreadyPlaced
diff --git a/data/maps/FiveIsland_ResortGorgeous_House/scripts.inc b/data/maps/FiveIsland_ResortGorgeous_House/scripts.inc
index 885ae0d87..af5899cb2 100644
--- a/data/maps/FiveIsland_ResortGorgeous_House/scripts.inc
+++ b/data/maps/FiveIsland_ResortGorgeous_House/scripts.inc
@@ -7,8 +7,8 @@ FiveIsland_ResortGorgeous_House_MapScripts::
 	.byte 0
 
 FiveIsland_ResortGorgeous_House_EventScript_Selphy::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	goto_if_set SHOWN_REQUESTED_MON, FiveIsland_ResortGorgeous_House_EventScript_JustFulfilledRequest
diff --git a/data/maps/FiveIsland_WaterLabyrinth/scripts.inc b/data/maps/FiveIsland_WaterLabyrinth/scripts.inc
index a6b7b8133..8e9c646bf 100644
--- a/data/maps/FiveIsland_WaterLabyrinth/scripts.inc
+++ b/data/maps/FiveIsland_WaterLabyrinth/scripts.inc
@@ -2,8 +2,8 @@ FiveIsland_WaterLabyrinth_MapScripts::
 	.byte 0
 
 FiveIsland_WaterLabyrinth_EventScript_EggGentleman::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	goto_if_set FLAG_GOT_TOGEPI_EGG, FiveIsland_WaterLabyrinth_EventScript_PostEggComment
diff --git a/data/maps/FourIsland/scripts.inc b/data/maps/FourIsland/scripts.inc
index 8d19847d2..392ea2125 100644
--- a/data/maps/FourIsland/scripts.inc
+++ b/data/maps/FourIsland/scripts.inc
@@ -71,8 +71,8 @@ FourIsland_Movement_PlayerWatchRivalExit::
 	step_end
 
 FourIsland_EventScript_DaycareMan::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	special GetDaycareMonNicknames
diff --git a/data/maps/FourIsland_Mart/scripts.inc b/data/maps/FourIsland_Mart/scripts.inc
index 27908c25c..4adad0049 100644
--- a/data/maps/FourIsland_Mart/scripts.inc
+++ b/data/maps/FourIsland_Mart/scripts.inc
@@ -2,7 +2,7 @@ FourIsland_Mart_MapScripts::
 	.byte 0
 
 FourIsland_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/FourIsland_PokemonDayCare/scripts.inc b/data/maps/FourIsland_PokemonDayCare/scripts.inc
index a0fc1ade9..c7696983e 100644
--- a/data/maps/FourIsland_PokemonDayCare/scripts.inc
+++ b/data/maps/FourIsland_PokemonDayCare/scripts.inc
@@ -4,7 +4,7 @@ FourIsland_PokemonDayCare_MapScripts::
 	.byte 0
 
 FourIsland_PokemonDayCare_EventScript_DaycareWoman::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	specialvar VAR_RESULT, GetDaycareState
diff --git a/data/maps/FuchsiaCity_Mart/scripts.inc b/data/maps/FuchsiaCity_Mart/scripts.inc
index 2ce4db8d0..45e15ec1f 100644
--- a/data/maps/FuchsiaCity_Mart/scripts.inc
+++ b/data/maps/FuchsiaCity_Mart/scripts.inc
@@ -10,7 +10,7 @@ FuchsiaCity_Mart_EventScript_Gentleman::
 	end
 
 FuchsiaCity_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/IndigoPlateau_PokemonCenter_1F/scripts.inc b/data/maps/IndigoPlateau_PokemonCenter_1F/scripts.inc
index bb6d74b5f..968f30b66 100644
--- a/data/maps/IndigoPlateau_PokemonCenter_1F/scripts.inc
+++ b/data/maps/IndigoPlateau_PokemonCenter_1F/scripts.inc
@@ -41,7 +41,7 @@ IndigoPlateau_PokemonCenter_1F_EventScript_GymGuy::
 	end
 
 IndigoPlateau_PokemonCenter_1F_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/LavenderTown_Mart/scripts.inc b/data/maps/LavenderTown_Mart/scripts.inc
index 6425e5917..5a0f5ffe4 100644
--- a/data/maps/LavenderTown_Mart/scripts.inc
+++ b/data/maps/LavenderTown_Mart/scripts.inc
@@ -14,7 +14,7 @@ LavenderTown_Mart_EventScript_Youngster::
 	end
 
 LavenderTown_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/MtEmber_Summit/scripts.inc b/data/maps/MtEmber_Summit/scripts.inc
index 5cc41d7ad..732bba144 100644
--- a/data/maps/MtEmber_Summit/scripts.inc
+++ b/data/maps/MtEmber_Summit/scripts.inc
@@ -22,8 +22,8 @@ MtEmber_Summit_EventScript_ShowMoltres::
 	return
 
 MtEmber_Summit_EventScript_Moltres::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	setwildbattle SPECIES_MOLTRES, 50
diff --git a/data/maps/MtMoon_B2F/scripts.inc b/data/maps/MtMoon_B2F/scripts.inc
index d69d69d96..91a1463d1 100644
--- a/data/maps/MtMoon_B2F/scripts.inc
+++ b/data/maps/MtMoon_B2F/scripts.inc
@@ -62,7 +62,7 @@ MtMoon_B2F_EventScript_DomeFossil::
 	removeobject LOCALID_DOME_FOSSIL
 	giveitem_msg MtMoon_B2F_Text_ObtainedDomeFossil, ITEM_DOME_FOSSIL, 1, MUS_OBTAIN_KEY_ITEM
 	closemessage
-	special QuestLog_CutRecording
+	
 	delay 10
 	applymovement LOCALID_MIGUEL, MtMoon_B2F_Movement_MiguelToHelixFossil
 	waitmovement 0
@@ -93,7 +93,7 @@ MtMoon_B2F_EventScript_HelixFossil::
 	removeobject LOCALID_HELIX_FOSSIL
 	giveitem_msg MtMoon_B2F_Text_ObtainedHelixFossil, ITEM_HELIX_FOSSIL, 1, MUS_OBTAIN_KEY_ITEM
 	closemessage
-	special QuestLog_CutRecording
+	
 	delay 10
 	applymovement LOCALID_MIGUEL, MtMoon_B2F_Movement_MiguelToDomeFossil
 	waitmovement 0
diff --git a/data/maps/NavelRock_Base/scripts.inc b/data/maps/NavelRock_Base/scripts.inc
index 4919a5ac4..f6643e7f5 100644
--- a/data/maps/NavelRock_Base/scripts.inc
+++ b/data/maps/NavelRock_Base/scripts.inc
@@ -30,8 +30,8 @@ NavelRock_Base_EventScript_TryRemoveLugia::
 	return
 
 NavelRock_Base_EventScript_Lugia::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	waitse
diff --git a/data/maps/NavelRock_Summit/scripts.inc b/data/maps/NavelRock_Summit/scripts.inc
index 068f99a03..4ee98dae4 100644
--- a/data/maps/NavelRock_Summit/scripts.inc
+++ b/data/maps/NavelRock_Summit/scripts.inc
@@ -33,8 +33,8 @@ NavelRock_Summit_EventScript_TryRemoveHoOh::
 	return
 
 NavelRock_Summit_EventScript_HoOh::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lockall
 	setvar VAR_TEMP_1, 1
 	special SpawnCameraObject
diff --git a/data/maps/PalletTown_PlayersHouse_2F/scripts.inc b/data/maps/PalletTown_PlayersHouse_2F/scripts.inc
index a26d8588a..c1fb8fc06 100644
--- a/data/maps/PalletTown_PlayersHouse_2F/scripts.inc
+++ b/data/maps/PalletTown_PlayersHouse_2F/scripts.inc
@@ -29,17 +29,14 @@ PalletTown_PlayersHouse_2F_EventScript_Sign::
 	end
 
 PalletTown_PlayersHouse_2F_EventScript_PC::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lockall
-	setvar VAR_0x8004, HELPCONTEXT_BEDROOM_PC
-	special Script_SetHelpContext
 	setvar VAR_0x8004, 1
 	special AnimatePcTurnOn
 	playse SE_PC_ON
 	msgbox Text_PlayerBootedUpPC
 	special BedroomPC
 	waitstate
-	special SetHelpContextForMap
 	releaseall
 	end
 
@@ -47,6 +44,5 @@ EventScript_PalletTown_PlayersHouse_2F_ShutDownPC::
 	setvar VAR_0x8004, 1
 	playse SE_PC_OFF
 	special AnimatePcTurnOff
-	special SetHelpContextForMap
 	releaseall
 	end
diff --git a/data/maps/PalletTown_ProfessorOaksLab/scripts.inc b/data/maps/PalletTown_ProfessorOaksLab/scripts.inc
index c23534df8..ebeb642bd 100644
--- a/data/maps/PalletTown_ProfessorOaksLab/scripts.inc
+++ b/data/maps/PalletTown_ProfessorOaksLab/scripts.inc
@@ -924,8 +924,8 @@ PalletTown_ProfessorOaksLab_EventScript_DontStartNationalDexScene::
 	end
 
 PalletTown_ProfessorOaksLab_EventScript_CheckIfPlayerNeedsBalls::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	goto_if_set FLAG_OAK_SKIP_22_RIVAL_CHECK, PalletTown_ProfessorOaksLab_EventScript_MonsAroundWorldWait
 	goto_if_set FLAG_GOT_POKEBALLS_FROM_OAK_AFTER_22_RIVAL, PalletTown_ProfessorOaksLab_EventScript_PlayerAlreadyGotBalls
 	checkitem ITEM_POKE_BALL
diff --git a/data/maps/PalletTown_RivalsHouse/scripts.inc b/data/maps/PalletTown_RivalsHouse/scripts.inc
index 1f0fd3381..fb9baf035 100644
--- a/data/maps/PalletTown_RivalsHouse/scripts.inc
+++ b/data/maps/PalletTown_RivalsHouse/scripts.inc
@@ -43,8 +43,8 @@ PalletTown_RivalsHouse_EventScript_HeardBattledRival::
 	end
 
 PalletTown_RivalsHouse_EventScript_GroomMon::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	goto_if_lt VAR_MASSAGE_COOLDOWN_STEP_COUNTER, 500, PalletTown_RivalsHouse_EventScript_RateMonFriendship
 	msgbox PalletTown_RivalsHouse_Text_LikeMeToGroomMon, MSGBOX_YESNO
 	goto_if_eq VAR_RESULT, NO, PalletTown_RivalsHouse_EventScript_DeclineGrooming
diff --git a/data/maps/PewterCity_Mart/scripts.inc b/data/maps/PewterCity_Mart/scripts.inc
index 02740165f..07edde787 100644
--- a/data/maps/PewterCity_Mart/scripts.inc
+++ b/data/maps/PewterCity_Mart/scripts.inc
@@ -10,7 +10,7 @@ PewterCity_Mart_EventScript_Boy::
 	end
 
 PewterCity_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/PokemonLeague_ChampionsRoom/scripts.inc b/data/maps/PokemonLeague_ChampionsRoom/scripts.inc
index cdbb93a2e..18da614eb 100644
--- a/data/maps/PokemonLeague_ChampionsRoom/scripts.inc
+++ b/data/maps/PokemonLeague_ChampionsRoom/scripts.inc
@@ -55,7 +55,6 @@ PokemonLeague_ChampionsRoom_EventScript_EnterRoom::
 	delay 20
 	call_if_unset FLAG_SYS_GAME_CLEAR, PokemonLeague_ChampionsRoom_EventScript_Intro
 	call_if_set FLAG_SYS_GAME_CLEAR, PokemonLeague_ChampionsRoom_EventScript_RematchIntro
-	goto_if_questlog PokemonLeague_ChampionsRoom_EventScript_QuestLogEnd
 	setflag FLAG_TEMP_3
 	setflag FLAG_TEMP_5
 	savebgm MUS_VICTORY_GYM_LEADER
@@ -98,11 +97,6 @@ PokemonLeague_ChampionsRoom_EventScript_EnterRoom::
 	releaseall
 	end
 
-PokemonLeague_ChampionsRoom_EventScript_QuestLogEnd::
-	call PokemonLeague_ChampionsRoom_EventScript_StopSceneTrigger
-	releaseall
-	end
-
 PokemonLeague_ChampionsRoom_EventScript_Battle::
 	call_if_eq VAR_STARTER_MON, 2, PokemonLeague_ChampionsRoom_EventScript_BattleSquirtle
 	call_if_eq VAR_STARTER_MON, 1, PokemonLeague_ChampionsRoom_EventScript_BattleBulbasaur
diff --git a/data/maps/PokemonTower_6F/scripts.inc b/data/maps/PokemonTower_6F/scripts.inc
index ca0ff6895..cb253ccc5 100644
--- a/data/maps/PokemonTower_6F/scripts.inc
+++ b/data/maps/PokemonTower_6F/scripts.inc
@@ -5,11 +5,11 @@ PokemonTower_6F_EventScript_MarowakGhost::
 	lockall
 	textcolor NPC_TEXT_COLOR_MON
 	msgbox PokemonTower_6F_Text_BeGoneIntruders
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	setwildbattle SPECIES_MAROWAK, 30
 	special StartMarowakBattle
 	waitstate
-	special QuestLog_CutRecording
+	
 	goto_if_eq VAR_RESULT, FALSE, PokemonTower_6F_EventScript_DefeatedMarowakGhost  @ VAR_RESULT set by CB2_EndMarowakBattle
 	applymovement LOCALID_PLAYER, PokemonTower_6F_Movement_ForcePlayerUp
 	waitmovement 0
diff --git a/data/maps/PowerPlant/scripts.inc b/data/maps/PowerPlant/scripts.inc
index ec48a3778..1f3380a66 100644
--- a/data/maps/PowerPlant/scripts.inc
+++ b/data/maps/PowerPlant/scripts.inc
@@ -33,8 +33,8 @@ PowerPlant_EventScript_ShowElectrode2::
 	return
 
 PowerPlant_EventScript_Zapdos::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	setwildbattle SPECIES_ZAPDOS, 50
@@ -69,7 +69,7 @@ PowerPlant_EventScript_RanFromZapdos::
 	end
 
 PowerPlant_EventScript_Electrode1::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	setwildbattle SPECIES_ELECTRODE, 34
@@ -80,7 +80,7 @@ PowerPlant_EventScript_Electrode1::
 	setflag FLAG_SYS_SPECIAL_WILD_BATTLE
 	dowildbattle
 	clearflag FLAG_SYS_SPECIAL_WILD_BATTLE
-	special QuestLog_CutRecording
+	
 	specialvar VAR_RESULT, GetBattleOutcome
 	goto_if_eq VAR_RESULT, B_OUTCOME_WON, PowerPlant_EventScript_FoughtElectrode1
 	goto_if_eq VAR_RESULT, B_OUTCOME_RAN, PowerPlant_EventScript_FoughtElectrode1
@@ -95,7 +95,7 @@ PowerPlant_EventScript_FoughtElectrode1::
 	end
 
 PowerPlant_EventScript_Electrode2::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	setwildbattle SPECIES_ELECTRODE, 34
@@ -106,7 +106,7 @@ PowerPlant_EventScript_Electrode2::
 	setflag FLAG_SYS_SPECIAL_WILD_BATTLE
 	dowildbattle
 	clearflag FLAG_SYS_SPECIAL_WILD_BATTLE
-	special QuestLog_CutRecording
+	
 	specialvar VAR_RESULT, GetBattleOutcome
 	goto_if_eq VAR_RESULT, B_OUTCOME_WON, PowerPlant_EventScript_FoughtElectrode2
 	goto_if_eq VAR_RESULT, B_OUTCOME_RAN, PowerPlant_EventScript_FoughtElectrode2
diff --git a/data/maps/Route12/scripts.inc b/data/maps/Route12/scripts.inc
index 7e17f2573..33add2e1e 100644
--- a/data/maps/Route12/scripts.inc
+++ b/data/maps/Route12/scripts.inc
@@ -14,8 +14,8 @@ Route12_EventScript_Snorlax::
 	lock
 	faceplayer
 	goto_if_unset FLAG_GOT_POKE_FLUTE, Route12_EventScript_SnorlaxNoPokeFlute
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	msgbox Text_WantToUsePokeFlute, MSGBOX_YESNO
 	goto_if_eq VAR_RESULT, NO, Route12_EventScript_DontUsePokeFlute
 	call EventScript_AwakenSnorlax
diff --git a/data/maps/Route12_FishingHouse/scripts.inc b/data/maps/Route12_FishingHouse/scripts.inc
index 545472154..4961d4885 100644
--- a/data/maps/Route12_FishingHouse/scripts.inc
+++ b/data/maps/Route12_FishingHouse/scripts.inc
@@ -28,8 +28,8 @@ Route12_FishingHouse_EventScript_NoRoomForSuperRod::
 	end
 
 Route12_FishingHouse_EventScript_CheckMagikarpRecord::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	setvar VAR_0x8004, SPECIES_MAGIKARP
 	specialvar VAR_RESULT, DoesPlayerPartyContainSpecies
 	goto_if_eq VAR_RESULT, FALSE, Route12_FishingHouse_EventScript_NoMagikarpInParty
diff --git a/data/maps/Route16/scripts.inc b/data/maps/Route16/scripts.inc
index 27ad5ce6f..fee0d64b0 100644
--- a/data/maps/Route16/scripts.inc
+++ b/data/maps/Route16/scripts.inc
@@ -32,8 +32,8 @@ Route16_EventScript_Snorlax::
 	lock
 	faceplayer
 	goto_if_unset FLAG_GOT_POKE_FLUTE, Route16_EventScript_SnorlaxNoPokeFlute
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	msgbox Text_WantToUsePokeFlute, MSGBOX_YESNO
 	goto_if_eq VAR_RESULT, NO, Route16_EventScript_DontUsePokeFlute
 	call EventScript_AwakenSnorlax
diff --git a/data/maps/SaffronCity_CopycatsHouse_2F/scripts.inc b/data/maps/SaffronCity_CopycatsHouse_2F/scripts.inc
index 12f8ada3c..636e0aae8 100644
--- a/data/maps/SaffronCity_CopycatsHouse_2F/scripts.inc
+++ b/data/maps/SaffronCity_CopycatsHouse_2F/scripts.inc
@@ -18,8 +18,8 @@ SaffronCity_CopycatsHouse_2F_EventScript_Doll::
 	end
 
 SaffronCity_CopycatsHouse_2F_EventScript_Copycat::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	checkitem ITEM_POKE_DOLL
diff --git a/data/maps/SaffronCity_Mart/scripts.inc b/data/maps/SaffronCity_Mart/scripts.inc
index 6b18a5fd5..be41132b2 100644
--- a/data/maps/SaffronCity_Mart/scripts.inc
+++ b/data/maps/SaffronCity_Mart/scripts.inc
@@ -10,7 +10,7 @@ SaffronCity_Mart_EventScript_Youngster::
 	end
 
 SaffronCity_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/SeafoamIslands_B4F/scripts.inc b/data/maps/SeafoamIslands_B4F/scripts.inc
index 9b25c704a..29e8f0451 100644
--- a/data/maps/SeafoamIslands_B4F/scripts.inc
+++ b/data/maps/SeafoamIslands_B4F/scripts.inc
@@ -152,8 +152,8 @@ SeafoamIslands_B4F_Movement_WalkUp::
 	step_end
 
 SeafoamIslands_B4F_EventScript_Articuno::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	setwildbattle SPECIES_ARTICUNO, 50
diff --git a/data/maps/SevenIsland_Mart/scripts.inc b/data/maps/SevenIsland_Mart/scripts.inc
index 4bd5a1e53..a11174906 100644
--- a/data/maps/SevenIsland_Mart/scripts.inc
+++ b/data/maps/SevenIsland_Mart/scripts.inc
@@ -2,7 +2,7 @@ SevenIsland_Mart_MapScripts::
 	.byte 0
 
 SevenIsland_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/SixIsland_Mart/scripts.inc b/data/maps/SixIsland_Mart/scripts.inc
index 06540929c..d251119f8 100644
--- a/data/maps/SixIsland_Mart/scripts.inc
+++ b/data/maps/SixIsland_Mart/scripts.inc
@@ -2,7 +2,7 @@ SixIsland_Mart_MapScripts::
 	.byte 0
 
 SixIsland_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/SixIsland_WaterPath_House1/scripts.inc b/data/maps/SixIsland_WaterPath_House1/scripts.inc
index 0797724ac..a1f9155e6 100644
--- a/data/maps/SixIsland_WaterPath_House1/scripts.inc
+++ b/data/maps/SixIsland_WaterPath_House1/scripts.inc
@@ -4,8 +4,8 @@ SixIsland_WaterPath_House1_MapScripts::
 SixIsland_WaterPath_House1_EventScript_Beauty::
 	lock
 	faceplayer
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	setvar VAR_0x8004, SPECIES_HERACROSS
 	specialvar VAR_RESULT, DoesPlayerPartyContainSpecies
 	goto_if_eq VAR_RESULT, FALSE, SixIsland_WaterPath_House1_EventScript_NoHeracrossInParty
diff --git a/data/maps/ThreeIsland_BerryForest/scripts.inc b/data/maps/ThreeIsland_BerryForest/scripts.inc
index 8aeed468c..f1edb17d9 100644
--- a/data/maps/ThreeIsland_BerryForest/scripts.inc
+++ b/data/maps/ThreeIsland_BerryForest/scripts.inc
@@ -19,13 +19,13 @@ ThreeIsland_BerryForest_EventScript_Lostelle::
 	applymovement LOCALID_LOSTELLE, ThreeIsland_BerryForest_Movement_LostelleLookAround
 	waitmovement 0
 	msgbox ThreeIsland_BerryForest_Text_HereItComesAgain
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	waitse
 	playmoncry SPECIES_HYPNO, CRY_MODE_ENCOUNTER
 	waitmoncry
 	setwildbattle SPECIES_HYPNO, 30
 	dowildbattle
-	special QuestLog_CutRecording
+	
 	applymovement LOCALID_LOSTELLE, Common_Movement_FacePlayer
 	waitmovement 0
 	msgbox ThreeIsland_BerryForest_Text_ThankYouHaveThis
diff --git a/data/maps/ThreeIsland_Mart/scripts.inc b/data/maps/ThreeIsland_Mart/scripts.inc
index 9b09a1e60..328c78d1a 100644
--- a/data/maps/ThreeIsland_Mart/scripts.inc
+++ b/data/maps/ThreeIsland_Mart/scripts.inc
@@ -2,7 +2,7 @@ ThreeIsland_Mart_MapScripts::
 	.byte 0
 
 ThreeIsland_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/TrainerTower_Lobby/scripts.inc b/data/maps/TrainerTower_Lobby/scripts.inc
index e435cb33f..de026bcba 100644
--- a/data/maps/TrainerTower_Lobby/scripts.inc
+++ b/data/maps/TrainerTower_Lobby/scripts.inc
@@ -121,7 +121,7 @@ TrainerTower_Lobby_EventScript_ReceptionistEnd::
 	end
 
 TrainerTower_Lobby_EventScript_MartClerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/TwoIsland/scripts.inc b/data/maps/TwoIsland/scripts.inc
index 5e8a768d7..57132983d 100644
--- a/data/maps/TwoIsland/scripts.inc
+++ b/data/maps/TwoIsland/scripts.inc
@@ -58,7 +58,7 @@ TwoIsland_EventScript_SetShopExpanded3::
 	return
 
 TwoIsland_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	goto_if_eq VAR_MAP_SCENE_TWO_ISLAND, 4, TwoIsland_EventScript_ClerkShopExpanded3
diff --git a/data/maps/TwoIsland_House/scripts.inc b/data/maps/TwoIsland_House/scripts.inc
index 903e093c0..a11d44cf3 100644
--- a/data/maps/TwoIsland_House/scripts.inc
+++ b/data/maps/TwoIsland_House/scripts.inc
@@ -7,8 +7,8 @@ TwoIsland_House_MapScripts::
 	.byte 0
 
 TwoIsland_House_EventScript_MoveManiac::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	clearflag HAS_BIG_MUSHROOM
diff --git a/data/maps/VermilionCity/scripts.inc b/data/maps/VermilionCity/scripts.inc
index 004d6e7c6..170516b85 100644
--- a/data/maps/VermilionCity/scripts.inc
+++ b/data/maps/VermilionCity/scripts.inc
@@ -79,8 +79,8 @@ VermilionCity_EventScript_CheckSeagallopPresent::
 	end
 
 VermilionCity_EventScript_ChooseSeagallopDestRainbowPass::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	call VermilionCity_EventScript_CheckHasMysticTicket
 	goto_if_eq VAR_RESULT, TRUE, VermilionCity_EventScript_HasMysticTicket
 	call VermilionCity_EventScript_CheckHasAuroraTicket
diff --git a/data/maps/VermilionCity_Gym/scripts.inc b/data/maps/VermilionCity_Gym/scripts.inc
index 844201b07..5d64a5472 100644
--- a/data/maps/VermilionCity_Gym/scripts.inc
+++ b/data/maps/VermilionCity_Gym/scripts.inc
@@ -141,8 +141,8 @@ VermilionCity_Gym_EventScript_TrashCan15::
 	end
 
 VermilionCity_Gym_EventScript_TrashCan::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	copyvar SWITCH1_ID, VAR_TEMP_0
 	copyvar SWITCH2_ID, VAR_TEMP_1
 	goto_if_set FLAG_FOUND_BOTH_VERMILION_GYM_SWITCHES, VermilionCity_Gym_EventScript_LocksAlreadyOpen
diff --git a/data/maps/VermilionCity_Mart/scripts.inc b/data/maps/VermilionCity_Mart/scripts.inc
index dc3b1bf12..f818f1b0f 100644
--- a/data/maps/VermilionCity_Mart/scripts.inc
+++ b/data/maps/VermilionCity_Mart/scripts.inc
@@ -10,7 +10,7 @@ VermilionCity_Mart_EventScript_BaldingMan::
 	end
 
 VermilionCity_Mart_EventScript_Clerk::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	message Text_MayIHelpYou
diff --git a/data/maps/ViridianCity/scripts.inc b/data/maps/ViridianCity/scripts.inc
index 5793034d9..27b62f34f 100644
--- a/data/maps/ViridianCity/scripts.inc
+++ b/data/maps/ViridianCity/scripts.inc
@@ -138,8 +138,8 @@ ViridianCity_EventScript_WatchToLearnBasics::
 @ Unused. Starts battle after the post battle text, which is odd.
 ViridianCity_EventScript_TutorialUnused::
 	msgbox ViridianCity_Text_ThatWasEducationalTakeThis
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	special StartOldManTutorialBattle
 	waitstate
 	release
@@ -228,8 +228,8 @@ ViridianCity_EventScript_TutorialTriggerRight::
 ViridianCity_EventScript_DoTutorialBattle::
 	msgbox ViridianCity_Text_ShowYouHowToCatchMons
 	closemessage
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	special StartOldManTutorialBattle
 	waitstate
 	lock
diff --git a/data/maps/ViridianCity_Mart/scripts.inc b/data/maps/ViridianCity_Mart/scripts.inc
index 4a2ed71d1..0baeacd87 100644
--- a/data/maps/ViridianCity_Mart/scripts.inc
+++ b/data/maps/ViridianCity_Mart/scripts.inc
@@ -55,7 +55,7 @@ ViridianCity_Mart_EventScript_Clerk::
 	lock
 	faceplayer
 	goto_if_eq VAR_MAP_SCENE_VIRIDIAN_CITY_MART, 1, ViridianCity_Mart_EventScript_SayHiToOak
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	message Text_MayIHelpYou
 	waitmessage
 	pokemart ViridianCity_Mart_Items
diff --git a/data/scripts/cable_club.inc b/data/scripts/cable_club.inc
index e7f53ada2..eb291aeca 100644
--- a/data/scripts/cable_club.inc
+++ b/data/scripts/cable_club.inc
@@ -13,8 +13,8 @@ EventScript_HideMysteryGiftMan::
 	return
 
 CableClub_EventScript_MysteryGiftMan::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	trywondercardscript
 
 @ Unused
@@ -101,8 +101,7 @@ CableClub_EventScript_ExitMinigameRoom::
 
 CableClub_EventScript_CloseLinkAndExitLinkRoom::
 	special CloseLink
-	special HelpSystem_Enable
-	special QuestLog_StartRecordingInputsAfterDeferredEvent
+		
 	setvar VAR_CABLE_CLUB_STATE, 0
 	textcolor NPC_TEXT_COLOR_FEMALE
 	goto_if_eq VAR_0x8007, 0, CableClub_EventScript_PlayerExitLinkRoom
@@ -126,8 +125,7 @@ CableClub_EventScript_ExitTradeCenter::
 
 CableClub_EventScript_PlayerExitTradeCenter::
 	special CloseLink
-	special HelpSystem_Enable
-	special QuestLog_StartRecordingInputsAfterDeferredEvent
+		
 	setvar VAR_CABLE_CLUB_STATE, 0
 	textcolor NPC_TEXT_COLOR_FEMALE
 	goto_if_eq VAR_0x8007, 0, CableClub_EventScript_PlayerExitLinkRoom
@@ -149,8 +147,7 @@ CableClub_EventScript_ExitUnionRoom::
 	end
 
 CableClub_EventScript_PlayerExitUnionRoom::
-	special HelpSystem_Enable
-	special QuestLog_StartRecordingInputsAfterDeferredEvent
+		
 	setvar VAR_CABLE_CLUB_STATE, 0
 	textcolor NPC_TEXT_COLOR_FEMALE
 	goto_if_eq VAR_0x8007, 0, CableClub_EventScript_PlayerExitLinkRoom
@@ -270,7 +267,6 @@ CableClub_EventScript_TryEnterColosseum::
 	goto_if_eq VAR_RESULT, 0, CableClub_EventScript_AbortLink
 	message CableClub_Text_PleaseWaitBCancel
 	waitmessage
-	special HelpSystem_Disable
 	textcolor NPC_TEXT_COLOR_NEUTRAL
 	special TryBattleLinkup
 	waitstate
@@ -355,7 +351,6 @@ CableClub_EventScript_AbortLinkWrongNumberForSingleBattle::
 
 CableClub_EventScript_ConfirmNumberAndRestart::
 	special CloseLink  @ Redundant
-	special HelpSystem_Enable
 	msgbox CableClub_Text_PleaseConfirmNumberAndRestart
 	release
 	end
@@ -368,7 +363,6 @@ CableClub_EventScript_TradeCenter::
 	goto_if_eq VAR_RESULT, 0, CableClub_EventScript_AbortLink
 	message CableClub_Text_PleaseWaitBCancel
 	waitmessage
-	special HelpSystem_Disable
 	textcolor NPC_TEXT_COLOR_NEUTRAL
 	special TryTradeLinkup
 	waitstate
@@ -435,49 +429,42 @@ CableClub_EventScript_RecordCorner::
 
 CableClub_EventScript_AbortLinkPlayerNotReady::
 	special CloseLink
-	special HelpSystem_Enable
 	msgbox CableClub_Text_NotSetUpForFarAwayRegion
 	release
 	end
 
 CableClub_EventScript_AbortLinkOtherTrainerNotReady::
 	special CloseLink
-	special HelpSystem_Enable
 	msgbox CableClub_Text_OtherTrainerNotReady
 	release
 	end
 
 CableClub_EventScript_AbortLinkConnectionError::
 	special CloseLink
-	special HelpSystem_Enable
 	msgbox CableClub_Text_LinkErrorPleaseReset
 	release
 	end
 
 CableClub_EventScript_AbortLinkSomeoneNotReady::
 	special CloseLink
-	special HelpSystem_Enable
 	msgbox CableClub_Text_SomeoneIsNotReadyToLink
 	release
 	end
 
 CableClub_EventScript_AbortLinkDifferentSelections::
 	special CloseLink
-	special HelpSystem_Enable
 	msgbox CableClub_Text_PlayersMadeDifferentSelections
 	release
 	end
 
 CableClub_EventScript_AbortLink::
 	special CloseLink
-	special HelpSystem_Enable
 	msgbox CableClub_Text_PleaseVisitAgain
 	release
 	end
 
 CableClub_EventScript_AbortMinigame::
 	special CloseLink
-	special HelpSystem_Enable
 	msgbox CableClub_Text_ComeAgain
 	release
 	end
@@ -491,14 +478,12 @@ CableClub_EventScript_CableClubWarp::
 
 CableClub_EventScript_AbortLinkIncorrectNumberOfParticipants::
 	special CloseLink
-	special HelpSystem_Enable
 	msgbox CableClub_Text_IncorrectNumberOfParticipants
 	release
 	end
 
 CableClub_EventScript_AbortLinkPlayerHasBadEgg::
 	special CloseLink
-	special HelpSystem_Enable
 	msgbox CableClub_Text_YouHaveAMonThatCantBeTaken
 	release
 	end
@@ -564,7 +549,7 @@ Movement_PlayerEnterMinigameRoom::
 	step_end
 
 CableClub_EventScript_ShowBattleRecords::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lockall
 	fadescreen FADE_TO_BLACK
 	setvar VAR_0x8004, 0
@@ -736,8 +721,8 @@ CableClub_EventScript_DoLinkRoomExit::
 	end
 
 CableClub_EventScript_UnionRoomAttendant::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	goto_if_unset FLAG_SYS_POKEDEX_GET, CableClub_EventScript_WirelessClubAdjustements
@@ -776,7 +761,6 @@ CableClub_EventScript_EnterUnionRoom::
 	special HealPlayerParty
 	setvar VAR_0x8004, USING_UNION_ROOM
 	copyvar VAR_CABLE_CLUB_STATE, VAR_0x8004
-	special HelpSystem_Disable
 	call CableClub_EventScript_OpenUnionRoomBarrier
 	special DrawWholeMapView
 	playse SE_CLICK
@@ -839,8 +823,8 @@ CableClub_EventScript_DontAskAboutLinking::
 	return
 
 CableClub_EventScript_DirectCornerAttendant::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	goto_if_unset FLAG_SYS_POKEDEX_GET, CableClub_EventScript_WirelessClubAdjustements
@@ -1036,13 +1020,11 @@ CableClub_EventScript_TryJoinGroupXPlayers::
 	return
 
 CableClub_EventScript_TryBecomeLinkLeader::
-	special HelpSystem_Disable
 	special TryBecomeLinkLeader
 	waitstate
 	return
 
 CableClub_EventScript_TryJoinLinkGroup::
-	special HelpSystem_Disable
 	special TryJoinLinkGroup
 	waitstate
 	return
@@ -1074,17 +1056,15 @@ CableClub_EventScript_EnterWirelessLinkRoom::
 	end
 
 CableClub_EventScript_ShowWirelessCommunicationScreen::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lockall
 	goto_if_unset FLAG_SYS_POKEDEX_GET, CableClub_EventScript_NotReadyYet
 	specialvar VAR_RESULT, IsWirelessAdapterConnected
 	goto_if_eq VAR_RESULT, FALSE, CableClub_EventScript_AdapterNotConnected
-	special HelpSystem_Disable
 	fadescreen FADE_TO_BLACK
 	special ShowWirelessCommunicationScreen
 	waitstate
 	msgbox CableClub_Text_ParticipantsStepUpToCounter
-	special HelpSystem_Enable
 	releaseall
 	end
 
@@ -1122,8 +1102,8 @@ CableClub_OnResume::
 	end
 
 JoyfulGameCorner_EventScript_InfoMan2::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	message Text_DescribeWhichGame
@@ -1152,8 +1132,8 @@ CableClub_EventScript_MinigameInfoExit::
 	end
 
 JoyfulGameCorner_EventScript_MinigameAttendant::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	message Text_WelcomeCanYouWait
@@ -1161,7 +1141,6 @@ JoyfulGameCorner_EventScript_MinigameAttendant::
 	specialvar VAR_RESULT, IsWirelessAdapterConnected
 	goto_if_eq VAR_RESULT, FALSE, CableClub_EventScript_AdapterNotConnectedMinigame
 	delay 60
-	special HelpSystem_Disable
 	message Text_PlayWhichGame
 	waitmessage
 	multichoice 0, 0, MULTICHOICE_POKEJUMP_DODRIO, FALSE
@@ -1273,7 +1252,7 @@ CableClub_EventScript_ExplainDodrioBerryPickingRequirements::
 	return
 
 TwoIsland_JoyfulGameCorner_EventScript_ShowPokemonJumpRecords::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lockall
 	special ShowPokemonJumpRecords
 	waitstate
@@ -1281,7 +1260,7 @@ TwoIsland_JoyfulGameCorner_EventScript_ShowPokemonJumpRecords::
 	end
 
 TwoIsland_JoyfulGameCorner_EventScript_ShowDodrioBerryPickingRecords::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lockall
 	special ShowDodrioBerryPickingRecords
 	waitstate
diff --git a/data/scripts/day_care.inc b/data/scripts/day_care.inc
index bcc28f7ac..0ebaf4d84 100644
--- a/data/scripts/day_care.inc
+++ b/data/scripts/day_care.inc
@@ -1,5 +1,5 @@
 Route5_PokemonDayCare_EventScript_DaycareMan::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lock
 	faceplayer
 	showmoneybox 0, 0
diff --git a/data/scripts/field_moves.inc b/data/scripts/field_moves.inc
index 2288413f4..602f8a6b5 100644
--- a/data/scripts/field_moves.inc
+++ b/data/scripts/field_moves.inc
@@ -1,5 +1,5 @@
 EventScript_CutTree::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lockall
 	checkfieldmoveusable FIELD_MOVE_CUT
 	goto_if_eq VAR_RESULT, FALSE, EventScript_CantCutTree
@@ -58,7 +58,7 @@ EventScript_FldEffRockSmash::
 	goto EventScript_RockSmashCommon
 
 EventScript_RockSmash::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lockall
 	checkfieldmoveusable FIELD_MOVE_ROCK_SMASH
 	goto_if_eq VAR_RESULT, FALSE, EventScript_CantSmashRock
@@ -219,7 +219,7 @@ Text_MonMaySmashRock::
 	.string "may be able to smash it.$"
 
 EventScript_StrengthBoulder::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lockall
 	goto_if_set FLAG_SYS_USE_STRENGTH, EventScript_AlreadyUsedStrength
 	checkfieldmoveusable FIELD_MOVE_STRENGTH
@@ -276,7 +276,7 @@ Text_StrengthMadeMovingBouldersPossible::
 	.string "boulders around.$"
 
 EventScript_Waterfall::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lockall
 	checkfieldmoveusable FIELD_MOVE_WATERFALL
 	goto_if_eq VAR_RESULT, FALSE, EventScript_WaterCrashingDown
diff --git a/data/scripts/move_tutors.inc b/data/scripts/move_tutors.inc
index ef0486b35..ab3d90f4e 100644
--- a/data/scripts/move_tutors.inc
+++ b/data/scripts/move_tutors.inc
@@ -462,8 +462,8 @@ EventScript_BodySlamTaught::
 .set LOCALID_CAPE_BRINK_TUTOR, 1
 
 TwoIsland_CapeBrink_House_EventScript_StarterTutor::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	lock
 	faceplayer
 	goto_if_set FLAG_LEARNED_ALL_MOVES_AT_CAPE_BRINK, CapeBrinkTutor_EventScript_TaughtAllMoves
diff --git a/data/scripts/pc.inc b/data/scripts/pc.inc
index 88d8602c2..b05674900 100644
--- a/data/scripts/pc.inc
+++ b/data/scripts/pc.inc
@@ -1,9 +1,7 @@
 EventScript_PC::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	lockall
 	goto_if_set FLAG_SYS_PC_STORAGE_DISABLED, EventScript_PCDisabled
-	setvar VAR_0x8004, HELPCONTEXT_PC
-	special Script_SetHelpContext
 	setvar VAR_0x8004, 0
 	special AnimatePcTurnOn
 	playse SE_PC_ON
@@ -50,8 +48,6 @@ EventScript_AccessPokemonStorage::
 	msgbox Text_OpenedPkmnStorage
 	special ShowPokemonStorageSystemPC
 	waitstate
-	setvar VAR_0x8004, HELPCONTEXT_PC
-	special Script_SetHelpContext
 	goto EventScript_PCMainMenu
 	end
 
@@ -67,19 +63,14 @@ EventScript_TurnOffPC::
 	setvar VAR_0x8004, 0
 	playse SE_PC_OFF
 	special AnimatePcTurnOff
-	special SetHelpContextForMap
 	releaseall
 	end
 
 EventScript_AccessHallOfFame::
 	goto_if_unset FLAG_SYS_GAME_CLEAR, EventScript_TurnOffPC
 	playse SE_PC_LOGIN
-	setvar VAR_0x8004, HELPCONTEXT_PC_MISC
-	special BackupHelpContext
-	special Script_SetHelpContext
 	special HallOfFamePCBeginFade
 	waitstate
-	special RestoreHelpContext
 	goto EventScript_ChoosePCMenu
 	end
 
diff --git a/data/scripts/pkmn_center_nurse.inc b/data/scripts/pkmn_center_nurse.inc
index 8dee70527..99f4a2395 100644
--- a/data/scripts/pkmn_center_nurse.inc
+++ b/data/scripts/pkmn_center_nurse.inc
@@ -1,5 +1,5 @@
 EventScript_PkmnCenterNurse::
-	goto_if_questlog EventScript_ReleaseEnd
+	
 	message Text_WelcomeWantToHealPkmn
 	waitmessage
 	multichoice 19, 8, MULTICHOICE_YES_NO, FALSE | (TRUE << 1)
@@ -14,7 +14,6 @@ EventScript_PkmnCenterNurse_HealPkmn::
 	message Text_TakeYourPkmnForFewSeconds
 	waitmessage
 	call EventScript_PkmnCenterNurse_TakeAndHealPkmn
-	special SetUsedPkmnCenterQuestLogEvent
 	goto EventScript_PkmnCenterNurse_CheckTrainerTowerAndUnionRoom
 	end
 
diff --git a/data/scripts/pokedex_rating.inc b/data/scripts/pokedex_rating.inc
index 6a4ed0751..eacedfa4a 100644
--- a/data/scripts/pokedex_rating.inc
+++ b/data/scripts/pokedex_rating.inc
@@ -1,6 +1,6 @@
 PokedexRating_EventScript_RateInPerson::
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	call_if_set FLAG_OAK_SAW_DEX_COMPLETION, PokedexRating_EventScript_DexCompleteIntro
 	call_if_unset FLAG_OAK_SAW_DEX_COMPLETION, PokedexRating_EventScript_NormalIntro
 	call PokedexRating_EventScript_Rate
@@ -33,9 +33,6 @@ PokedexRating_EventScript_DexCompleteFanfare::
 	return
 
 PokedexRating_EventScript_Rate::
-	setvar VAR_0x8004, HELPCONTEXT_PC_MISC
-	special BackupHelpContext
-	special Script_SetHelpContext
 	setvar VAR_0x8004, 0
 	specialvar VAR_RESULT, GetPokedexCount
 	copyvar VAR_0x8008, VAR_0x8005
@@ -75,5 +72,4 @@ PokedexRating_EventScript_DexComplete::
 	end
 
 PokedexRating_EventScript_EndRating::
-	special RestoreHelpContext
 	return
diff --git a/data/scripts/seagallop.inc b/data/scripts/seagallop.inc
index f2c8bae3a..a4b75cd43 100644
--- a/data/scripts/seagallop.inc
+++ b/data/scripts/seagallop.inc
@@ -102,8 +102,8 @@ EventScript_DepartingNotVermilion::
 EventScript_SetSail::
 	closemessage
 	delay 20
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	fadescreen FADE_TO_BLACK
 	special DoSeagallopFerryScene
 	waitstate
diff --git a/data/scripts/surf.inc b/data/scripts/surf.inc
index e2237c96b..3c8b1a330 100644
--- a/data/scripts/surf.inc
+++ b/data/scripts/surf.inc
@@ -1,5 +1,4 @@
 EventScript_UseSurf::
-	goto_if_questlog EventScript_UseSurfEnd
 	checkfieldmoveusable FIELD_MOVE_SURF
 	goto_if_eq VAR_RESULT, FALSE, EventScript_UseSurfEnd
 	playse SE_SELECT
diff --git a/data/scripts/trainer_battle.inc b/data/scripts/trainer_battle.inc
index 9921b9642..3b4bae61e 100644
--- a/data/scripts/trainer_battle.inc
+++ b/data/scripts/trainer_battle.inc
@@ -51,7 +51,6 @@ EventScript_DoNoIntroTrainerBattle::
 	waitmovement 0
 	clearflag FLAG_SAFE_FOLLOWER_MOVEMENT
 	special PlayTrainerEncounterMusic
-	goto_if_questlog EventScript_EndQuestLogBattle
 	dotrainerbattle
 	gotopostbattlescript
 
@@ -64,7 +63,6 @@ EventScript_TryDoRematchBattle::
 	special ShowTrainerIntroSpeech
 	waitmessage
 	waitbuttonpress
-	goto_if_questlog EventScript_EndQuestLogRematch
 	special StartRematchBattle
 	waitstate
 	releaseall
@@ -83,7 +81,6 @@ EventScript_TryDoDoubleRematchBattle::
 	special ShowTrainerIntroSpeech
 	waitmessage
 	waitbuttonpress
-	goto_if_questlog EventScript_EndQuestLogRematch
 	special StartRematchBattle
 	waitstate
 	releaseall
@@ -99,10 +96,6 @@ EventScript_NotEnoughMonsForDoubleRematchBattle::
 	release
 	end
 
-EventScript_EndQuestLogRematch::
-	releaseall
-	end
-
 EventScript_RevealTrainer::
 	setflag FLAG_SAFE_FOLLOWER_MOVEMENT
 	applymovement VAR_LAST_TALKED, Movement_RevealTrainer
@@ -123,7 +116,6 @@ EventScript_ShowTrainerIntroMsg::
 	goto EventScript_DoTrainerBattle
 
 EventScript_DoTrainerBattle::
-	goto_if_questlog EventScript_EndQuestLogBattle
 	dotrainerbattle
 	specialvar VAR_RESULT, GetTrainerBattleMode
 	goto_if_eq VAR_RESULT, TRAINER_BATTLE_SINGLE, EventScript_EndTrainerBattle
@@ -138,10 +130,6 @@ EventScript_EndTrainerBattle::
 EventScript_EndTrainerBattleContinueScript::
 	gotobeatenscript
 
-EventScript_EndQuestLogBattle::
-	special SetBattledTrainerFlag
-	releaseall
-	end
 
 Std_MsgboxAutoclose::
 	message 0x0
diff --git a/data/scripts/trainer_card.inc b/data/scripts/trainer_card.inc
index 3bb906554..8899ffbad 100644
--- a/data/scripts/trainer_card.inc
+++ b/data/scripts/trainer_card.inc
@@ -90,8 +90,8 @@ FourIsland_House2_EventScript_MeetStickerMan::
 FourIsland_House2_EventScript_StickerManAskForBrag::
 	applymovement LOCALID_STICKER_MAN, Common_Movement_FacePlayer
 	waitmovement 0
-	goto_if_questlog EventScript_ReleaseEnd
-	special QuestLog_CutRecording
+	
+	
 	goto_if_eq VAR_0x8008, 0, FourIsland_House2_EventScript_NothingToBragAbout
 	message FourIsland_House2_Text_BragAboutWhatToday
 	waitmessage
diff --git a/data/specials.inc b/data/specials.inc
index 4c74c8138..3f9cb6128 100644
--- a/data/specials.inc
+++ b/data/specials.inc
@@ -376,7 +376,6 @@ gSpecials::
 	def_special ChangeBoxPokemonNickname
 	def_special UpdateTrainerCardPhotoIcons
 	def_special StickerManGetBragFlags
-	def_special SetUsedPkmnCenterQuestLogEvent
 	def_special IsWirelessAdapterConnected
 	def_special TryBecomeLinkLeader
 	def_special TryJoinLinkGroup
@@ -396,18 +395,12 @@ gSpecials::
 	def_special TakePokemonFromRoute5Daycare
 	def_special DoSeagallopFerryScene
 	def_special DoesPlayerPartyContainSpecies
-	def_special Script_SetHelpContext
-	def_special BackupHelpContext
-	def_special RestoreHelpContext
 	def_special ValidateSavedWonderCard
 	def_special SetUnlockedPokedexFlags
 	def_special InitUnionRoom
 	def_special BufferUnionRoomPlayerName
-	def_special QuestLog_StartRecordingInputsAfterDeferredEvent
 	def_special GetMartClerkObjectId
 	def_special GetMysteryGiftCardStat
-	def_special GetQuestLogState
-	def_special QuestLog_CutRecording
 	def_special WonderNews_GetRewardInfo
 	def_special GetPCBoxToSendMon
 	def_special OpenMuseumFossilPic
@@ -415,7 +408,6 @@ gSpecials::
 	def_special ChooseMonForMoveTutor
 	def_special ChooseMonForWirelessMinigame
 	def_special SetBattledTrainerFlag
-	def_special SetHelpContextForMap
 	def_special DoSSAnneDepartureCutscene
 	def_special IsPokemonJumpSpeciesInParty
 	def_special IsNationalPokedexEnabled
@@ -423,8 +415,6 @@ gSpecials::
 	def_special ShowPokemonJumpRecords
 	def_special BufferTMHMMoveName
 	def_special DaisyMassageServices
-	def_special HelpSystem_Disable
-	def_special HelpSystem_Enable
 	def_special SetPostgameFlags
 	def_special HasAtLeastOneBerry
 	def_special DisplayBerryPowderVendorMenu
diff --git a/include/constants/global.h b/include/constants/global.h
index d197d83c0..66f2908a4 100644
--- a/include/constants/global.h
+++ b/include/constants/global.h
@@ -118,7 +118,6 @@
 #define GIDDY_MAX_TALES       10
 #define GIDDY_MAX_QUESTIONS    8
 
-#define OPTIONS_BUTTON_MODE_HELP         0
 #define OPTIONS_BUTTON_MODE_LR           1
 #define OPTIONS_BUTTON_MODE_L_EQUALS_A   2
 
diff --git a/include/constants/quest_log.h b/include/constants/quest_log.h
index fe284ba13..e69de29bb 100644
--- a/include/constants/quest_log.h
+++ b/include/constants/quest_log.h
@@ -1,156 +0,0 @@
-#ifndef GUARD_CONSTANTS_QUEST_LOG_H
-#define GUARD_CONSTANTS_QUEST_LOG_H
-
-#define QL_STATE_RECORDING     1
-#define QL_STATE_PLAYBACK      2
-#define QL_STATE_PLAYBACK_LAST 3
-
-#define QL_PLAYBACK_STATE_STOPPED            0
-#define QL_PLAYBACK_STATE_RUNNING            1
-#define QL_PLAYBACK_STATE_RECORDING          2
-#define QL_PLAYBACK_STATE_ACTION_END         3
-#define QL_PLAYBACK_STATE_RECORDING_NO_DELAY 4
-
-#define QL_START_NORMAL 1
-#define QL_START_WARP   2
-
-// gGlobalFieldTintMode
-#define QL_TINT_NONE              0
-#define QL_TINT_GRAYSCALE         1
-#define QL_TINT_SEPIA             2
-#define QL_TINT_BACKUP_GRAYSCALE  3
-
-#define QL_IS_PLAYBACK_STATE (gQuestLogState == QL_STATE_PLAYBACK || gQuestLogState == QL_STATE_PLAYBACK_LAST)
-
-#define QL_EVENT_INPUT                          0 // Null
-#define QL_EVENT_GFX_CHANGE                     1 // Null
-#define QL_EVENT_MOVEMENT                       2 // Null
-#define QL_EVENT_SWITCHED_PARTY_ORDER           3
-#define QL_EVENT_USED_ITEM                      4
-#define QL_EVENT_GAVE_HELD_ITEM                 5
-#define QL_EVENT_GAVE_HELD_ITEM_BAG             6
-#define QL_EVENT_GAVE_HELD_ITEM_PC              7
-#define QL_EVENT_TOOK_HELD_ITEM                 8
-#define QL_EVENT_SWAPPED_HELD_ITEM              9
-#define QL_EVENT_SWAPPED_HELD_ITEM_PC           10
-#define QL_EVENT_USED_PKMN_CENTER               11
-#define QL_EVENT_LINK_TRADED                    12
-#define QL_EVENT_LINK_BATTLED_SINGLE            13
-#define QL_EVENT_LINK_BATTLED_DOUBLE            14
-#define QL_EVENT_LINK_BATTLED_MULTI             15
-#define QL_EVENT_USED_UNION_ROOM                16
-#define QL_EVENT_USED_UNION_ROOM_CHAT           17
-#define QL_EVENT_LINK_TRADED_UNION              18
-#define QL_EVENT_LINK_BATTLED_UNION             19
-#define QL_EVENT_SWITCHED_MONS_BETWEEN_BOXES    20
-#define QL_EVENT_SWITCHED_MONS_WITHIN_BOX       21
-#define QL_EVENT_SWITCHED_PARTY_MON_FOR_PC_MON  22
-#define QL_EVENT_MOVED_MON_BETWEEN_BOXES        23
-#define QL_EVENT_MOVED_MON_WITHIN_BOX           24
-#define QL_EVENT_WITHDREW_MON_PC                25
-#define QL_EVENT_DEPOSITED_MON_PC               26
-#define QL_EVENT_SWITCHED_MULTIPLE_MONS         27
-#define QL_EVENT_DEPOSITED_ITEM_PC              28
-#define QL_EVENT_WITHDREW_ITEM_PC               29
-#define QL_EVENT_DEFEATED_GYM_LEADER            30
-#define QL_EVENT_DEFEATED_WILD_MON              31
-#define QL_EVENT_DEFEATED_E4_MEMBER             32
-#define QL_EVENT_DEFEATED_CHAMPION              33
-#define QL_EVENT_DEFEATED_TRAINER               34
-#define QL_EVENT_DEPARTED                       35
-#define QL_EVENT_USED_FIELD_MOVE                36
-#define QL_EVENT_BOUGHT_ITEM                    37
-#define QL_EVENT_SOLD_ITEM                      38
-#define QL_EVENT_SCENE_END                      39 // Null
-#define QL_EVENT_OBTAINED_STORY_ITEM            40
-#define QL_EVENT_WAIT                           41 // Null
-#define QL_EVENT_ARRIVED                        42
-
-#define QL_EVENT_USED_POKEMART (QL_EVENT_BOUGHT_ITEM - 1) // Used as a start pos for QL_EVENT_BOUGHT_ITEM / QL_EVENT_SOLD_ITEM
-
-#define IS_LINK_QL_EVENT(event)((event) >= QL_EVENT_LINK_TRADED && (event) <= QL_EVENT_LINK_BATTLED_UNION)
-#define IS_VALID_QL_EVENT(event)((event) >= QL_EVENT_SWITCHED_PARTY_ORDER && (event) <= QL_EVENT_ARRIVED)
-
-#define QL_LOCATION_HOME                0
-#define QL_LOCATION_OAKS_LAB            1
-#define QL_LOCATION_VIRIDIAN_GYM        2
-#define QL_LOCATION_LEAGUE_GATE_1       3
-#define QL_LOCATION_LEAGUE_GATE_2       4
-#define QL_LOCATION_VIRIDIAN_FOREST_1   5
-#define QL_LOCATION_VIRIDIAN_FOREST_2   6
-#define QL_LOCATION_PEWTER_MUSEUM       7
-#define QL_LOCATION_PEWTER_GYM          8
-#define QL_LOCATION_MT_MOON_1           9
-#define QL_LOCATION_MT_MOON_2           10
-#define QL_LOCATION_CERULEAN_GYM        11
-#define QL_LOCATION_BIKE_SHOP           12
-#define QL_LOCATION_BILLS_HOUSE         13
-#define QL_LOCATION_DAY_CARE            14
-#define QL_LOCATION_UNDERGROUND_PATH_1  15
-#define QL_LOCATION_UNDERGROUND_PATH_2  16
-#define QL_LOCATION_PKMN_FAN_CLUB       17
-#define QL_LOCATION_VERMILION_GYM       18
-#define QL_LOCATION_SS_ANNE             19
-#define QL_LOCATION_DIGLETTS_CAVE_1     20
-#define QL_LOCATION_DIGLETTS_CAVE_2     21
-#define QL_LOCATION_ROCK_TUNNEL_1       22
-#define QL_LOCATION_ROCK_TUNNEL_2       23
-#define QL_LOCATION_POWER_PLANT         24
-#define QL_LOCATION_PKMN_TOWER          25
-#define QL_LOCATION_VOLUNTEER_HOUSE     26
-#define QL_LOCATION_NAME_RATERS_HOUSE   27
-#define QL_LOCATION_UNDERGROUND_PATH_3  28
-#define QL_LOCATION_UNDERGROUND_PATH_4  29
-#define QL_LOCATION_CELADON_DEPT_STORE  30
-#define QL_LOCATION_CELADON_MANSION     31
-#define QL_LOCATION_GAME_CORNER         32
-#define QL_LOCATION_CELADON_GYM         33
-#define QL_LOCATION_CELADON_RESTAURANT  34
-#define QL_LOCATION_ROCKET_HIDEOUT      35
-#define QL_LOCATION_SAFARI_ZONE         36
-#define QL_LOCATION_FUCHSIA_GYM         37
-#define QL_LOCATION_WARDENS_HOME        38
-#define QL_LOCATION_FIGHTING_DOJO       39
-#define QL_LOCATION_SAFFRON_GYM         40
-#define QL_LOCATION_SILPH_CO            41
-#define QL_LOCATION_SEAFOAM_ISLANDS_1   42
-#define QL_LOCATION_SEAFOAM_ISLANDS_2   43
-#define QL_LOCATION_PKMN_MANSION        44
-#define QL_LOCATION_CINNABAR_GYM        45
-#define QL_LOCATION_CINNABAR_LAB        46
-#define QL_LOCATION_VICTORY_ROAD_1      47
-#define QL_LOCATION_VICTORY_ROAD_2      48
-#define QL_LOCATION_PKMN_LEAGUE         49
-#define QL_LOCATION_CERULEAN_CAVE       50
-
-#define QL_DEPARTED_TOWN_BUILDING    0
-#define QL_DEPARTED_MUSEUM           1
-#define QL_DEPARTED_GAME_CORNER      2
-#define QL_DEPARTED_HOME             3
-#define QL_DEPARTED_OAKS_LAB         4
-#define QL_DEPARTED_GYM              5
-#define QL_DEPARTED_SAFARI_ZONE      6
-#define QL_DEPARTED_CAVE             7
-#define QL_DEPARTED_MISC_BUILDING_1  8
-#define QL_DEPARTED_MISC_BUILDING_2  9
-
-#define QL_INPUT_OFF    0
-#define QL_INPUT_UP     1
-#define QL_INPUT_DOWN   2
-#define QL_INPUT_LEFT   3
-#define QL_INPUT_RIGHT  4
-#define QL_INPUT_L      5
-#define QL_INPUT_R      6
-#define QL_INPUT_START  7
-#define QL_INPUT_SELECT 8
-#define QL_INPUT_A      9
-#define QL_INPUT_B      10
-
-#define QL_ACTION_MOVEMENT     0
-#define QL_ACTION_GFX_CHANGE   1
-#define QL_ACTION_INPUT        2
-#define QL_ACTION_EMPTY        3
-#define QL_ACTION_WAIT       254
-#define QL_ACTION_SCENE_END  255
-
-#endif //GUARD_CONSTANTS_QUEST_LOG_H
diff --git a/include/decompress.h b/include/decompress.h
index 5c9849121..f932f4668 100644
--- a/include/decompress.h
+++ b/include/decompress.h
@@ -5,7 +5,7 @@
 
 #include "sprite.h"
 
-extern u8 gDecompressionBuffer[0x4000];
+extern u8 ALIGNED(4) gDecompressionBuffer[0x4000];
 
 void LZDecompressWram(const void *src, void *dest);
 void LZDecompressVram(const void *src, void *dest);
diff --git a/include/event_object_movement.h b/include/event_object_movement.h
index 77eb28761..a85235be8 100644
--- a/include/event_object_movement.h
+++ b/include/event_object_movement.h
@@ -175,7 +175,6 @@ void MoveCoords(u8, s16 *, s16 *);
 bool8 ObjectEventIsHeldMovementActive(struct ObjectEvent *);
 u8 ObjectEventClearHeldMovementIfFinished(struct ObjectEvent *);
 u8 GetObjectEventIdByPosition(u16 x, u16 y, u8 elevation);
-void QL_UpdateObjectEventCurrentMovement(struct ObjectEvent *, struct Sprite *);
 bool8 ObjectEventSetHeldMovement(struct ObjectEvent *, u8);
 void ShiftStillObjectEventCoords(struct ObjectEvent *);
 void OverrideMovementTypeForObjectEvent(const struct ObjectEvent *, u8);
diff --git a/include/field_move.h b/include/field_move.h
index 93a2f3b4b..3ddc16c03 100644
--- a/include/field_move.h
+++ b/include/field_move.h
@@ -10,7 +10,6 @@ struct FieldMoveInfo {
     u8 partyMessageId;
     const u8* description;
     bool32 (*setUpFunc)(void);
-    const u8* questLogText;
 };
 
 extern const struct FieldMoveInfo gFieldMovesInfo[];
diff --git a/include/field_specials.h b/include/field_specials.h
index 384197708..7977618c5 100644
--- a/include/field_specials.h
+++ b/include/field_specials.h
@@ -27,8 +27,7 @@ void IncrementBirthIslandRockStepCount(void);
 void ResetCyclingRoadChallengeData(void);
 void ResetFieldTasksArgs(void);
 bool8 UsedPokemonCenterWarp(void);
-void QuestLog_CheckDepartingIndoorsMap(void);
-void QuestLog_TryRecordDepartedLocation(void);
 bool8 InPokemonCenter(void);
-
+void Special_UpdateTrainerFansAfterLinkBattle(void);
+void ResetTrainerFanClub(void);
 #endif // GUARD_FIELD_SPECIALS_H
diff --git a/include/global.h b/include/global.h
index 03824d8ee..7872ac2c3 100644
--- a/include/global.h
+++ b/include/global.h
@@ -425,7 +425,7 @@ struct SaveBlock2
     /*0xB00*/ struct PokemonJumpRecords pokeJump;
 #endif //FREE_POKEMON_JUMP
     /*0xB10*/ struct BerryPickingResults berryPick;
-    /*0x169C*/ struct BerryTree berryTrees[BERRY_TREES_COUNT]; // moved to SaveBlock2 due to QuestLogScene taking up SaveBlock1
+    /*0x169C*/ struct BerryTree berryTrees[BERRY_TREES_COUNT]; 
     /*0x???*/ u8 filler_90[212];
 }; // size: 0xF24
 
@@ -632,70 +632,10 @@ struct RecordMixingDayCareMail
     bool16 holdsItem[DAYCARE_MON_COUNT];
 };
 
-struct QuestLogObjectEventTemplate
-{
-    u32 x:8;
-    u32 negx:1;
-    u32 y:8;
-    u32 negy:1;
-    u32 elevation:6;
-    u32 movementType:8;
-};
-
-struct QuestLogObjectEvent
-{
-    /*0x00*/ u8 active:1;
-    /*0x00*/ u8 triggerGroundEffectsOnStop:1;
-    /*0x00*/ u8 disableCoveringGroundEffects:1;
-    /*0x00*/ u8 landingJump:1;
-    /*0x00*/ u8 frozen:1;
-    /*0x00*/ u8 facingDirectionLocked:1;
-    /*0x00*/ u8 disableAnim:1;
-    /*0x00*/ u8 enableAnim:1;
-    /*0x01*/ u8 inanimate:1;
-    /*0x01*/ u8 invisible:1;
-    /*0x01*/ u8 offScreen:1;
-    /*0x01*/ u8 trackedByCamera:1;
-    /*0x01*/ u8 isPlayer:1;
-    /*0x01*/ u8 spriteAnimPausedBackup:1;
-    /*0x01*/ u8 spriteAffineAnimPausedBackup:1;
-    /*0x01*/ u8 disableJumpLandingGroundEffect:1;
-    /*0x02*/ u8 fixedPriority:1;
-    /*0x02*/ u8 facingDirection:4;
-    /*0x02*/ u8 unused:3;
-    /*0x03*/ u8 currentElevation:4;
-    /*0x03*/ u8 previousElevation:4;
-    /*0x04*/ u16 graphicsId;
-    /*0x05*/ u8 movementType;
-    /*0x06*/ u8 trainerType;
-    /*0x07*/ u8 localId;
-    /*0x08*/ u8 mapNum;
-    /*0x09*/ u8 mapGroup;
-    /*0x0a*/ s16 x;
-    /*0x0c*/ s16 y;
-    /*0x0e*/ u8 trainerRange_berryTreeId;
-    /*0x0f*/ u8 previousMetatileBehavior;
-    /*0x10*/ u8 directionSequenceIndex;
-    /*0x11*/ u8 animId;
-};
-
-// This represents all the data needed to display a single scene for the "Quest Log" when the player resumes playing.
-//
-struct QuestLogScene
-{
-    /*0x0000*/ u8 startType; // QL_START_NORMAL / QL_START_WARP
-    /*0x0001*/ u8 mapGroup;
-    /*0x0002*/ u8 mapNum;
-    /*0x0003*/ u8 warpId;
-    /*0x0004*/ s16 x;
-    /*0x0006*/ s16 y;
-    /*0x0008*/ struct QuestLogObjectEvent objectEvents[OBJECT_EVENTS_COUNT];
-    /*0x0148*/ u8 flags[NUM_FLAG_BYTES];
-    /*0x02c8*/ u16 vars[VARS_COUNT];
-    /*0x0468*/ struct QuestLogObjectEventTemplate objectEventTemplates[OBJECT_EVENT_TEMPLATES_COUNT];
-    /*0x0568*/ u16 script[128];
-    /*0x0668*/ u16 end[0];
-};
+
+
+
+
 
 #include "fame_checker.h"
 
@@ -861,7 +801,6 @@ struct SaveBlock1
     /*0x0EE0*/ u8 flags[NUM_FLAG_BYTES];
     /*0x1000*/ u16 vars[VARS_COUNT];
     /*0x1200*/ u32 gameStats[NUM_GAME_STATS];
-    /*0x1300*/ struct QuestLogScene questLog[QUEST_LOG_SCENE_COUNT];
     /*0x2CA0*/ u16 easyChatProfile[EASY_CHAT_BATTLE_WORDS_COUNT];
     /*0x2CAC*/ u16 easyChatBattleStart[EASY_CHAT_BATTLE_WORDS_COUNT];
     /*0x2CB8*/ u16 easyChatBattleWon[EASY_CHAT_BATTLE_WORDS_COUNT];
diff --git a/include/help_message.h b/include/help_message.h
deleted file mode 100644
index b75abc77e..000000000
--- a/include/help_message.h
+++ /dev/null
@@ -1,12 +0,0 @@
-#ifndef GUARD_HELP_MESSAGE_H
-#define GUARD_HELP_MESSAGE_H
-
-extern const u8 gHelpMessageWindow_Gfx[];
-
-void DestroyHelpMessageWindow(u8 a0);
-u8 CreateHelpMessageWindow(void);
-void PrintTextOnHelpMessageWindow(const u8 * text, u8 mode);
-void MapNamePopupWindowIdSetDummy(void);
-void DrawHelpMessageWindowTilesById(u8 windowId);
-
-#endif //GUARD_HELP_MESSAGE_H
diff --git a/include/help_system.h b/include/help_system.h
deleted file mode 100644
index 040c1891f..000000000
--- a/include/help_system.h
+++ /dev/null
@@ -1,99 +0,0 @@
-#ifndef GUARD_HELP_SYSTEM_H
-#define GUARD_HELP_SYSTEM_H
-
-#include "global.h"
-#include "list_menu.h"
-#include "blit.h"
-#include "constants/help_system.h"
-
-struct HelpSystemListMenu_sub
-{
-    struct ListMenuItem * items;
-    u16 totalItems;
-    u16 maxShowed;
-    u8 left;
-    u8 top;
-};
-
-struct HelpSystemListMenu
-{
-    struct HelpSystemListMenu_sub sub;
-    u8 itemsAbove;
-    u8 cursorPos;
-    u8 state;
-    u8 filler_10[0xC];
-};
-
-extern struct HelpSystemListMenu gHelpSystemListMenu;
-extern struct ListMenuItem gHelpSystemListMenuItems[];
-extern bool8 gHelpSystemEnabled;
-extern bool8 gHelpSystemToggleWithRButtonDisabled;
-
-// help_system_812B1E0
-void SetHelpContextDontCheckBattle(u8);
-void SetHelpContextForMap(void);
-void SetHelpContext(u8);
-bool8 HelpSystem_UpdateHasntSeenIntro(void);
-bool8 HelpSystem_IsSinglePlayer(void);
-void HelpSystem_Disable(void);
-void HelpSystem_Enable(void);
-void HelpSystem_EnableToggleWithRButton(void);
-bool8 RunHelpMenuSubroutine(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-bool8 HelpSystemSubroutine_PrintWelcomeMessage(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-bool8 HelpSystemSubroutine_WelcomeWaitButton(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-bool8 HelpSystemSubroutine_WelcomeEndGotoMenu(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-bool8 HelpSystemSubroutine_MenuInputHandlerMain(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-bool8 HelpMenuSubroutine_InitSubmenu(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-bool8 HelpMenuSubroutine_ReturnFromSubmenu(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-bool8 HelpMenuSubroutine_SubmenuInputHandler(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-void HelpSystem_PrintTopicLabel(void);
-bool8 HelpMenuSubroutine_HelpItemPrint(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-bool8 HelpMenuSubroutine_ReturnFromHelpItem(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-bool8 HelpMenuSubroutine_HelpItemWaitButton(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer);
-bool8 GetHelpSystemMenuLevel(void);
-
-// help_system
-bool8 RunHelpSystemCallback(void);
-void SaveCallbacks(void);
-void SaveMapGPURegs(void);
-void SaveMapTiles(void);
-void SaveMapTextColors(void);
-void RestoreCallbacks(void);
-void RestoreGPURegs(void);
-void RestoreMapTiles(void);
-void RestoreMapTextColors(void);
-void CommitTilemap(void);
-void HS_BufferFillMapWithTile1FF(void);
-void HS_ShowOrHideWordHELPinTopLeft(u8 mode);
-void HS_ShowOrHideControlsGuideInTopRight(u8 mode);
-void HS_ShowOrHideMainWindowText(u8 mode);
-void HS_SetMainWindowBgBrightness(u8 mode);
-void HS_ShowOrHideToplevelTooltipWindow(u8 mode);
-void HS_ShowOrHideHeaderAndFooterLines_Lighter(u8 mode);
-void HS_ShowOrHideHeaderAndFooterLines_Darker(u8 mode);
-void HS_ShowOrHideVerticalBlackBarsAlongSides(u8 mode);
-void HS_ShowOrHideHeaderLine_Darker_FooterStyle(u8 mode);
-void HS_ShowOrHideScrollArrows(u8 which, u8 mode);
-void HelpSystem_PrintTextRightAlign_Row52(const u8 *str);
-void HelpSystem_PrintTextAt(const u8 *, u8, u8);
-void HelpSystem_PrintQuestionAndAnswerPair(const u8 *a0, const u8 *a1);
-void HelpSystem_PrintTopicMouseoverDescription(const u8 *str);
-void HelpSystem_FillPanel2(void);
-void HelpSystem_FillPanel1(void);
-void HelpSystem_InitListMenuController(struct HelpSystemListMenu *, u8, u8);
-void HelpSystem_SetInputDelay(u8);
-s32 HelpSystem_GetMenuInput(void);
-void HS_UpdateMenuScrollArrows(void);
-
-void DecompressAndRenderGlyph(u8 fontId, u16 glyph, struct Bitmap *srcBlit, struct Bitmap *destBlit, u8 *destBuffer, u8 x, u8 y, u8 width, u8 height);
-void HelpSystem_PrintTextInTopLeftCorner(const u8 * str);
-void HelpSystem_FillPanel3(void);
-void PrintListMenuItems(void);
-void PlaceListMenuCursor(void);
-bool8 MoveCursor(u8 by, u8 dirn);
-void BackupHelpContext(void);
-void RestoreHelpContext(void);
-void HelpSystemRenderText(u8 fontId, u8 * dest, const u8 * src, u8 x, u8 y, u8 width, u8 height);
-void HelpSystem_DisableToggleWithRButton(void);
-
-#endif //GUARD_HELP_SYSTEM_H
diff --git a/include/item.h b/include/item.h
index 1d4448e41..bb8081137 100644
--- a/include/item.h
+++ b/include/item.h
@@ -69,7 +69,6 @@ u16 ItemId_GetSecondaryId(u16 itemId);
 u32 ItemId_GetFlingPower(u32 itemId);
 void ClearBag(void);
 void ClearPCItemSlots(void);
-void TrySetObtainedItemQuestLogEvent(u16 itemId);
 bool8 AddBagItem(u16 itemId, u16 amount);
 
 void SortPocketAndPlaceHMsFirst(struct BagPocket * pocket);
diff --git a/include/item_use.h b/include/item_use.h
index 3ded70c53..5375021c9 100644
--- a/include/item_use.h
+++ b/include/item_use.h
@@ -48,7 +48,6 @@ void Task_UseDigEscapeRopeOnField(u8 taskId);
 u8 CanUseEscapeRopeOnCurrMap(void);
 u8 CheckIfItemIsTMHMOrEvolutionStone(u16 itemId);
 void Task_ItemUse_CloseMessageBoxAndReturnToField_VsSeeker(u8);
-void ItemUse_SetQuestLogEvent(u8, struct Pokemon *, u16, u16);
 void FieldCB_UseItemOnField(void);
 
 enum {
diff --git a/include/map_preview_screen.h b/include/map_preview_screen.h
index 7fbcc675e..ddc9d1ed7 100644
--- a/include/map_preview_screen.h
+++ b/include/map_preview_screen.h
@@ -51,10 +51,9 @@ struct MapPreviewScreen
 u16 MapPreview_CreateMapNameWindow(u8 id);
 void MapPreview_SetFlag(u16 a0);
 u16 MapPreview_GetDuration(u8 id);
-bool8 MapHasPreviewScreen(u8 mapsec, u8 type);
+bool32 MapHasPreviewScreen(u8 mapsec, u8 type);
 bool32 ForestMapPreviewScreenIsRunning(void);
 const struct MapPreviewScreen * GetDungeonMapPreviewScreenInfo(u8 mapsec);
-bool32 MapHasPreviewScreen_HandleQLState2(u8 mapsec, u8 type);
 void MapPreview_InitBgs(void);
 void MapPreview_LoadGfx(u8 mapsec);
 bool32 MapPreview_IsGfxLoadFinished(void);
diff --git a/include/menu.h b/include/menu.h
index 0bfd977b4..e115d13a6 100644
--- a/include/menu.h
+++ b/include/menu.h
@@ -113,7 +113,6 @@ void DisplayItemMessageOnField(u8 taskId, u8 fontId, const u8 *src, TaskFunc cal
 void *MallocAndDecompress(const void *src, u32 * size);
 void DrawHelpMessageWindowWithText(const u8 * text);
 u8 GetStartMenuWindowId(void);
-void DestroyHelpMessageWindow_(void);
 u8 AddStartMenuWindow(u8 height);
 void RemoveStartMenuWindow(void);
 u16 RunTextPrintersAndIsPrinter0Active(void);
diff --git a/include/overworld.h b/include/overworld.h
index 84ce1c374..8b24894c3 100644
--- a/include/overworld.h
+++ b/include/overworld.h
@@ -120,9 +120,6 @@ void SetGameStat(u8 statId, u32 value);
 
 void CB2_ContinueSavedGame(void);
 void Overworld_SetWarpDestinationFromWarp(struct WarpData *);
-void CB2_SetUpOverworldForQLPlayback(void);
-void CB2_SetUpOverworldForQLPlaybackWithWarpExit(void);
-void CB2_EnterFieldFromQuestLog(void);
 void Overworld_PlaySpecialMapMusic(void);
 
 u8 GetCurrentRegionMapSectionId(void);
@@ -160,8 +157,7 @@ void CB2_ReturnToFieldCableClub(void);
 void ResetGameStats(void);
 
 void Overworld_CreditsMainCB(void);
-bool32 Overworld_DoScrollSceneForCredits(u8 *, const struct CreditsOverworldCmd *, u8);
-
+bool32 Overworld_DoScrollSceneForCredits(u8 *state_p, const struct CreditsOverworldCmd * script);
 bool32 IsSendingKeysOverCable(void);
 
 void CB2_ReturnToFieldWithOpenMenu(void);
diff --git a/include/party_menu.h b/include/party_menu.h
index ade7c66c0..a78f075f6 100644
--- a/include/party_menu.h
+++ b/include/party_menu.h
@@ -53,7 +53,6 @@ void CB2_SelectBagItemToGive(void);
 void CB2_GiveHoldItem(void);
 bool8 FieldCallback_PrepareFadeInFromMenu(void);
 void CB2_ReturnToPartyMenuFromFlyMap(void);
-void SetUsedFlyQuestLogEvent(const u8 *healLocCtrlData);
 void CB2_ShowPartyMenuForItemUse(void);
 void ItemUseCB_AbilityCapsule(u8 taskId, TaskFunc task);
 void ItemUseCB_AbilityPatch(u8 taskId, TaskFunc task);
diff --git a/include/quest_log.h b/include/quest_log.h
index 279786985..e69de29bb 100644
--- a/include/quest_log.h
+++ b/include/quest_log.h
@@ -1,244 +0,0 @@
-#ifndef GUARD_QUEST_LOG_H
-#define GUARD_QUEST_LOG_H
-
-#include "global.h"
-#include "quest_log_battle.h"
-#include "field_control_avatar.h"
-#include "constants/quest_log.h"
-#include "constants/battle.h"
-
-// Layout of Quest Log script commands
-#define QL_CMD_EVENT_MASK  0x0FFF
-#define QL_CMD_COUNT_SHIFT 12
-#define QL_CMD_COUNT_MASK  (0xF << QL_CMD_COUNT_SHIFT)
-
-// Parameter to QuestLog_OnEscalatorWarp
-#define QL_ESCALATOR_OUT 1
-#define QL_ESCALATOR_IN  2
-
-struct QuestLogAction
-{
-    union {
-        struct {
-            u8 localId;
-            u8 mapNum;
-            u8 mapGroup;
-            u8 movementActionId;
-        } a; // Data when type == 0
-        struct {
-            u8 localId;
-            u8 mapNum;
-            u8 mapGroup;
-            u8 gfxState;
-        } b; // Data when type == 1
-        u8 fieldInput[4]; // Data when type == 2
-        u8 raw[4];
-    } data;
-    u16 duration;
-    u8 type;
-};
-
-struct QuestLogRepeatEventTracker
-{
-    u8 id;
-    u8 numRepeats;
-    u16 counter;
-};
-
-// Event data structs
-
-// QL_EVENT_SWITCHED_PARTY_ORDER
-struct QuestLogEvent_SwitchedPartyOrder
-{
-    u16 species1;
-    u16 species2;
-};
-
-// QL_EVENT_USED_ITEM
-// QL_EVENT_GAVE_HELD_ITEM
-// QL_EVENT_GAVE_HELD_ITEM_BAG
-// QL_EVENT_GAVE_HELD_ITEM_PC
-// QL_EVENT_TOOK_HELD_ITEM
-// QL_EVENT_DEPOSITED_ITEM_PC
-// QL_EVENT_WITHDREW_ITEM_PC
-struct QuestLogEvent_Item
-{
-    u16 itemId;
-    u16 unused;
-    u16 species;
-    u16 itemParam;
-};
-
-// QL_EVENT_SWAPPED_HELD_ITEM
-// QL_EVENT_SWAPPED_HELD_ITEM_PC
-struct QuestLogEvent_SwappedHeldItem
-{
-    u16 takenItemId;
-    u16 givenItemId;
-    u16 species;
-};
-
-// QL_EVENT_LINK_TRADED
-// QL_EVENT_LINK_TRADED_UNION
-struct QuestLogEvent_Traded
-{
-    u16 speciesSent;
-    u16 speciesReceived;
-    u8 partnerName[PLAYER_NAME_LENGTH];
-};
-
-// QL_EVENT_LINK_BATTLED_SINGLE
-// QL_EVENT_LINK_BATTLED_DOUBLE
-// QL_EVENT_LINK_BATTLED_MULTI
-// QL_EVENT_LINK_BATTLED_UNION
-struct QuestLogEvent_LinkBattle
-{
-    u8 outcome;
-    u8 playerNames[MAX_BATTLERS_COUNT - 1][PLAYER_NAME_LENGTH];
-};
-
-// QL_EVENT_SWITCHED_MONS_BETWEEN_BOXES
-// QL_EVENT_SWITCHED_MONS_WITHIN_BOX
-// QL_EVENT_SWITCHED_PARTY_MON_FOR_PC_MON
-// QL_EVENT_MOVED_MON_BETWEEN_BOXES
-// QL_EVENT_MOVED_MON_WITHIN_BOX
-// QL_EVENT_WITHDREW_MON_PC
-// QL_EVENT_DEPOSITED_MON_PC
-// QL_EVENT_SWITCHED_MULTIPLE_MONS
-struct QuestLogEvent_MovedBoxMon
-{
-    u16 species1;
-    u16 species2;
-    u8 box1;
-    u8 box2;
-};
-
-// QL_EVENT_DEFEATED_TRAINER
-// QL_EVENT_DEFEATED_GYM_LEADER
-// QL_EVENT_DEFEATED_E4_MEMBER
-// QL_EVENT_DEFEATED_CHAMPION
-struct QuestLogEvent_TrainerBattle
-{
-    u16 trainerId;
-    u16 speciesOpponent;
-    u16 speciesPlayer;
-    u8 hpFractionId;
-    u8 mapSec;
-};
-
-// QL_EVENT_DEFEATED_WILD_MON
-struct QuestLogEvent_WildBattle
-{
-    u16 defeatedSpecies;
-    u16 caughtSpecies;
-    u8 mapSec;
-};
-
-// QL_EVENT_DEPARTED
-struct QuestLogEvent_Departed
-{
-    u8 mapSec;
-    u8 locationId;
-};
-
-// QL_EVENT_USED_FIELD_MOVE
-struct QuestLogEvent_FieldMove
-{
-    u16 species;
-    u8 fieldMove;
-    u8 mapSec;
-};
-
-// QL_EVENT_BOUGHT_ITEM
-// QL_EVENT_SOLD_ITEM
-struct QuestLogEvent_Shop
-{
-    u32 totalMoney; // Total amount of money spent buying or earned selling
-    u16 lastItemId;
-    u16 itemQuantity; // Total number of items bought or sold
-    u8 mapSec;
-    bool8 hasMultipleTransactions;
-    u8 logEventId; // Either 0 (empty), 1 (bought) or 2 (sold)
-};
-
-// QL_EVENT_OBTAINED_STORY_ITEM
-struct QuestLogEvent_StoryItem
-{
-    u16 itemId;
-    u8 mapSec;
-};
-
-extern u8 gQuestLogState;
-extern u8 gQuestLogPlaybackState;
-extern struct FieldInput gQuestLogFieldInput;
-extern struct QuestLogRepeatEventTracker gQuestLogRepeatEventTracker;
-extern u16 *gQuestLogDefeatedWildMonRecord;
-extern u16 *gQuestLogRecordingPointer;
-extern u16 gQuestLogCurActionIdx;
-
-void QuestLogRecordPlayerAvatarGfxTransition(u8);
-void SetQuestLogEvent(u16, const u16 *);
-void SetQLPlayedTheSlots(void);
-void QuestLog_RecordEnteredMap(u16);
-u8 QL_GetPlaybackState(void);
-bool8 QL_AvoidDisplay(void (*func)(void));
-void QuestLog_BackUpPalette(u16 offset, u16 size);
-void CommitQuestLogWindow1(void);
-void QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode(void);
-void ResetQuestLog(void);
-void ResetTrainerFanClub(void);
-void TryStartQuestLogPlayback(u8 taskId);
-void SaveQuestLogData(void);
-void QuestLog_CutRecording(void);
-void ResetDeferredLinkEvent(void);
-void QL_FinishRecordingScene(void);
-void QuestLogEvents_HandleEndTrainerBattle(void);
-void *QuestLogGetFlagOrVarPtr(bool8 isFlag, u16 idx);
-void QuestLogSetFlagOrVar(bool8 isFlag, u16 idx, u16 value);
-void QL_AddASLROffset(void *oldSaveBlockPtr);
-void QL_UpdateObject(struct Sprite *sprite);
-void QuestLogRecordNPCStep(u8 a0, u8 a1, u8 a2, u8 a3);
-bool8 QL_IsTrainerSightDisabled(void);
-void QuestLog_OnEscalatorWarp(u8 direction);
-void QuestLogRecordPlayerAvatarGfxTransitionWithDuration(u8 movementActionId, u8 duration);
-void Special_UpdateTrainerFansAfterLinkBattle(void);
-void QuestLogRecordPlayerStep(u8 movementActionId);
-void QuestLogRecordPlayerStepWithDuration(u8 movementActionId, u8 duration);
-void QuestLogRecordNPCStepWithDuration(u8 localId, u8 mapNum, u8 mapGroup, u8 movementActionId, u8 duration);
-void QL_AfterRecordFishActionSuccessful(void);
-void QL_ResetDefeatedWildMonRecord(void);
-void QL_RestoreMapLayoutId(void);
-void QL_RecordFieldInput(struct FieldInput * fieldInput);
-void QL_TryRunActions(void);
-void RunQuestLogCB(void);
-void QL_HandleInput(void);
-bool8 QuestLogScenePlaybackIsEnding(void);
-void SetQuestLogEvent_Arrived(void);
-bool8 QuestLog_ShouldEndSceneOnMapChange(void);
-void QuestLog_AdvancePlayhead_(void);
-void QuestLog_InitPalettesBackup(void);
-void QL_InitSceneObjectsAndActions(void);
-u8 GetQuestLogStartType(void);
-void QL_CopySaveState(void);
-void QL_ResetPartyAndPC(void);
-void QL_StartRecordingAction(u16 eventId);
-bool8 QL_IsRoomToSaveAction(const void *cursor, size_t size);
-bool8 QL_IsRoomToSaveEvent(const void *cursor, size_t size);
-
-void QL_ResetEventStates(void);
-void QL_ResetRepeatEventTracker(void);
-u16 *QL_RecordAction_SceneEnd(u16 *);
-u16 *QL_LoadAction_Wait(u16 *, struct QuestLogAction *);
-u16 *QL_RecordAction_Input(u16 *, struct QuestLogAction *);
-u16 *QL_LoadAction_Input(u16 *, struct QuestLogAction *);
-u16 *QL_RecordAction_MovementOrGfxChange(u16 *, struct QuestLogAction *);
-u16 *QL_LoadAction_MovementOrGfxChange(u16 *, struct QuestLogAction *);
-void QL_EnableRecordingSteps(void);
-u16 *QL_SkipCommand(u16 *, u16 **);
-void QL_UpdateLastDepartedLocation(const u16 *);
-u16 *QL_LoadAction_SceneEnd(u16 *, struct QuestLogAction *);
-bool8 QL_LoadEvent(const u16 *);
-bool8 QL_TryRepeatEvent(const u16 *);
-void QL_RecordWait(u16);
-
-#endif //GUARD_QUEST_LOG_H
diff --git a/include/quest_log_battle.h b/include/quest_log_battle.h
index 3047bb56d..e335e5ac4 100644
--- a/include/quest_log_battle.h
+++ b/include/quest_log_battle.h
@@ -3,7 +3,4 @@
 
 #include "global.h"
 
-void TrySetQuestLogBattleEvent(void);
-void TrySetQuestLogLinkBattleEvent(void);
-
 #endif // GUARD_QUEST_LOG_BATTLE_H
diff --git a/include/quest_log_objects.h b/include/quest_log_objects.h
index ba27bdd09..94342cdb2 100644
--- a/include/quest_log_objects.h
+++ b/include/quest_log_objects.h
@@ -3,8 +3,4 @@
 
 #include "global.h"
 
-void QL_RecordObjects(struct QuestLogScene *);
-void QL_LoadObjects(struct QuestLogScene *, struct ObjectEventTemplate *);
-void QL_TryStopSurfing(void);
-
 #endif //GUARD_QUEST_LOG_OBJECTS_H
diff --git a/include/quest_log_player.h b/include/quest_log_player.h
index 8f2608cb9..8d9c132c8 100644
--- a/include/quest_log_player.h
+++ b/include/quest_log_player.h
@@ -3,22 +3,6 @@
 
 #include "global.h"
 
-enum {
-    QL_PLAYER_GFX_NORMAL,
-    QL_PLAYER_GFX_BIKE,
-    QL_PLAYER_GFX_FISH,
-    QL_PLAYER_GFX_SURF,
-    QL_PLAYER_GFX_STOP_SURF_S,
-    QL_PLAYER_GFX_STOP_SURF_N,
-    QL_PLAYER_GFX_STOP_SURF_W,
-    QL_PLAYER_GFX_STOP_SURF_E,
-    QL_PLAYER_GFX_VSSEEKER,
-    QL_PLAYER_GFX_NONE = 0xFF
-};
 
 
-void QuestLogUpdatePlayerSprite(u8 state);
-bool32 QuestLogTryRecordPlayerAvatarGfxTransition(u8 state);
-void QuestLogCallUpdatePlayerSprite(u8 state);
-
 #endif //GUARD_QUEST_LOG_PLAYER_H
diff --git a/include/script.h b/include/script.h
index df39ec4cb..e5bf4c7df 100644
--- a/include/script.h
+++ b/include/script.h
@@ -61,16 +61,10 @@ void InitRamScript_NoObjectEvent(u8 *script, u16 scriptSize);
 bool32 ValidateRamScript(void);
 void InitRamScript_NoObjectEvent(u8 * script, u16 scriptSize);
 u8 * GetSavedRamScriptIfValid(void);
-void RegisterQuestLogInput(u8 var);
 void ClearMsgBoxCancelableState(void);
-void SetQuestLogInputIsDpadFlag(void);
-void ClearQuestLogInput(void);
-void ClearQuestLogInputIsDpadFlag(void);
 void MsgSetSignpost(void);
 void MsgSetNotSignpost(void);
 bool8 IsMsgSignpost(void);
-bool8 IsQuestLogInputDpad(void);
-u8 GetRegisteredQuestLogInput(void);
 void ResetFacingNpcOrSignpostVars(void);
 bool8 CanWalkAwayToCancelMsgBox(void);
 void SetWalkingIntoSignVars(void);
diff --git a/include/script_menu.h b/include/script_menu.h
index f41ebae05..49d2f14eb 100644
--- a/include/script_menu.h
+++ b/include/script_menu.h
@@ -46,7 +46,6 @@ void ScriptMenu_DisplayPCStartupPrompt(void);
 int ConvertPixelWidthToTileWidth(int width);
 
 bool8 (*ScriptMenu_HidePokemonPic(void))(void);
-void QL_DestroyAbortedDisplay(void);
 void PicboxCancel(void);
 int DisplayTextAndGetWidth(const u8 *str, int width);
 int ScriptMenu_AdjustLeftCoordFromWidth(int left, int width);
diff --git a/include/shop.h b/include/shop.h
index c364531a3..860ac5f55 100644
--- a/include/shop.h
+++ b/include/shop.h
@@ -10,6 +10,5 @@ void CreatePokemartMenu(const u16 *itemsForSale);
 void CreateDecorationShop1Menu(const u16 *);
 void CreateDecorationShop2Menu(const u16 *);
 u8 GetMartFontId(void);
-void RecordItemTransaction(u16 itemId, u16 quantity, u8 logEventId);
 
 #endif // GUARD_SHOP_H
diff --git a/include/strings.h b/include/strings.h
index 01dbd2d6d..4d134ca5d 100644
--- a/include/strings.h
+++ b/include/strings.h
@@ -144,17 +144,6 @@ extern const u8 gTeachyTvText_CatchingScript2[];
 extern const u8 gTeachyTvText_TMsScript2[];
 extern const u8 gTeachyTvText_RegisterScript2[];
 
-// help_system_812B1E0
-extern const u8 gText_HelpSystemControls_A_Next[];
-extern const u8 gText_HelpSystemControls_PickOkEnd[];
-extern const u8 gText_HelpSystemControls_AorBtoCancel[];
-extern const u8 gText_HelpSystemControls_PickOkCancel[];
-
-// help_system
-extern const u8 gString_Bill[];
-extern const u8 gString_Someone[];
-extern const u8 gString_Help[];
-extern const u8 gString_HelpSystem_ClearTo8[];
 
 extern const u8 gText_Var1IsSelected[];
 extern const u8 gOtherText_WhereShouldTheStrVar1BePlaced[];
@@ -1223,120 +1212,6 @@ extern const u8 gText_NeatnessRankings[];
 extern const u8 gText_CooperativeRankings[];
 extern const u8 gText_PressingPowerRankings[];
 
-// quest log
-extern const u8 gText_QuestLog_PreviouslyOnYourQuest[];
-extern const u8 gText_QuestLog_SwitchMon1WithMon2[];
-extern const u8 gText_QuestLog_SwappedHeldItemsOnMon[];
-extern const u8 gText_QuestLog_TookHeldItemFromMon[];
-extern const u8 gText_QuestLog_UsedItemOnMonAtThisLocation[];
-extern const u8 gText_QuestLog_UsedTheItem[];
-extern const u8 gText_QuestLog_UsedTheKeyItem[];
-extern const u8 gText_QuestLog_MonLearnedMoveFromTM[];
-extern const u8 gText_QuestLog_MonReplacedMoveWithTM[];
-extern const u8 gText_QuestLog_MonsWereFullyRestoredAtCenter[];
-extern const u8 gText_QuestLog_PlayerBattledChampionRival[];
-extern const u8 gText_QuestLog_PlayerSentOutMon1RivalSentOutMon2[];
-extern const u8 gText_QuestLog_WonTheMatchAsAResult[];
-extern const u8 gText_QuestLog_StoredItemInPC[];
-extern const u8 gText_QuestLog_WithdrewItemFromPC[];
-extern const u8 gText_QuestLog_TradedMon1ForPersonsMon2[];
-extern const u8 gText_QuestLog_SingleBattleWithPersonResultedInOutcome[];
-extern const u8 gText_QuestLog_DoubleBattleWithPersonResultedInOutcome[];
-extern const u8 gText_QuestLog_MultiBattleWithPeopleResultedInOutcome[];
-extern const u8 gText_QuestLog_Win[];
-extern const u8 gText_QuestLog_Loss[];
-extern const u8 gText_QuestLog_MingledInUnionRoom[];
-extern const u8 gText_QuestLog_DepartedPlaceInTownForNextDestination[];
-extern const u8 gText_QuestLog_SwitchedMonsBetweenBoxes[];
-extern const u8 gText_QuestLog_MovedMonToNewBox[];
-extern const u8 gText_QuestLog_SwitchedMonsWithinBox[];
-extern const u8 gText_QuestLog_MovedMonWithinBox[];
-extern const u8 gText_QuestLog_SwitchedPartyMonForPCMon[];
-extern const u8 gText_QuestLog_WithdrewMonFromPC[];
-extern const u8 gText_QuestLog_DepositedMonInPC[];
-extern const u8 gText_QuestLog_SwitchedMultipleMons[];
-extern const u8 gText_QuestLog_ADifferentSpot[];
-extern const u8 gText_QuestLog_GaveMonHeldItemFromPC[];
-extern const u8 gText_QuestLog_SwappedHeldItemFromPC[];
-extern const u8 gText_QuestLog_ChattedWithManyTrainers[];
-extern const u8 gText_QuestLog_Handily[];
-extern const u8 gText_QuestLog_Tenaciously[];
-extern const u8 gText_QuestLog_Somehow[];
-extern const u8 gText_QuestLog_TradedMon1ForTrainersMon2[];
-extern const u8 gText_QuestLog_BattledTrainerEndedInOutcome[];
-extern const u8 gText_QuestLog_BoughtItem[];
-extern const u8 gText_QuestLog_BoughtItemsIncludingItem[];
-extern const u8 gText_QuestLog_SoldNumOfItem[];
-extern const u8 gText_QuestLog_SoldItemsIncludingItem[];
-extern const u8 gText_QuestLog_JustOne[];
-extern const u8 gText_QuestLog_Num[];
-extern const u8 gText_QuestLog_MonLearnedMoveFromHM[];
-extern const u8 gText_QuestLog_MonReplacedMoveWithHM[];
-extern const u8 gText_QuestLog_DefeatedWildMon[];
-extern const u8 gText_QuestLog_DefeatedWildMons[];
-extern const u8 gText_QuestLog_CaughtWildMon[];
-extern const u8 gText_QuestLog_CaughtWildMons[];
-extern const u8 gText_QuestLog_DefeatedWildMonAndCaughtWildMon[];
-extern const u8 gText_QuestLog_DefeatedWildMonAndCaughtWildMons[];
-extern const u8 gText_QuestLog_DefeatedWildMonsAndCaughtWildMon[];
-extern const u8 gText_QuestLog_DefeatedWildMonsAndCaughtWildMons[];
-extern const u8 gText_QuestLog_GaveMonHeldItem[];
-extern const u8 gText_QuestLog_GaveMonHeldItem2[];
-extern const u8 gText_QuestLog_LeftTownsLocationForNextDestination[];
-extern const u8 gText_QuestLog_PlayedGamesAtGameCorner[];
-extern const u8 gText_QuestLog_RestedAtHome[];
-extern const u8 gText_QuestLog_LeftOaksLab[];
-extern const u8 gText_QuestLog_GymWasFullOfToughTrainers[];
-extern const u8 gText_QuestLog_DepartedGym[];
-extern const u8 gText_QuestLog_HadGreatTimeInSafariZone[];
-extern const u8 gText_QuestLog_ManagedToGetOutOfLocation[];
-extern const u8 gText_QuestLog_TookOnGymLeadersMonWithMonAndWon[];
-extern const u8 gText_QuestLog_TookOnEliteFoursMonWithMonAndWon[];
-extern const u8 gText_QuestLog_TookOnTrainersMonWithMonAndWon[];
-extern const u8 gText_QuestLog_Coolly[];
-extern const u8 gText_QuestLog_Barely[];
-extern const u8 gText_QuestLog_UsedEscapeRope[];
-extern const u8 gText_QuestLog_Draw[];
-extern const u8 gText_QuestLog_DepartedTheLocationForNextDestination[];
-extern const u8 gText_QuestLog_DepartedFromLocationToNextDestination[];
-extern const u8 gText_QuestLog_ObtainedItemInLocation[];
-extern const u8 gText_QuestLog_ArrivedInLocation[];
-extern const u8 gText_QuestLog_SavedGameAtLocation[];
-extern const u8 gText_QuestLog_Home[];
-extern const u8 gText_QuestLog_OakResearchLab[];
-extern const u8 gText_QuestLog_Gym[];
-extern const u8 gText_QuestLog_PokemonLeagueGate[];
-extern const u8 gText_QuestLog_ViridianForest[];
-extern const u8 gText_QuestLog_PewterMuseumOfScience[];
-extern const u8 gText_QuestLog_MtMoon[];
-extern const u8 gText_QuestLog_BikeShop[];
-extern const u8 gText_QuestLog_BillsHouse[];
-extern const u8 gText_QuestLog_DayCare[];
-extern const u8 gText_QuestLog_UndergroundPath[];
-extern const u8 gText_QuestLog_PokemonFanClub[];
-extern const u8 gText_QuestLog_SSAnne[];
-extern const u8 gText_QuestLog_DiglettsCave[];
-extern const u8 gText_QuestLog_RockTunnel[];
-extern const u8 gText_QuestLog_PowerPlant[];
-extern const u8 gText_QuestLog_PokemonTower[];
-extern const u8 gText_QuestLog_VolunteerHouse[];
-extern const u8 gText_QuestLog_NameRatersHouse[];
-extern const u8 gText_QuestLog_CeladonDeptStore[];
-extern const u8 gText_QuestLog_CeladonMansion[];
-extern const u8 gText_QuestLog_RocketGameCorner[];
-extern const u8 gText_QuestLog_Restaurant[];
-extern const u8 gText_QuestLog_RocketHideout[];
-extern const u8 gText_QuestLog_SafariZone[];
-extern const u8 gText_QuestLog_WardensHome[];
-extern const u8 gText_QuestLog_FightingDojo[];
-extern const u8 gText_QuestLog_SilphCo[];
-extern const u8 gText_QuestLog_SeafoamIslands[];
-extern const u8 gText_QuestLog_PokemonMansion[];
-extern const u8 gText_QuestLog_PokemonResearchLab[];
-extern const u8 gText_QuestLog_VictoryRoad[];
-extern const u8 gText_QuestLog_PokemonLeague[];
-extern const u8 gText_QuestLog_CeruleanCave[];
-
 // clear_save_data_screen
 extern const u8 gText_ClearAllSaveData[];
 extern const u8 gText_ClearingData[];
diff --git a/include/text_window.h b/include/text_window.h
index 6eb9bcc41..d72d17d55 100644
--- a/include/text_window.h
+++ b/include/text_window.h
@@ -19,10 +19,8 @@ void LoadUserWindowBorderGfx_(u8 windowId, u16 tileStart, u8 palette);
 void LoadStdWindowGfxOnBg(u8 bgId, u16 tileStart, u8 palette);
 void DrawTextBorderOuter(u8 windowId, u16 tileStart, u8 palette);
 void DrawTextBorderInner(u8 windowId, u16 tileNum, u8 palNum);
-void LoadHelpMessageWindowGfx(u8 windowId, u16 destOffset, u8 palIdx);
 void LoadSignpostWindowGfx(u8 windowId, u16 destOffset, u8 palIdx);
 void LoadDexNavWindowGfx(u8 windowId, u16 destOffset, u8 palOffset);
 void LoadStdWindowTiles(u8 windowId, u16 destOffset);
-void LoadQuestLogWindowTiles(u8 windowId, u16 destOffset);
 
 #endif // GUARD_TEXT_WINDOW_H
diff --git a/src/battle_main.c b/src/battle_main.c
index 4c1ce2dfc..641d7e158 100644
--- a/src/battle_main.c
+++ b/src/battle_main.c
@@ -26,7 +26,7 @@
 #include "evolution_scene.h"
 #include "field_weather.h"
 #include "graphics.h"
-#include "help_system.h"
+
 #include "gpu_regs.h"
 #include "international_string_util.h"
 #include "item.h"
@@ -41,7 +41,7 @@
 #include "pokeball.h"
 #include "pokedex.h"
 #include "pokemon.h"
-#include "quest_log.h"
+
 #include "random.h"
 #include "recorded_battle.h"
 #include "roamer.h"
@@ -480,24 +480,6 @@ void CB2_InitBattle(void)
     else
     {
         CB2_InitBattleInternal();
-        if (!(gBattleTypeFlags & (BATTLE_TYPE_LINK | BATTLE_TYPE_RECORDED_LINK)))
-        {
-            if (gBattleTypeFlags & BATTLE_TYPE_TRAINER)
-            {
-                if (gBattleTypeFlags & BATTLE_TYPE_DOUBLE)
-                    SetHelpContext(HELPCONTEXT_TRAINER_BATTLE_DOUBLE);
-                else
-                    SetHelpContext(HELPCONTEXT_TRAINER_BATTLE_SINGLE);
-            }
-            else if (gBattleTypeFlags & BATTLE_TYPE_SAFARI)
-            {
-                SetHelpContext(HELPCONTEXT_SAFARI_BATTLE);
-            }
-            else
-            {
-                SetHelpContext(HELPCONTEXT_WILD_BATTLE);
-            }
-        }
     }
 }
 
@@ -2287,7 +2269,6 @@ static void EndLinkBattleInSteps(void)
         if (!gPaletteFade.active)
         {
             SetMainCallback2(gMain.savedCallback);
-            TrySetQuestLogLinkBattleEvent();
             FreeMonSpritesGfx();
             FreeBattleSpritesData();
             FreeBattleResources();
@@ -5286,7 +5267,6 @@ static void HandleEndTurn_FinishBattle(void)
                 }
             }
         }
-        TrySetQuestLogBattleEvent();
         if (gBattleTypeFlags & BATTLE_TYPE_TRAINER)
             ClearRematchStateByTrainerId();
         RecordedBattle_SetPlaybackFinished();
diff --git a/src/battle_setup.c b/src/battle_setup.c
index c7ee19120..b9d8899b1 100644
--- a/src/battle_setup.c
+++ b/src/battle_setup.c
@@ -1,14 +1,14 @@
 #include "global.h"
 #include "task.h"
 #include "battle_setup.h"
-#include "help_system.h"
+
 #include "overworld.h"
 #include "item.h"
 #include "sound.h"
 #include "pokemon.h"
 #include "load_save.h"
 #include "safari_zone.h"
-#include "quest_log.h"
+
 #include "script.h"
 #include "script_pokemon_util.h"
 #include "strings.h"
@@ -89,7 +89,6 @@ static void Task_BattleStart(u8 taskId)
     case 0:
         if (!FldEffPoison_IsActive())
         {
-            HelpSystem_Disable();
             BattleTransition_StartOnField(tTransition);
             ++tState;
         }
@@ -97,7 +96,6 @@ static void Task_BattleStart(u8 taskId)
     case 1:
         if (IsBattleTransitionDone() == TRUE)
         {
-            HelpSystem_Enable();
             CleanupOverworldWindowsAndTilemaps();
             SetMainCallback2(CB2_InitBattle);
             RestartWildEncounterImmunitySteps();
@@ -125,7 +123,6 @@ static void Task_BattleStart_Debug(u8 taskId)
     case 0:
         if (!FldEffPoison_IsActive()) // is poison not active?
         {
-            HelpSystem_Disable();
             BattleTransition_StartOnField(tTransition);
             // ClearMirageTowerPulseBlendEffect();
             tState++; // go to case 1.
@@ -134,7 +131,6 @@ static void Task_BattleStart_Debug(u8 taskId)
     case 1:
         if (IsBattleTransitionDone() == TRUE)
         {
-            HelpSystem_Enable();
             CleanupOverworldWindowsAndTilemaps();
             SetMainCallback2(CB2_InitBattle);
             RestartWildEncounterImmunitySteps();
@@ -703,12 +699,10 @@ const u8 *BattleSetup_ConfigureTrainerBattle(const u8 *data)
         return EventScript_TryDoDoubleTrainerBattle;
 #if FREE_MATCH_CALL == FALSE
     case TRAINER_BATTLE_REMATCH_DOUBLE:
-        QL_FinishRecordingScene();
         SetMapVarsToTrainerA();
         TRAINER_BATTLE_PARAM.opponentA = GetRematchTrainerId(TRAINER_BATTLE_PARAM.opponentA);
         return EventScript_TryDoDoubleRematchBattle;
     case TRAINER_BATTLE_REMATCH:
-        QL_FinishRecordingScene();
         SetMapVarsToTrainerA();
         TRAINER_BATTLE_PARAM.opponentA = GetRematchTrainerId(TRAINER_BATTLE_PARAM.opponentA);
         return EventScript_TryDoRematchBattle;
@@ -883,7 +877,6 @@ static void CB2_EndTrainerBattle(void)
             }
             SetMainCallback2(CB2_ReturnToFieldContinueScriptPlayMapMusic);
             SetBattledTrainerFlag();
-            QuestLogEvents_HandleEndTrainerBattle();
         }
         else
         {
@@ -891,7 +884,6 @@ static void CB2_EndTrainerBattle(void)
             DowngradeBadPoison();
             SetMainCallback2(CB2_ReturnToFieldContinueScriptPlayMapMusic);
             SetBattledTrainerFlag();
-            QuestLogEvents_HandleEndTrainerBattle();
         }
 
     }
@@ -911,7 +903,6 @@ static void CB2_EndTrainerBattle(void)
             SetMainCallback2(CB2_ReturnToFieldContinueScriptPlayMapMusic);
             DowngradeBadPoison();
             SetBattledTrainerFlag();
-            QuestLogEvents_HandleEndTrainerBattle();
         }
     }
 }
@@ -932,7 +923,6 @@ static void CB2_EndRematchBattle(void)
         SetMainCallback2(CB2_ReturnToFieldContinueScriptPlayMapMusic);
         SetBattledTrainerFlag();
         ClearRematchStateOfLastTalked();
-        ResetDeferredLinkEvent();
         DowngradeBadPoison();
     }
 }
@@ -996,8 +986,7 @@ void PlayTrainerEncounterMusic(void)
     else
         trainerId = TRAINER_BATTLE_PARAM.opponentB;
 
-    if (!QL_IS_PLAYBACK_STATE
-     && GetTrainerBattleMode() != TRAINER_BATTLE_CONTINUE_SCRIPT_NO_MUSIC
+    if (GetTrainerBattleMode() != TRAINER_BATTLE_CONTINUE_SCRIPT_NO_MUSIC
      && GetTrainerBattleMode() != TRAINER_BATTLE_CONTINUE_SCRIPT_DOUBLE_NO_MUSIC)
     {
         switch (GetTrainerEncounterMusicId(trainerId))
diff --git a/src/berry_fix_program.c b/src/berry_fix_program.c
index 4ef103aec..503cf9cef 100644
--- a/src/berry_fix_program.c
+++ b/src/berry_fix_program.c
@@ -6,7 +6,7 @@
 #include "sprite.h"
 #include "task.h"
 #include "scanline_effect.h"
-#include "help_system.h"
+
 #include "m4a.h"
 
 enum {
@@ -104,7 +104,6 @@ void CB2_InitBerryFixProgram(void)
     ResetSpriteData();
     ResetTasks();
     ScanlineEffect_Stop();
-    gHelpSystemEnabled = FALSE;
     taskId = CreateTask(Task_BerryFixMain, 0);
     gTasks[taskId].tState = STATE_BEGIN;
     SetMainCallback2(CB2_BerryFix);
diff --git a/src/berry_pouch.c b/src/berry_pouch.c
index d946beaca..472dce9d1 100644
--- a/src/berry_pouch.c
+++ b/src/berry_pouch.c
@@ -33,7 +33,6 @@
 #include "pokemon_storage_system.h"
 #include "constants/items.h"
 #include "constants/songs.h"
-#include "constants/quest_log.h"
 
 struct BerryPouchStruct_203F36C
 {
@@ -1423,7 +1422,6 @@ static void Task_SellBerries_PlaySfxAndRemoveBerries(u8 taskId)
     PlaySE(SE_SHOP);
     RemoveBagItem(gSpecialVar_ItemId, data[8]);
     AddMoney(&gSaveBlock1Ptr->money, ItemId_GetPrice(gSpecialVar_ItemId) / 2 * data[8]);
-    RecordItemTransaction(gSpecialVar_ItemId, data[8], QL_EVENT_SOLD_ITEM - QL_EVENT_USED_POKEMART);
     DestroyListMenuTask(data[0], &sStaticCnt.listMenuScrollOffset, &sStaticCnt.listMenuSelectedRow);
     SortAndCountBerries();
     SanitizeListMenuSelectionParams();
diff --git a/src/berry_powder.c b/src/berry_powder.c
index fe6d7e056..a41ceadb5 100644
--- a/src/berry_powder.c
+++ b/src/berry_powder.c
@@ -3,7 +3,7 @@
 #include "load_save.h"
 #include "menu.h"
 #include "palette.h"
-#include "quest_log.h"
+
 #include "script_menu.h"
 #include "string_util.h"
 #include "strings.h"
@@ -96,8 +96,6 @@ void DisplayBerryPowderVendorMenu(void)
 {
     struct WindowTemplate template;
 
-    if (QL_AvoidDisplay(QL_DestroyAbortedDisplay) == TRUE)
-        return;
 
     template = CreateWindowTemplate(0, 1, 1, 8, 3, 15, 32);
     sBerryPowderVendorWindowId = AddWindow(&template);
diff --git a/src/cable_club.c b/src/cable_club.c
index c170ac616..58523cfea 100644
--- a/src/cable_club.c
+++ b/src/cable_club.c
@@ -14,7 +14,6 @@
 #include "menu.h"
 #include "mystery_gift.h"
 #include "overworld.h"
-#include "quest_log.h"
 #include "script.h"
 #include "script_pokemon_util.h"
 #include "start_menu.h"
@@ -27,6 +26,7 @@
 #include "constants/cable_club.h"
 #include "constants/field_weather.h"
 #include "constants/maps.h"
+#include "field_specials.h"
 
 COMMON_DATA u32 UnusedVarNeededToMatch[8] = {0};
 
@@ -765,7 +765,8 @@ void CB2_ReturnFromCableClubBattle(void)
     Overworld_ResetMapMusic();
     LoadPlayerParty();
     SavePlayerBag();
-    Special_UpdateTrainerFansAfterLinkBattle();
+    
+    
 
     if (gSpecialVar_0x8004 != USING_MULTI_BATTLE)
     {
diff --git a/src/credits.c b/src/credits.c
index 1a37bf3e5..bd7723ce6 100644
--- a/src/credits.c
+++ b/src/credits.c
@@ -10,7 +10,7 @@
 #include "trainer_pokemon_sprites.h"
 #include "menu.h"
 #include "field_weather.h"
-#include "quest_log.h"
+
 #include "constants/maps.h"
 #include "constants/field_weather.h"
 #include "constants/sound.h"
@@ -795,7 +795,7 @@ static bool32 DoOverworldMapScrollScene(u8 whichMon)
         sCreditsMgr->subseqno++;
         // fallthrough
     case 1:
-        if (!Overworld_DoScrollSceneForCredits(&sCreditsMgr->ovwldseqno, sOverworldMapScenes[sCreditsMgr->whichMon], QL_TINT_NONE))
+        if (!Overworld_DoScrollSceneForCredits(&sCreditsMgr->ovwldseqno, sOverworldMapScenes[sCreditsMgr->whichMon]))
             return FALSE;
         CreateCreditsWindow();
         SetGpuReg(REG_OFFSET_WIN0H, WIN_RANGE(0, DISPLAY_WIDTH));
diff --git a/src/daycare.c b/src/daycare.c
index 2991d8fa5..b6d9a629d 100644
--- a/src/daycare.c
+++ b/src/daycare.c
@@ -27,7 +27,7 @@
 #include "graphics.h"
 #include "scanline_effect.h"
 #include "naming_screen.h"
-#include "help_system.h"
+
 #include "field_fadetransition.h"
 #include "regions.h"
 #include "trade.h"
@@ -2011,7 +2011,6 @@ void EggHatch(void)
     LockPlayerFieldControls();
     CreateTask(Task_EggHatch, 10);
     BeginNormalPaletteFade(PALETTES_ALL, 0, 0, 16, 0);
-    HelpSystem_Disable();
 }
 
 static void Task_EggHatch(u8 taskID)
@@ -2117,7 +2116,6 @@ static void EggHatchSetMonNickname(void)
     SetMonData(&gPlayerParty[gSpecialVar_0x8004], MON_DATA_NICKNAME, gStringVar3);
     FreeMonSpritesGfx();
     Free(sEggHatchData);
-    HelpSystem_Enable();
     SetMainCallback2(CB2_ReturnToField);
 }
 
@@ -2240,7 +2238,6 @@ static void CB2_EggHatch_1(void)
             UnsetBgTilemapBuffer(1);
             Free(sEggHatchData);
             SetMainCallback2(CB2_ReturnToField);
-            HelpSystem_Enable();
         }
         break;
     }
diff --git a/src/ereader_screen.c b/src/ereader_screen.c
index 20ec25d01..824337ea5 100644
--- a/src/ereader_screen.c
+++ b/src/ereader_screen.c
@@ -13,7 +13,7 @@
 #include "strings.h"
 #include "util.h"
 #include "cereader_tool.h"
-#include "help_system.h"
+
 #include "constants/songs.h"
 
 struct EReaderTaskData
@@ -511,7 +511,6 @@ static void Task_EReader(u8 taskId)
             data->state = ER_STATE_START;
         break;
     case ER_STATE_END:
-        HelpSystem_Enable();
         Free(data->unusedBuffer);
         DestroyTask(taskId);
         SetMainCallback2(MainCB_FreeAllBuffersAndReturnToInitTitleScreen);
diff --git a/src/event_data.c b/src/event_data.c
index 40b6bf8b0..cb677e88d 100644
--- a/src/event_data.c
+++ b/src/event_data.c
@@ -1,9 +1,8 @@
 #include "global.h"
 #include "event_data.h"
 #include "item_menu.h"
-#include "quest_log.h"
 
-static bool8 IsFlagOrVarStoredInQuestLog(u16 idx, u8 a1);
+
 
 #define NUM_SPECIAL_FLAGS  (SPECIAL_FLAGS_END - SPECIAL_FLAGS_START + 1)
 #define NUM_TEMP_FLAGS     (TEMP_FLAGS_END - TEMP_FLAGS_START + 1)
@@ -38,7 +37,7 @@ EWRAM_DATA u16 gSpecialVar_PrevTextColor = 0;
 EWRAM_DATA u16 gSpecialVar_0x8014 = 0;
 EWRAM_DATA u8 sSpecialFlags[SPECIAL_FLAGS_SIZE] = {};
 
-COMMON_DATA u16 gLastQuestLogStoredFlagOrVarIdx = 0;
+
 
 extern u16 *const gSpecialVars[];
 
@@ -185,53 +184,19 @@ bool32 CanResetRTC(void)
     // return TRUE;
 }
 
-u16 *GetVarPointer(u16 idx)
+u16 *GetVarPointer(u16 id)
 {
     u16 *ptr;
-    if (idx < VARS_START)
+    if (id < VARS_START) {
         return NULL;
-    if (idx < SPECIAL_VARS_START)
-    {
-        switch (gQuestLogPlaybackState)
-        {
-        case QL_PLAYBACK_STATE_STOPPED:
-        default:
-            break;
-        case QL_PLAYBACK_STATE_RUNNING:
-            ptr = QuestLogGetFlagOrVarPtr(FALSE, idx);
-            if (ptr != NULL)
-                gSaveBlock1Ptr->vars[idx - VARS_START] = *ptr;
-            break;
-        case QL_PLAYBACK_STATE_RECORDING:
-            if (IsFlagOrVarStoredInQuestLog(idx - VARS_START, TRUE) == TRUE)
-            {
-                gLastQuestLogStoredFlagOrVarIdx = idx - VARS_START;
-                QuestLogSetFlagOrVar(FALSE, idx, gSaveBlock1Ptr->vars[idx - VARS_START]);
-            }
-            break;
-        }
-        return &gSaveBlock1Ptr->vars[idx - VARS_START];
     }
-    return gSpecialVars[idx - SPECIAL_VARS_START];
-}
 
-static bool8 IsFlagOrVarStoredInQuestLog(u16 idx, bool8 isVar)
-{
-    if (!isVar)
-    {
-        if (idx < STORY_FLAGS_START)
-            return FALSE;
-        if (idx >= SYS_FLAGS && idx < PERMA_SYS_FLAGS_START)
-            return FALSE;
-    }
+
+    else if (id < SPECIAL_VARS_START)
+        return &gSaveBlock1Ptr->vars[id - VARS_START];
+
     else
-    {
-        if (idx < VAR_ICE_STEP_COUNT - VARS_START)
-            return FALSE;
-        if (idx >= VAR_MAP_SCENE_PALLET_TOWN_OAK - VARS_START && idx < VAR_PORTHOLE - VARS_START)
-            return FALSE;
-    }
-    return TRUE;
+        return gSpecialVars[id - SPECIAL_VARS_START];
 }
 
 u16 VarGet(u16 idx)
@@ -266,31 +231,10 @@ u16 VarGetObjectEventGraphicsId(u8 idx)
 
 u8 *GetFlagAddr(u16 idx)
 {
-    u8 *ptr;
     if (idx == 0)
         return NULL;
     if (idx < SPECIAL_FLAGS_START)
-    {
-        switch (gQuestLogPlaybackState)
-        {
-        case QL_PLAYBACK_STATE_STOPPED:
-        default:
-            break;
-        case QL_PLAYBACK_STATE_RUNNING:
-            ptr = QuestLogGetFlagOrVarPtr(TRUE, idx);
-            if (ptr != NULL)
-                gSaveBlock1Ptr->flags[idx / 8] = *ptr;
-            break;
-        case QL_PLAYBACK_STATE_RECORDING:
-            if (IsFlagOrVarStoredInQuestLog(idx, FALSE) == TRUE)
-            {
-                gLastQuestLogStoredFlagOrVarIdx = idx;
-                QuestLogSetFlagOrVar(TRUE, idx, gSaveBlock1Ptr->flags[idx / 8]);
-            }
-            break;
-        }
         return &gSaveBlock1Ptr->flags[idx / 8];
-    }
     return &sSpecialFlags[(idx - SPECIAL_FLAGS_START) / 8];
 }
 
diff --git a/src/event_object_movement.c b/src/event_object_movement.c
index 1ea922877..76490080e 100644
--- a/src/event_object_movement.c
+++ b/src/event_object_movement.c
@@ -21,7 +21,7 @@
 #include "overworld.h"
 #include "party_menu.h"
 #include "pokeball.h"
-#include "quest_log.h"
+
 #include "random.h"
 #include "script.h"
 #include "trainer_see.h"
@@ -110,7 +110,6 @@ static bool8 MovementType_Buried_Callback(struct ObjectEvent *, struct Sprite *)
 static u8 MovementType_RaiseHandAndStop_Callback(struct ObjectEvent *, struct Sprite *);
 static u8 MovementType_RaiseHandAndJump_Callback(struct ObjectEvent *, struct Sprite *);
 static u8 MovementType_RaiseHandAndSwim_Callback(struct ObjectEvent *, struct Sprite *);
-static void QuestLogObjectEventExecHeldMovementAction(struct ObjectEvent *, struct Sprite *);
 static void VirtualObject_UpdateAnim(struct Sprite *sprite);
 static u32 LoadDynamicFollowerPalette(u32 species, bool32 shiny, bool32 female);
 static void CopyObjectGraphicsInfoToSpriteTemplate_WithMovementType(u16 graphicsId, u16 movementType, struct SpriteTemplate *spriteTemplate, const struct SubspriteTable **subspriteTables);
@@ -1928,10 +1927,7 @@ void CopyObjectGraphicsInfoToSpriteTemplate(u16 graphicsId, void (*callback)(str
     spriteTemplate->images = graphicsInfo->images;
     spriteTemplate->affineAnims = graphicsInfo->affineAnims;
     
-    if (ScriptContext_IsEnabled() != TRUE && QL_GetPlaybackState() == QL_PLAYBACK_STATE_RUNNING)
-        spriteTemplate->callback = QL_UpdateObject;
-    else
-        spriteTemplate->callback = callback;
+    spriteTemplate->callback = callback;
     
     *subspriteTables = graphicsInfo->subspriteTables;
 }
@@ -2182,7 +2178,6 @@ static u32 LoadDynamicFollowerPalette(u32 species, bool32 shiny, bool32 female)
         // Load compressed palette
         LoadCompressedSpritePaletteWithTag(palette, species);
         paletteNum = IndexOfSpritePaletteTag(species); // Tag is always present
-        ApplyGlobalFieldPaletteTint(paletteNum);
     }
 
     if (gWeatherPtr->currWeather != WEATHER_FOG_HORIZONTAL) // don't want to weather blend in fog
@@ -3154,7 +3149,6 @@ static u8 LoadSpritePaletteIfTagExists(const struct SpritePalette *spritePalette
     if (paletteNum != 0xFF) // don't load twice; return
         return paletteNum;
     paletteNum = LoadSpritePalette(spritePalette);
-    ApplyGlobalFieldPaletteTint(paletteNum);
     if (paletteNum != 0xFF)
         UpdateSpritePaletteWithWeather(paletteNum, FALSE);
     return paletteNum;
@@ -6736,9 +6730,7 @@ static const u8 sActionIdToCopyableMovement[] = {
 
 bool8 ObjectEventSetHeldMovement(struct ObjectEvent *objectEvent, u8 movementActionId)
 {
-    if (QL_GetPlaybackState() == QL_PLAYBACK_STATE_RUNNING)
-        ObjectEventClearHeldMovementIfActive(objectEvent);
-    else if (ObjectEventIsMovementOverridden(objectEvent))
+    if (ObjectEventIsMovementOverridden(objectEvent))
         return TRUE;
 
     movementActionId = TryUpdateMovementActionOnStairs(objectEvent, movementActionId);
@@ -6834,27 +6826,6 @@ void UpdateObjectEventCurrentMovement(struct ObjectEvent *objectEvent, struct Sp
     ObjectEventUpdateSubpriority(objectEvent, sprite);
 }
 
-void QL_UpdateObjectEventCurrentMovement(struct ObjectEvent *objectEvent, struct Sprite *sprite)
-{
-    DoGroundEffects_OnSpawn(objectEvent, sprite);
-    TryEnableObjectEventAnim(objectEvent, sprite);
-
-    if (ObjectEventIsHeldMovementActive(objectEvent) && !sprite->animBeginning)
-        QuestLogObjectEventExecHeldMovementAction(objectEvent, sprite);
-    
-    if (MetatileBehavior_IsIce_2(objectEvent->currentMetatileBehavior) == TRUE
-        || MetatileBehavior_IsTrickHouseSlipperyFloor(objectEvent->currentMetatileBehavior) == TRUE)
-        objectEvent->disableAnim = TRUE;
-    else
-        objectEvent->disableAnim = FALSE;
-
-    DoGroundEffects_OnBeginStep(objectEvent, sprite);
-    DoGroundEffects_OnFinishStep(objectEvent, sprite);
-    UpdateObjectEventSpriteAnimPause(objectEvent, sprite);
-    UpdateObjectEventVisibility(objectEvent, sprite);
-    ObjectEventUpdateSubpriority(objectEvent, sprite);
-}
-
 #define dirn_to_anim(name, table)\
 u8 name(u32 idx)\
 {\
@@ -6954,16 +6925,6 @@ static void ObjectEventExecHeldMovementAction(struct ObjectEvent *objectEvent, s
     }
 }
 
-static void QuestLogObjectEventExecHeldMovementAction(struct ObjectEvent *objectEvent, struct Sprite *sprite)
-{
-    objectEvent->movementActionId = TryUpdateMovementActionOnStairs(objectEvent, objectEvent->movementActionId);
-    if (sMovementActionFuncs[objectEvent->movementActionId][sprite->data[2]](objectEvent, sprite))
-    {
-        objectEvent->heldMovementFinished = TRUE;
-        if (objectEvent->graphicsId == OBJ_EVENT_GFX_PUSHABLE_BOULDER)
-            HandleBoulderFallThroughHole(objectEvent);
-    }
-}
 
 static bool8 ObjectEventExecSingleMovementAction(struct ObjectEvent *objectEvent, struct Sprite *sprite)
 {
@@ -6982,8 +6943,6 @@ static void ObjectEventSetSingleMovement(struct ObjectEvent *objectEvent, struct
     objectEvent->movementActionId = TryUpdateMovementActionOnStairs(objectEvent, movementActionId);
     sprite->data[2] = 0;
     
-    if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_RECORDING)
-        QuestLogRecordNPCStep(objectEvent->localId, objectEvent->mapNum, objectEvent->mapGroup, movementActionId);
 }
 
 static void FaceDirection(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 direction)
@@ -7972,7 +7931,6 @@ static bool8 MovementAction_ExitPokeball_Step0(struct ObjectEvent *objectEvent,
     ObjectEventSetPokeballGfx(objectEvent);
     objectEvent->graphicsId = graphicsId;
     objectEvent->inanimate = FALSE;
-    ApplyGlobalFieldPaletteTint(sprite->oam.paletteNum);
     return MovementAction_ExitPokeball_Step1(objectEvent, sprite);
 }
 
@@ -8101,7 +8059,6 @@ static bool8 MovementAction_EnterPokeball_Step1(struct ObjectEvent *objectEvent,
         ObjectEventSetPokeballGfx(objectEvent);
         objectEvent->graphicsId = graphicsId;
         objectEvent->inanimate = FALSE;
-        ApplyGlobalFieldPaletteTint(sprite->oam.paletteNum);
     }
     return FALSE;
 }
diff --git a/src/evolution_scene.c b/src/evolution_scene.c
index 857f1914c..78a4c6b5a 100644
--- a/src/evolution_scene.c
+++ b/src/evolution_scene.c
@@ -4,7 +4,7 @@
 #include "battle_message.h"
 #include "data.h"
 #include "decompress.h"
-#include "help_system.h"
+
 #include "evolution_scene.h"
 #include "evolution_graphics.h"
 #include "item.h"
@@ -306,7 +306,6 @@ void EvolutionScene(struct Pokemon* mon, u16 postEvoSpecies, bool8 canStopEvo, u
     SetHBlankCallback(EvoDummyFunc);
     SetVBlankCallback(VBlankCB_EvolutionScene);
     m4aMPlayAllStop();
-    HelpSystem_Disable();
     SetMainCallback2(CB2_EvolutionSceneUpdate);
 }
 
@@ -801,7 +800,6 @@ static void Task_EvolutionScene(u8 taskId)
     case EVOSTATE_TRY_LEARN_MOVE:
         if (!IsTextPrinterActive(0))
         {
-            HelpSystem_Enable();
             var = MonTryLearningNewMoveEvolution(mon, gTasks[taskId].tLearnsFirstMove);
             if (var != MOVE_NONE && !gTasks[taskId].tEvoWasStopped)
             {
diff --git a/src/field_control_avatar.c b/src/field_control_avatar.c
index 609e1ce8d..9650a2848 100644
--- a/src/field_control_avatar.c
+++ b/src/field_control_avatar.c
@@ -19,7 +19,7 @@
 #include "metatile_behavior.h"
 #include "overworld.h"
 #include "renewable_hidden_items.h"
-#include "quest_log.h"
+
 #include "safari_zone.h"
 #include "script.h"
 #include "start_menu.h"
@@ -40,8 +40,6 @@
 #define SIGNPOST_SCRIPTED 240
 #define SIGNPOST_NA 255
 
-static void QuestLogOverrideJoyVars(struct FieldInput *input, u16 *newKeys, u16 *heldKeys);
-static void Task_QuestLogPlayback_OpenStartMenu(u8 taskId);
 static void GetPlayerPosition(struct MapPosition * position);
 static u16 GetPlayerCurMetatileBehavior(void);
 static bool8 TryStartInteractionScript(struct MapPosition * position, u16 metatileBehavior, u8 playerDirection);
@@ -101,39 +99,30 @@ void FieldGetPlayerInput(struct FieldInput *input, u16 newKeys, u16 heldKeys)
     u8 tileTransitionState = gPlayerAvatar.tileTransitionState;
     bool8 forcedMove = MetatileBehavior_IsForcedMovementTile(GetPlayerCurMetatileBehavior());
 
-    if (!ScriptContext_IsEnabled() && IsQuestLogInputDpad() == TRUE)
-    {
-        QuestLogOverrideJoyVars(input, &newKeys, &heldKeys);
-    }
     if ((tileTransitionState == T_TILE_CENTER && forcedMove == FALSE) || tileTransitionState == T_NOT_MOVING)
     {
         if (GetPlayerSpeed() != PLAYER_SPEED_FASTEST)
         {
             if ((newKeys & START_BUTTON) && !(gPlayerAvatar.flags & PLAYER_AVATAR_FLAG_FORCED))
                 input->pressedStartButton = TRUE;
-            if (!QL_IS_PLAYBACK_STATE)
+            if (!(gPlayerAvatar.flags & PLAYER_AVATAR_FLAG_FORCED))
             {
-                if (!(gPlayerAvatar.flags & PLAYER_AVATAR_FLAG_FORCED))
-                {
-                    if (newKeys & SELECT_BUTTON)
-                        input->pressedSelectButton = TRUE;
-                    if (newKeys & A_BUTTON)
-                        input->pressedAButton = TRUE;
-                    if (newKeys & B_BUTTON)
-                        input->pressedBButton = TRUE;
-                    if (newKeys & R_BUTTON && !FlagGet(DN_FLAG_SEARCHING))
-                        input->pressedRButton = TRUE;
-                }
+                if (newKeys & SELECT_BUTTON)
+                    input->pressedSelectButton = TRUE;
+                if (newKeys & A_BUTTON)
+                    input->pressedAButton = TRUE;
+                if (newKeys & B_BUTTON)
+                    input->pressedBButton = TRUE;
+                if (newKeys & R_BUTTON && !FlagGet(DN_FLAG_SEARCHING))
+                    input->pressedRButton = TRUE;
             }
+            
         }
 
-        if (!QL_IS_PLAYBACK_STATE)
+        if (heldKeys & (DPAD_UP | DPAD_DOWN | DPAD_LEFT | DPAD_RIGHT))
         {
-            if (heldKeys & (DPAD_UP | DPAD_DOWN | DPAD_LEFT | DPAD_RIGHT))
-            {
-                input->heldDirection = TRUE;
-                input->heldDirection2 = TRUE;
-            }
+            input->heldDirection = TRUE;
+            input->heldDirection2 = TRUE;
         }
 
     }
@@ -146,62 +135,25 @@ void FieldGetPlayerInput(struct FieldInput *input, u16 newKeys, u16 heldKeys)
             input->checkStandardWildEncounter = TRUE;
     }
 
-    if (!QL_IS_PLAYBACK_STATE)
+    if (heldKeys & DPAD_UP)
+        input->dpadDirection = DIR_NORTH;
+    else if (heldKeys & DPAD_DOWN)
+        input->dpadDirection = DIR_SOUTH;
+    else if (heldKeys & DPAD_LEFT)
+        input->dpadDirection = DIR_WEST;
+    else if (heldKeys & DPAD_RIGHT)
+        input->dpadDirection = DIR_EAST;
+
+    if(DEBUG_OVERWORLD_MENU && !DEBUG_OVERWORLD_IN_MENU)
     {
-        if (heldKeys & DPAD_UP)
-            input->dpadDirection = DIR_NORTH;
-        else if (heldKeys & DPAD_DOWN)
-            input->dpadDirection = DIR_SOUTH;
-        else if (heldKeys & DPAD_LEFT)
-            input->dpadDirection = DIR_WEST;
-        else if (heldKeys & DPAD_RIGHT)
-            input->dpadDirection = DIR_EAST;
-
-        if(DEBUG_OVERWORLD_MENU && !DEBUG_OVERWORLD_IN_MENU)
+        if ((heldKeys & DEBUG_OVERWORLD_HELD_KEYS) && input->DEBUG_OVERWORLD_TRIGGER_EVENT)
         {
-            if ((heldKeys & DEBUG_OVERWORLD_HELD_KEYS) && input->DEBUG_OVERWORLD_TRIGGER_EVENT)
-            {
-                input->input_field_1_2 = TRUE;
-                input->DEBUG_OVERWORLD_TRIGGER_EVENT = FALSE;
-            }
+            input->input_field_1_2 = TRUE;
+            input->DEBUG_OVERWORLD_TRIGGER_EVENT = FALSE;
         }
     }
 
-}
 
-static void QuestLogOverrideJoyVars(struct FieldInput *input, u16 *newKeys, u16 *heldKeys)
-{
-    switch (GetRegisteredQuestLogInput())
-    {
-    case QL_INPUT_OFF:
-        break;
-    case QL_INPUT_UP:
-        *heldKeys = *newKeys = DPAD_UP;
-        break;
-    case QL_INPUT_DOWN:
-        *heldKeys = *newKeys = DPAD_DOWN;
-        break;
-    case QL_INPUT_LEFT:
-        *heldKeys = *newKeys = DPAD_LEFT;
-        break;
-    case QL_INPUT_RIGHT:
-        *heldKeys = *newKeys = DPAD_RIGHT;
-        break;
-    case QL_INPUT_L:
-        *heldKeys = *newKeys = L_BUTTON;
-        break;
-    case QL_INPUT_R:
-        *heldKeys = *newKeys = R_BUTTON;
-        break;
-    case QL_INPUT_START:
-        *heldKeys = *newKeys = START_BUTTON;
-        break;
-    case QL_INPUT_SELECT:
-        *heldKeys = *newKeys = SELECT_BUTTON;
-        break;
-    }
-    ClearQuestLogInputIsDpadFlag();
-    ClearQuestLogInput();
 }
 
 int ProcessPlayerFieldInput(struct FieldInput *input)
@@ -339,14 +291,6 @@ void FieldInput_HandleCancelSignpost(struct FieldInput * input)
             {
                 if (IsMsgBoxWalkawayDisabled() == TRUE)
                     return;
-                if (input->dpadDirection == DIR_NORTH)
-                    RegisterQuestLogInput(QL_INPUT_UP);
-                else if (input->dpadDirection == DIR_SOUTH)
-                    RegisterQuestLogInput(QL_INPUT_DOWN);
-                else if (input->dpadDirection == DIR_WEST)
-                    RegisterQuestLogInput(QL_INPUT_LEFT);
-                else if (input->dpadDirection == DIR_EAST)
-                    RegisterQuestLogInput(QL_INPUT_RIGHT);
                 ScriptContext_SetupScript(EventScript_CancelMessageBox);
                 LockPlayerFieldControls();
             }
@@ -354,23 +298,11 @@ void FieldInput_HandleCancelSignpost(struct FieldInput * input)
             {
                 ScriptContext_SetupScript(EventScript_CancelMessageBox);
                 LockPlayerFieldControls();
-                if (!FuncIsActiveTask(Task_QuestLogPlayback_OpenStartMenu))
-                    CreateTask(Task_QuestLogPlayback_OpenStartMenu, 8);
             }
         }
     }
 }
 
-static void Task_QuestLogPlayback_OpenStartMenu(u8 taskId)
-{
-    if (!ArePlayerFieldControlsLocked())
-    {
-        PlaySE(SE_WIN_OPEN);
-        ShowStartMenu();
-        DestroyTask(taskId);
-    }
-}
-
 static void GetPlayerPosition(struct MapPosition *position)
 {
     PlayerGetDestCoords(&position->x, &position->y);
@@ -712,8 +644,6 @@ static bool8 TryStartStepCountScript(u16 metatileBehavior)
 {
     if (InUnionRoom() == TRUE)
         return FALSE;
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-        return FALSE;
 
     UpdateHappinessStepCounter();
     UpdateLetsGoEvolutionTracker();
@@ -1172,7 +1102,6 @@ void HandleBoulderActivateVictoryRoadSwitch(u16 x, u16 y)
         {
             if (events[i].x + MAP_OFFSET == x && events[i].y + MAP_OFFSET == y)
             {
-                QuestLog_CutRecording();
                 ScriptContext_SetupScript(events[i].script);
                 LockPlayerFieldControls();
             }
diff --git a/src/field_effect.c b/src/field_effect.c
index 59cdd8b98..89d8c11d3 100644
--- a/src/field_effect.c
+++ b/src/field_effect.c
@@ -12,13 +12,13 @@
 #include "field_player_avatar.h"
 #include "field_weather.h"
 #include "fieldmap.h"
-#include "help_system.h"
+
 #include "metatile_behavior.h"
 #include "menu.h"
 #include "overworld.h"
 #include "party_menu.h"
 #include "pokemon_storage_system.h"
-#include "quest_log.h"
+
 #include "rtc.h"
 #include "script.h"
 #include "special_field_anim.h"
@@ -425,23 +425,6 @@ static void UNUSED FieldEffectScript_LoadTiles(const struct SpriteSheet * sprite
 
 void ApplyGlobalFieldPaletteTint(u8 paletteIdx)
 {
-    switch (gGlobalFieldTintMode)
-    {
-    case 0:
-        return;
-    case 1:
-        TintPalette_GrayScale(&gPlttBufferUnfaded[OBJ_PLTT_ID2(paletteIdx)], 16);
-        break;
-    case 2:
-        TintPalette_SepiaTone(&gPlttBufferUnfaded[OBJ_PLTT_ID2(paletteIdx)], 16);
-        break;
-    case 3:
-        QuestLog_BackUpPalette(OBJ_PLTT_ID2(paletteIdx), 16);
-        TintPalette_GrayScale(&gPlttBufferUnfaded[OBJ_PLTT_ID2(paletteIdx)], 16);
-        break;
-    default:
-        return;
-    }
     CpuFastCopy(&gPlttBufferUnfaded[OBJ_PLTT_ID2(paletteIdx)], &gPlttBufferFaded[OBJ_PLTT_ID2(paletteIdx)], PLTT_SIZE_4BPP);
 }
 
@@ -1103,7 +1086,7 @@ void FieldCB_FallWarpExit(void)
 {
     Overworld_PlaySpecialMapMusic();
     WarpFadeInScreen();
-    QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode();
+    
     LockPlayerFieldControls();
     FreezeObjectEvents();
     CreateTask(Task_FallWarpFieldEffect, 0);
@@ -1231,7 +1214,6 @@ static bool8 FallWarpEffect_7(struct Task *task)
     {
         VarSet(VAR_TEMP_1, 1);
         SetPlayerAvatarTransitionFlags(PLAYER_AVATAR_FLAG_SURFING);
-        SetHelpContext(HELPCONTEXT_SURFING);
     }
     DestroyTask(FindTaskIdByFunc(Task_FallWarpFieldEffect));
     return FALSE;
@@ -1297,7 +1279,7 @@ static bool8 EscalatorWarpEffect_1(struct Task *task)
     CameraObjectReset2();
     StartEscalator(task->data[1]);
     HideFollowerForFieldEffect(); // Hide follower before warping
-    QuestLog_OnEscalatorWarp(QL_ESCALATOR_OUT);
+    
     task->data[0]++;
     return FALSE;
 }
@@ -1416,7 +1398,7 @@ static void FieldCB_EscalatorWarpIn(void)
 {
     Overworld_PlaySpecialMapMusic();
     WarpFadeInScreen();
-    QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode();
+    
     LockPlayerFieldControls();
     FreezeObjectEvents();
     CreateTask(Task_EscalatorWarpInFieldEffect, 0);
@@ -1538,7 +1520,7 @@ static bool8 EscalatorWarpInEffect_7(struct Task *task)
         UnfreezeObjectEvents();
         ObjectEventSetHeldMovement(objectEvent, GetWalkNormalMovementAction(DIR_EAST));
         DestroyTask(FindTaskIdByFunc(Task_EscalatorWarpInFieldEffect));
-        QuestLog_OnEscalatorWarp(QL_ESCALATOR_IN);
+        
     }
     return FALSE;
 }
@@ -1826,7 +1808,6 @@ static void FieldCB_LavaridgeGymB1FWarpExit(void)
 {
     Overworld_PlaySpecialMapMusic();
     WarpFadeInScreen();
-    QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode();
     LockPlayerFieldControls();
     gFieldCallback = NULL;
     CreateTask(Task_LavaridgeGymB1FWarpExit, 0);
@@ -2234,7 +2215,6 @@ static void FieldCallback_EscapeRopeExit(void)
 {
     Overworld_PlaySpecialMapMusic();
     WarpFadeInScreen();
-    QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode();
     LockPlayerFieldControls();
     FreezeObjectEvents();
     gFieldCallback = NULL;
@@ -2411,7 +2391,6 @@ static void FieldCallback_TeleportIn(void)
 {
     Overworld_PlaySpecialMapMusic();
     WarpFadeInScreen();
-    QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode();
     LockPlayerFieldControls();
     FreezeObjectEvents();
     gFieldCallback = NULL;
@@ -3039,7 +3018,6 @@ static void UseSurfEffect_5(struct Task *task)
         UnlockPlayerFieldControls();
         FieldEffectActiveListRemove(FLDEFF_USE_SURF);
         DestroyTask(FindTaskIdByFunc(Task_FldEffUseSurf));
-        SetHelpContext(HELPCONTEXT_SURFING);
     }
 }
 
@@ -3058,8 +3036,6 @@ static void (*const sUseVsSeekerEffectFuncs[])(struct Task *task) = {
 
 u32 FldEff_UseVsSeeker(void)
 {
-    if (gQuestLogState == QL_STATE_RECORDING)
-        QuestLogRecordPlayerAvatarGfxTransitionWithDuration(8, 89);
     CreateTask(Task_FldEffUseVsSeeker, 0xFF);
     return 0;
 }
diff --git a/src/field_fadetransition.c b/src/field_fadetransition.c
index 8143fee93..0f5415add 100644
--- a/src/field_fadetransition.c
+++ b/src/field_fadetransition.c
@@ -11,7 +11,7 @@
 #include "cable_club.h"
 #include "fieldmap.h"
 #include "metatile_behavior.h"
-#include "quest_log.h"
+
 #include "link.h"
 #include "event_object_movement.h"
 #include "field_door.h"
@@ -278,7 +278,6 @@ static void ExitWarpFadeInScreen(bool8 playerNotMoving)
 void FieldCB_DefaultWarpExit(void)
 {
     Overworld_PlaySpecialMapMusic();
-    QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode();
     SetUpWarpExitTask(FALSE);
     LockPlayerFieldControls();
 }
@@ -286,7 +285,6 @@ void FieldCB_DefaultWarpExit(void)
 void FieldCB_WarpExitFadeFromBlack(void)
 {
     Overworld_PlaySpecialMapMusic();
-    QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode();
     SetUpWarpExitTask(TRUE);
     LockPlayerFieldControls();
 }
@@ -295,7 +293,6 @@ static void FieldCB_TeleportWarpIn(void)
 {
     Overworld_PlaySpecialMapMusic();
     WarpFadeInScreen();
-    QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode();
     PlaySE(SE_WARP_OUT);
     CreateTask(Task_TeleportWarpIn, 10);
     LockPlayerFieldControls();
diff --git a/src/field_message_box.c b/src/field_message_box.c
index 387668a1e..194dfeead 100644
--- a/src/field_message_box.c
+++ b/src/field_message_box.c
@@ -2,7 +2,7 @@
 #include "field_message_box.h"
 #include "gflib.h"
 #include "menu.h"
-#include "quest_log.h"
+
 #include "script.h"
 #include "text_window.h"
 
@@ -24,12 +24,7 @@ static void Task_DrawFieldMessageBox(u8 taskId)
     switch (task->data[0])
     {
     case 0:
-        if (gQuestLogState == QL_STATE_PLAYBACK)
-        {
-            gTextFlags.autoScroll = TRUE;
-            LoadQuestLogWindowTiles(0, 0x200);
-        }
-        else if (!IsMsgSignpost())
+        if (!IsMsgSignpost())
             LoadMessageBoxAndBorderGfx();
         else
             LoadSignpostWindowFrameGfx();
diff --git a/src/field_move.c b/src/field_move.c
index 9c395b5bc..e24390cbd 100644
--- a/src/field_move.c
+++ b/src/field_move.c
@@ -27,7 +27,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_NOTHING_TO_CUT,
         .description = COMPOUND_STRING("Cut a tree or grass."),
         .setUpFunc = FieldMove_SetUpCut,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} used the Hidden Move\nCUT here."),
     },
     [FIELD_MOVE_FLY] =
     {
@@ -37,7 +36,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("Fly to a known town."),
         .setUpFunc = FieldMove_SetUpFly,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} used the Hidden Move\nFLY and flew to {STR_VAR_2}."),
     },
     [FIELD_MOVE_SURF] =
     {
@@ -47,7 +45,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_SURF_HERE,
         .description = COMPOUND_STRING("Travel on water."),
         .setUpFunc = FieldMove_SetUpSurf,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} used the Hidden Move\nSURF and rode the waves."),
     },
     [FIELD_MOVE_STRENGTH] =
     {
@@ -57,7 +54,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("Move heavy boulders."),
         .setUpFunc = FieldMove_SetUpStrength,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} used the Hidden Move\nSTRENGTH here."),
     },
     [FIELD_MOVE_FLASH] =
     {
@@ -67,7 +63,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("Light up darkness."),
         .setUpFunc = FieldMove_SetUpFlash,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} used the Hidden Move\nFLASH and illuminated a pitch-black\ncave."),
     },
     [FIELD_MOVE_ROCK_SMASH] =
     {
@@ -77,7 +72,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("Shatter a cracked rock."),
         .setUpFunc = FieldMove_SetUpRockSmash,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} used the Hidden Move\nROCK SMASH here."),
     },
     [FIELD_MOVE_WATERFALL] =
     {
@@ -87,7 +81,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("Climb a waterfall."),
         .setUpFunc = FieldMove_SetUpWaterfall,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} used the Hidden Move\nWATERFALL to scale a raging torrent."),
     },
     [FIELD_MOVE_WHIRLPOOL] =
     {
@@ -97,7 +90,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("N/A"),
         .setUpFunc = NULL,
-        .questLogText = COMPOUND_STRING("N/A"),
     },
     [FIELD_MOVE_DIVE] =
     {
@@ -107,7 +99,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("N/A"),
         .setUpFunc = NULL,
-        .questLogText = COMPOUND_STRING("N/A"),
     },
     [FIELD_MOVE_DEFOG] =
     {
@@ -117,7 +108,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("N/A"),
         .setUpFunc = NULL,
-        .questLogText = COMPOUND_STRING("N/A"),
     },
     [FIELD_MOVE_ROCK_CLIMB] =
     {
@@ -127,7 +117,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("N/A"),
         .setUpFunc = NULL,
-        .questLogText = COMPOUND_STRING("N/A"),
     },
     [FIELD_MOVE_TELEPORT] =
     {
@@ -137,7 +126,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("Return to a healing spot."),
         .setUpFunc = FieldMove_SetUpTeleport,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} used TELEPORT, transporting\nthe party to {STR_VAR_2}'s\n{STR_VAR_3}."),
     },
     [FIELD_MOVE_DIG] =
     {
@@ -147,7 +135,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("Escape from here."),
         .setUpFunc = FieldMove_SetUpDig,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} used DIG to escape from\n{STR_VAR_2}."),
     },
     [FIELD_MOVE_MILK_DRINK] =
     {
@@ -157,7 +144,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_NOT_ENOUGH_HP,
         .description = sText_ShareHp,
         .setUpFunc = FieldMove_SetUpSoftBoiled,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} shared its HP using the move\nMILK DRINK."),
     },
     [FIELD_MOVE_SOFT_BOILED] =
     {
@@ -167,7 +153,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_NOT_ENOUGH_HP,
         .description = sText_ShareHp,
         .setUpFunc = FieldMove_SetUpSoftBoiled,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} shared its HP using the move\nSOFTBOILED."),
     },
     [FIELD_MOVE_SWEET_SCENT] =
     {
@@ -177,7 +162,6 @@ const struct FieldMoveInfo gFieldMovesInfo[FIELD_MOVE_COUNT] =
         .partyMessageId = PARTY_MSG_CANT_USE_HERE,
         .description = COMPOUND_STRING("Lure wild POKéMON."),
         .setUpFunc = FieldMove_SetUpSweetScent,
-        .questLogText = COMPOUND_STRING("{STR_VAR_1} used SWEET SCENT to attract\nwild POKéMON."),
     },
 };
 
diff --git a/src/field_player_avatar.c b/src/field_player_avatar.c
index eb2f4c60b..f20c89ac7 100644
--- a/src/field_player_avatar.c
+++ b/src/field_player_avatar.c
@@ -9,13 +9,13 @@
 #include "field_effect.h"
 #include "field_effect_helpers.h"
 #include "field_player_avatar.h"
-#include "help_system.h"
+
 #include "menu.h"
 #include "metatile_behavior.h"
 #include "overworld.h"
 #include "party_menu.h"
-#include "quest_log.h"
-#include "quest_log_player.h"
+
+
 #include "random.h"
 #include "script.h"
 #include "strings.h"
@@ -647,13 +647,6 @@ u8 CheckForObjectEventCollision(struct ObjectEvent *objectEvent, s16 x, s16 y, u
     return collision;
 }
 
-static const u8 sQuestLogSurfDismountActionIds[] = {
-    QL_PLAYER_GFX_STOP_SURF_S,
-    QL_PLAYER_GFX_STOP_SURF_S,
-    QL_PLAYER_GFX_STOP_SURF_N,
-    QL_PLAYER_GFX_STOP_SURF_W,
-    QL_PLAYER_GFX_STOP_SURF_E
-};
 
 static bool8 CanStopSurfing(s16 x, s16 y, u8 direction)
 {
@@ -661,7 +654,6 @@ static bool8 CanStopSurfing(s16 x, s16 y, u8 direction)
         && MapGridGetElevationAt(x, y) == 3
         && GetObjectEventIdByPosition(x, y, 3) == OBJECT_EVENTS_COUNT)
     {
-        QuestLogRecordPlayerAvatarGfxTransitionWithDuration(sQuestLogSurfDismountActionIds[direction], 16);
         CreateStopSurfingTask(direction);
         return TRUE;
     }
@@ -774,31 +766,45 @@ static void DoPlayerAvatarTransition(void)
     }
 }
 
-static void PlayerAvatarTransition_Dummy(struct ObjectEvent * playerObjEvent)
+static void PlayerAvatarTransition_Dummy(struct ObjectEvent * objEvent)
 {
 
 }
 
-static void PlayerAvatarTransition_Normal(struct ObjectEvent * playerObjEvent)
+static void PlayerAvatarTransition_Normal(struct ObjectEvent * objEvent)
 {
-    QuestLogTryRecordPlayerAvatarGfxTransition(QL_PLAYER_GFX_NORMAL);
-    QuestLogCallUpdatePlayerSprite(QL_PLAYER_GFX_NORMAL);
+    ObjectEventSetGraphicsId(objEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_NORMAL));
+    ObjectEventTurn(objEvent, objEvent->movementDirection);
+    SetPlayerAvatarStateMask(PLAYER_AVATAR_FLAG_ON_FOOT);
 }
 
-static void PlayerAvatarTransition_Bike(struct ObjectEvent * playerObjEvent)
+static void PlayerAvatarTransition_Bike(struct ObjectEvent * objEvent)
 {
-    QuestLogTryRecordPlayerAvatarGfxTransition(QL_PLAYER_GFX_BIKE);
-    QuestLogCallUpdatePlayerSprite(QL_PLAYER_GFX_BIKE);
+    ObjectEventSetGraphicsId(objEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_MACH_BIKE));
+    ObjectEventTurn(objEvent, objEvent->movementDirection);
+    SetPlayerAvatarStateMask(PLAYER_AVATAR_FLAG_MACH_BIKE);
     BikeClearState(0, 0);
 }
 
-static void PlayerAvatarTransition_Surfing(struct ObjectEvent * playerObjEvent)
+static void PlayerAvatarTransition_Surfing(struct ObjectEvent * objEvent)
 {
-    QuestLogTryRecordPlayerAvatarGfxTransition(QL_PLAYER_GFX_SURF);
-    QuestLogCallUpdatePlayerSprite(QL_PLAYER_GFX_SURF);
+    u8 spriteId;
+
+    if (!(gPlayerAvatar.flags & PLAYER_AVATAR_FLAG_SURFING))
+    {
+        ObjectEventSetGraphicsId(objEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_SURFING));
+        ObjectEventTurn(objEvent, objEvent->movementDirection);
+        SetPlayerAvatarStateMask(PLAYER_AVATAR_FLAG_SURFING);
+        gFieldEffectArguments[0] = objEvent->currentCoords.x;
+        gFieldEffectArguments[1] = objEvent->currentCoords.y;
+        gFieldEffectArguments[2] = gPlayerAvatar.objectEventId;
+        spriteId = FieldEffectStart(FLDEFF_SURF_BLOB);
+        objEvent->fieldEffectSpriteId = spriteId;
+        SetSurfBlob_BobState(spriteId, BOB_PLAYER_AND_MON);
+    }
 }
 
-static void PlayerAvatarTransition_Underwater(struct ObjectEvent * playerObjEvent)
+static void PlayerAvatarTransition_Underwater(struct ObjectEvent * objEvent)
 {
 
 }
@@ -878,22 +884,10 @@ static void PlayerSetAnimId(u8 movementActionId, u8 copyableMovement)
     if (!PlayerIsAnimActive())
     {
         PlayerSetCopyableMovement(copyableMovement);
-        if (!ObjectEventSetHeldMovement(&gObjectEvents[gPlayerAvatar.objectEventId], movementActionId))
-            QuestLogRecordPlayerStep(movementActionId);
+        ObjectEventSetHeldMovement(&gObjectEvents[gPlayerAvatar.objectEventId], movementActionId);
     }
 }
 
-static void QL_TryRecordPlayerStepWithDuration0(struct ObjectEvent * objectEvent, u8 movementAction)
-{
-    if (!ObjectEventSetHeldMovement(&gObjectEvents[gPlayerAvatar.objectEventId], movementAction))
-        QuestLogRecordPlayerStepWithDuration(movementAction, 0);
-}
-
-static void QL_TryRecordNPCStepWithDuration32(struct ObjectEvent * objectEvent, u8 movementAction)
-{
-    if (!ObjectEventSetHeldMovement(objectEvent, movementAction))
-        QuestLogRecordNPCStepWithDuration(objectEvent->localId, objectEvent->mapNum, objectEvent->mapGroup, movementAction, 32);
-}
 
 void PlayerWalkSlower(u8 direction)
 {
@@ -1344,9 +1338,10 @@ void StartPlayerAvatarVsSeekerAnim(void)
     StartSpriteAnim(&gSprites[gPlayerAvatar.spriteId], ANIM_VS_SEEKER);
 }
 
-void StartPlayerAvatarFishAnim(u8 direction)
+static void SetPlayerAvatarFishing(u8 direction)
 {
-    QuestLogCallUpdatePlayerSprite(QL_PLAYER_GFX_FISH);
+    ObjectEventSetGraphicsId(&gObjectEvents[gPlayerAvatar.objectEventId], GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_FISHING));
+    StartSpriteAnim(&gSprites[gPlayerAvatar.spriteId], GetFishingDirectionAnimNum(direction));
 }
 
 // Stubbed from R/S
@@ -1427,8 +1422,8 @@ static bool8 DoBoulderDust(struct Task *task, struct ObjectEvent *playerObject,
     {
         ObjectEventClearHeldMovementIfFinished(playerObject);
         ObjectEventClearHeldMovementIfFinished(strengthObject);
-        QL_TryRecordPlayerStepWithDuration0(playerObject, GetWalkInPlaceNormalMovementAction((u8)task->data[2]));
-        QL_TryRecordNPCStepWithDuration32(strengthObject, GetWalkSlowerMovementAction((u8)task->data[2]));
+        ObjectEventSetHeldMovement(playerObject, GetWalkInPlaceNormalMovementAction((u8)task->data[2]));
+        ObjectEventSetHeldMovement(strengthObject, GetWalkSlowerMovementAction((u8)task->data[2]));
         gFieldEffectArguments[0] = strengthObject->currentCoords.x;
         gFieldEffectArguments[1] = strengthObject->currentCoords.y;
         gFieldEffectArguments[2] = strengthObject->previousElevation;
@@ -1478,7 +1473,7 @@ static bool8 PlayerAvatar_DoSecretBaseMatJump(struct Task *task, struct ObjectEv
     if (ObjectEventClearHeldMovementIfFinished(objectEvent))
     {
         PlaySE(SE_LEDGE);
-        QL_TryRecordPlayerStepWithDuration0(objectEvent, GetJumpInPlaceMovementAction(objectEvent->facingDirection));
+        ObjectEventSetHeldMovement(objectEvent, GetJumpInPlaceMovementAction(objectEvent->facingDirection));
         task->data[1]++;
         if (task->data[1] > 1)
         {
@@ -1523,12 +1518,11 @@ static bool8 PlayerAvatar_SecretBaseMatSpinStep0(struct Task *task, struct Objec
 static bool8 PlayerAvatar_SecretBaseMatSpinStep1(struct Task *task, struct ObjectEvent *objectEvent)
 {
     u8 directions[] = {DIR_WEST, DIR_EAST, DIR_NORTH, DIR_SOUTH};
-
+    
     if (ObjectEventClearHeldMovementIfFinished(objectEvent))
     {
         u8 direction;
-
-        QL_TryRecordPlayerStepWithDuration0(objectEvent, GetFaceDirectionMovementAction(direction = directions[objectEvent->movementDirection - 1]));
+        ObjectEventSetHeldMovement(objectEvent, GetFaceDirectionMovementAction(direction = directions[objectEvent->movementDirection - 1]));
         if (direction == (u8)task->data[1])
             task->data[2]++;
         task->data[0]++;
@@ -1550,7 +1544,7 @@ static bool8 PlayerAvatar_SecretBaseMatSpinStep2(struct Task *task, struct Objec
 
     if (ObjectEventClearHeldMovementIfFinished(objectEvent))
     {
-        QL_TryRecordPlayerStepWithDuration0(objectEvent, actions[task->data[2]]);
+        ObjectEventSetHeldMovement(objectEvent, actions[task->data[2]]);
         task->data[0] = 1;
     }
     return FALSE;
@@ -1560,7 +1554,7 @@ static bool8 PlayerAvatar_SecretBaseMatSpinStep3(struct Task *task, struct Objec
 {
     if (ObjectEventClearHeldMovementIfFinished(objectEvent))
     {
-        QL_TryRecordPlayerStepWithDuration0(objectEvent, GetWalkSlowerMovementAction(GetOppositeDirection(task->data[1])));
+        ObjectEventSetHeldMovement(objectEvent, GetWalkSlowerMovementAction(GetOppositeDirection(task->data[1])));
         UnlockPlayerFieldControls();
         gPlayerAvatar.preventStep = FALSE;
         DestroyTask(FindTaskIdByFunc(PlayerAvatar_DoSecretBaseMatSpin));
@@ -1600,10 +1594,6 @@ void CreateStopSurfingTask_NoMusicChange(u8 direction)
 
 void SeafoamIslandsB4F_CurrentDumpsPlayerOnLand(void)
 {
-    if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_RUNNING || gQuestLogPlaybackState == QL_PLAYBACK_STATE_ACTION_END)
-        return;
-
-    QuestLogRecordPlayerAvatarGfxTransitionWithDuration(sQuestLogSurfDismountActionIds[DIR_NORTH], 16);
     CreateStopSurfingTask(DIR_NORTH);
 }
 
@@ -1617,7 +1607,7 @@ static void Task_StopSurfingInit(u8 taskId)
             return;
     }
     SetSurfBlob_BobState(playerObjEvent->fieldEffectSpriteId, BOB_MON_ONLY);
-    QL_TryRecordPlayerStepWithDuration0(playerObjEvent, GetJumpSpecialWithEffectMovementAction((u8)gTasks[taskId].data[0]));
+    ObjectEventSetHeldMovement(playerObjEvent, GetJumpSpecialWithEffectMovementAction((u8)gTasks[taskId].data[0]));
     gTasks[taskId].func = Task_WaitStopSurfing;
 }
 
@@ -1628,17 +1618,14 @@ static void Task_WaitStopSurfing(u8 taskId)
     if (ObjectEventClearHeldMovementIfFinished(playerObjEvent))
     {
         ObjectEventSetGraphicsId(playerObjEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_NORMAL));
-        QL_TryRecordPlayerStepWithDuration0(playerObjEvent, GetFaceDirectionMovementAction(playerObjEvent->facingDirection));
+        ObjectEventSetHeldMovement(playerObjEvent, GetFaceDirectionMovementAction(playerObjEvent->facingDirection));
         gPlayerAvatar.preventStep = FALSE;
         UnlockPlayerFieldControls();
         UnfreezeObjectEvents();
         DestroySprite(&gSprites[playerObjEvent->fieldEffectSpriteId]);
-#ifdef BUGFIX
         // If this is not defined but the player steps into grass from surfing, they will appear over the grass instead of in the grass.
         playerObjEvent->triggerGroundEffectsOnMove = TRUE;
-#endif
         DestroyTask(taskId);
-        SetHelpContextForMap();
     }
 }
 
@@ -1705,8 +1692,6 @@ void StartFishing(u8 rod)
 
     gTasks[taskId].tFishingRod = rod;
     Task_Fishing(taskId);
-    if (QuestLogTryRecordPlayerAvatarGfxTransition(QL_PLAYER_GFX_FISH) == TRUE)
-        QL_AfterRecordFishActionSuccessful();
 }
 
 
@@ -1744,7 +1729,7 @@ static bool32 Fishing_GetRodOut(struct Task *task)
     playerObjEvent = &gObjectEvents[gPlayerAvatar.objectEventId];
     ObjectEventClearHeldMovementIfActive(playerObjEvent);
     playerObjEvent->enableAnim = TRUE;
-    StartPlayerAvatarFishAnim(playerObjEvent->facingDirection);
+    SetPlayerAvatarFishing(playerObjEvent->facingDirection);
     task->tStep = FISHING_WAIT_BEFORE_DOTS;
     return FALSE;
 }
diff --git a/src/field_specials.c b/src/field_specials.c
index 619259be1..1f3e09142 100644
--- a/src/field_specials.c
+++ b/src/field_specials.c
@@ -1,6 +1,6 @@
 #include "global.h"
 #include "gflib.h"
-#include "quest_log.h"
+
 #include "list_menu.h"
 #include "load_save.h"
 #include "debug.h"
@@ -26,7 +26,7 @@
 #include "menu_indicators.h"
 #include "random.h"
 #include "mail_data.h"
-#include "help_system.h"
+#include "field_control_avatar.h"
 #include "pokemon_storage_system.h"
 #include "script_menu.h"
 #include "data.h"
@@ -96,7 +96,6 @@ static u8 *const sStringVarPtrs[] = {
 
 void ShowDiploma(void)
 {
-    QuestLog_CutRecording();
     SetMainCallback2(CB2_ShowDiploma);
     LockPlayerFieldControls();
 }
@@ -205,7 +204,6 @@ u8 GetLeadMonFriendship(void)
 
 void ShowTownMap(void)
 {
-    QuestLog_CutRecording();
     InitRegionMapWithExitCB(REGIONMAP_TYPE_WALL, CB2_ReturnToFieldContinueScriptPlayMapMusic);
 }
 
@@ -1145,9 +1143,6 @@ void DrawElevatorCurrentFloorWindow(void)
     const u8 *floorname;
     u32 strwidth;
 
-    if (QL_AvoidDisplay(QL_DestroyAbortedDisplay) == TRUE)
-        return;
-
     sElevatorCurrentFloorWindowId = AddWindow(&sElevatorCurrentFloorWindowTemplate);
     LoadStdWindowGfx(sElevatorCurrentFloorWindowId, 0x21D, BG_PLTT_ID(13));
     DrawStdFrameWithCustomTileAndPalette(sElevatorCurrentFloorWindowId, FALSE, 0x21D, 13);
@@ -1215,8 +1210,6 @@ void ListMenu(void)
     u8 taskId;
     struct Task *task;
 
-    if (QL_AvoidDisplay(QL_DestroyAbortedDisplay) == TRUE)
-        return;
         
     taskId = CreateTask(Task_CreateScriptListMenu, 8);
     task = &gTasks[taskId];
@@ -1561,7 +1554,6 @@ static void Task_ListMenuRemoveScrollIndicatorArrowPair(u8 taskId)
 
 void ForcePlayerToStartSurfing(void)
 {
-    SetHelpContext(HELPCONTEXT_SURFING);
     SetPlayerAvatarTransitionFlags(PLAYER_AVATAR_FLAG_SURFING);
 }
 
@@ -1884,155 +1876,7 @@ u8 GetMartClerkObjectId(void)
     return 1;
 }
 
-void SetUsedPkmnCenterQuestLogEvent(void)
-{
-    SetQuestLogEvent(QL_EVENT_USED_PKMN_CENTER, NULL);
-}
-
-static const struct {
-    u16 inside_grp;
-    u16 inside_num;
-    u16 outside_grp;
-    u16 outside_num;
-} sInsideOutsidePairs[] = {
-    [QL_LOCATION_HOME]               = {MAP(PALLET_TOWN_PLAYERS_HOUSE_1F),          MAP(PALLET_TOWN)},
-    [QL_LOCATION_OAKS_LAB]           = {MAP(PALLET_TOWN_PROFESSOR_OAKS_LAB),        MAP(PALLET_TOWN)},
-    [QL_LOCATION_VIRIDIAN_GYM]       = {MAP(VIRIDIAN_CITY_GYM),                     MAP(VIRIDIAN_CITY)},
-    [QL_LOCATION_LEAGUE_GATE_1]      = {MAP(ROUTE22_NORTH_ENTRANCE),                MAP(ROUTE22)},
-    [QL_LOCATION_LEAGUE_GATE_2]      = {MAP(ROUTE22_NORTH_ENTRANCE),                MAP(ROUTE23)},
-    [QL_LOCATION_VIRIDIAN_FOREST_1]  = {MAP(VIRIDIAN_FOREST),                       MAP(ROUTE2_VIRIDIAN_FOREST_SOUTH_ENTRANCE)},
-    [QL_LOCATION_VIRIDIAN_FOREST_2]  = {MAP(VIRIDIAN_FOREST),                       MAP(ROUTE2_VIRIDIAN_FOREST_NORTH_ENTRANCE)},
-    [QL_LOCATION_PEWTER_MUSEUM]      = {MAP(PEWTER_CITY_MUSEUM_1F),                 MAP(PEWTER_CITY)},
-    [QL_LOCATION_PEWTER_GYM]         = {MAP(PEWTER_CITY_GYM),                       MAP(PEWTER_CITY)},
-    [QL_LOCATION_MT_MOON_1]          = {MAP(MT_MOON_1F),                            MAP(ROUTE4)},
-    [QL_LOCATION_MT_MOON_2]          = {MAP(MT_MOON_B1F),                           MAP(ROUTE4)},
-    [QL_LOCATION_CERULEAN_GYM]       = {MAP(CERULEAN_CITY_GYM),                     MAP(CERULEAN_CITY)},
-    [QL_LOCATION_BIKE_SHOP]          = {MAP(CERULEAN_CITY_BIKE_SHOP),               MAP(CERULEAN_CITY)},
-    [QL_LOCATION_BILLS_HOUSE]        = {MAP(ROUTE25_SEA_COTTAGE),                   MAP(ROUTE25)},
-    [QL_LOCATION_DAY_CARE]           = {MAP(ROUTE5_POKEMON_DAY_CARE),               MAP(ROUTE5)},
-    [QL_LOCATION_UNDERGROUND_PATH_1] = {MAP(UNDERGROUND_PATH_NORTH_ENTRANCE),       MAP(ROUTE5)},
-    [QL_LOCATION_UNDERGROUND_PATH_2] = {MAP(UNDERGROUND_PATH_SOUTH_ENTRANCE),       MAP(ROUTE6)},
-    [QL_LOCATION_PKMN_FAN_CLUB]      = {MAP(VERMILION_CITY_POKEMON_FAN_CLUB),       MAP(VERMILION_CITY)},
-    [QL_LOCATION_VERMILION_GYM]      = {MAP(VERMILION_CITY_GYM),                    MAP(VERMILION_CITY)},
-    [QL_LOCATION_SS_ANNE]            = {MAP(SSANNE_1F_CORRIDOR),                    MAP(VERMILION_CITY)},
-    [QL_LOCATION_DIGLETTS_CAVE_1]    = {MAP(DIGLETTS_CAVE_NORTH_ENTRANCE),          MAP(ROUTE2)},
-    [QL_LOCATION_DIGLETTS_CAVE_2]    = {MAP(DIGLETTS_CAVE_SOUTH_ENTRANCE),          MAP(ROUTE11)},
-    [QL_LOCATION_ROCK_TUNNEL_1]      = {MAP(ROCK_TUNNEL_1F),                        MAP(ROUTE10)},
-    [QL_LOCATION_ROCK_TUNNEL_2]      = {MAP(ROCK_TUNNEL_1F),                        MAP(ROUTE10)},
-    [QL_LOCATION_POWER_PLANT]        = {MAP(POWER_PLANT),                           MAP(ROUTE10)},
-    [QL_LOCATION_PKMN_TOWER]         = {MAP(POKEMON_TOWER_1F),                      MAP(LAVENDER_TOWN)},
-    [QL_LOCATION_VOLUNTEER_HOUSE]    = {MAP(LAVENDER_TOWN_VOLUNTEER_POKEMON_HOUSE), MAP(LAVENDER_TOWN)},
-    [QL_LOCATION_NAME_RATERS_HOUSE]  = {MAP(LAVENDER_TOWN_HOUSE2),                  MAP(LAVENDER_TOWN)},
-    [QL_LOCATION_UNDERGROUND_PATH_3] = {MAP(UNDERGROUND_PATH_EAST_ENTRANCE),        MAP(ROUTE8)},
-    [QL_LOCATION_UNDERGROUND_PATH_4] = {MAP(UNDERGROUND_PATH_WEST_ENTRANCE),        MAP(ROUTE7)},
-    [QL_LOCATION_CELADON_DEPT_STORE] = {MAP(CELADON_CITY_DEPARTMENT_STORE_1F),      MAP(CELADON_CITY)},
-    [QL_LOCATION_CELADON_MANSION]    = {MAP(CELADON_CITY_CONDOMINIUMS_1F),          MAP(CELADON_CITY)},
-    [QL_LOCATION_GAME_CORNER]        = {MAP(CELADON_CITY_GAME_CORNER),              MAP(CELADON_CITY)},
-    [QL_LOCATION_CELADON_GYM]        = {MAP(CELADON_CITY_GYM),                      MAP(CELADON_CITY)},
-    [QL_LOCATION_CELADON_RESTAURANT] = {MAP(CELADON_CITY_RESTAURANT),               MAP(CELADON_CITY)},
-    [QL_LOCATION_ROCKET_HIDEOUT]     = {MAP(ROCKET_HIDEOUT_B1F),                    MAP(CELADON_CITY_GAME_CORNER)},
-    [QL_LOCATION_SAFARI_ZONE]        = {MAP(SAFARI_ZONE_CENTER),                    MAP(FUCHSIA_CITY_SAFARI_ZONE_ENTRANCE)},
-    [QL_LOCATION_FUCHSIA_GYM]        = {MAP(FUCHSIA_CITY_GYM),                      MAP(FUCHSIA_CITY)},
-    [QL_LOCATION_WARDENS_HOME]       = {MAP(FUCHSIA_CITY_WARDENS_HOUSE),            MAP(FUCHSIA_CITY)},
-    [QL_LOCATION_FIGHTING_DOJO]      = {MAP(SAFFRON_CITY_DOJO),                     MAP(SAFFRON_CITY)},
-    [QL_LOCATION_SAFFRON_GYM]        = {MAP(SAFFRON_CITY_GYM),                      MAP(SAFFRON_CITY)},
-    [QL_LOCATION_SILPH_CO]           = {MAP(SILPH_CO_1F),                           MAP(SAFFRON_CITY)},
-    [QL_LOCATION_SEAFOAM_ISLANDS_1]  = {MAP(SEAFOAM_ISLANDS_1F),                    MAP(ROUTE20)},
-    [QL_LOCATION_SEAFOAM_ISLANDS_2]  = {MAP(SEAFOAM_ISLANDS_1F),                    MAP(ROUTE20)},
-    [QL_LOCATION_PKMN_MANSION]       = {MAP(POKEMON_MANSION_1F),                    MAP(CINNABAR_ISLAND)},
-    [QL_LOCATION_CINNABAR_GYM]       = {MAP(CINNABAR_ISLAND_GYM),                   MAP(CINNABAR_ISLAND)},
-    [QL_LOCATION_CINNABAR_LAB]       = {MAP(CINNABAR_ISLAND_POKEMON_LAB_ENTRANCE),  MAP(CINNABAR_ISLAND)},
-    [QL_LOCATION_VICTORY_ROAD_1]     = {MAP(VICTORY_ROAD_1F),                       MAP(ROUTE23)},
-    [QL_LOCATION_VICTORY_ROAD_2]     = {MAP(VICTORY_ROAD_2F),                       MAP(ROUTE23)},
-    [QL_LOCATION_PKMN_LEAGUE]        = {MAP(INDIGO_PLATEAU_POKEMON_CENTER_1F),      MAP(INDIGO_PLATEAU_EXTERIOR)},
-    [QL_LOCATION_CERULEAN_CAVE]      = {MAP(CERULEAN_CAVE_1F),                      MAP(CERULEAN_CITY)}
-};
-
-void QuestLog_CheckDepartingIndoorsMap(void)
-{
-    u8 i;
-    for (i = 0; i < NELEMS(sInsideOutsidePairs); i++)
-    {
-        if (gSaveBlock1Ptr->location.mapGroup == sInsideOutsidePairs[i].inside_grp && gSaveBlock1Ptr->location.mapNum == sInsideOutsidePairs[i].inside_num)
-        {
-            if (VarGet(VAR_QL_ENTRANCE) != QL_LOCATION_ROCKET_HIDEOUT || i != QL_LOCATION_GAME_CORNER)
-            {
-                VarSet(VAR_QL_ENTRANCE, i);
-                FlagSet(FLAG_SYS_QL_DEPARTED);
-            }
-            break;
-        }
-    }
-}
 
-void QuestLog_TryRecordDepartedLocation(void)
-{
-    s16 x, y;
-    struct QuestLogEvent_Departed data;
-    u16 locationId = VarGet(VAR_QL_ENTRANCE);
-    data.mapSec = 0;
-    data.locationId = 0;
-    if (FlagGet(FLAG_SYS_QL_DEPARTED))
-    {
-        if (locationId == QL_LOCATION_VIRIDIAN_FOREST_1)
-        {
-            if (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(ROUTE2_VIRIDIAN_FOREST_SOUTH_ENTRANCE)
-              && (gSaveBlock1Ptr->location.mapNum == MAP_NUM(ROUTE2_VIRIDIAN_FOREST_SOUTH_ENTRANCE)
-               || gSaveBlock1Ptr->location.mapNum == MAP_NUM(ROUTE2_VIRIDIAN_FOREST_NORTH_ENTRANCE)))
-            {
-                data.mapSec = MAPSEC_ROUTE_2;
-                if (gSaveBlock1Ptr->location.mapNum == MAP_NUM(ROUTE2_VIRIDIAN_FOREST_SOUTH_ENTRANCE))
-                    data.locationId = locationId;
-                else
-                    data.locationId = locationId + 1;
-                SetQuestLogEvent(QL_EVENT_DEPARTED, (const u16 *)&data);
-                FlagClear(FLAG_SYS_QL_DEPARTED);
-                return;
-            }
-        }
-        else if (locationId == QL_LOCATION_LEAGUE_GATE_1)
-        {
-            if (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(ROUTE22) &&
-                (gSaveBlock1Ptr->location.mapNum == MAP_NUM(ROUTE22)
-              || gSaveBlock1Ptr->location.mapNum == MAP_NUM(ROUTE23)))
-            {
-                data.mapSec = Overworld_GetMapHeaderByGroupAndId(sInsideOutsidePairs[locationId].inside_grp, sInsideOutsidePairs[locationId].inside_num)->regionMapSectionId;
-                if (gSaveBlock1Ptr->location.mapNum == MAP_NUM(ROUTE22))
-                    data.locationId = locationId;
-                else
-                    data.locationId = locationId + 1;
-                SetQuestLogEvent(QL_EVENT_DEPARTED, (const u16 *)&data);
-                FlagClear(FLAG_SYS_QL_DEPARTED);
-                return;
-            }
-        }
-        if (gSaveBlock1Ptr->location.mapGroup == sInsideOutsidePairs[locationId].outside_grp
-           && gSaveBlock1Ptr->location.mapNum == sInsideOutsidePairs[locationId].outside_num)
-        {
-            data.mapSec = Overworld_GetMapHeaderByGroupAndId(sInsideOutsidePairs[locationId].inside_grp, sInsideOutsidePairs[locationId].inside_num)->regionMapSectionId;
-            data.locationId = locationId;
-            if (locationId == QL_LOCATION_ROCK_TUNNEL_1)
-            {
-                PlayerGetDestCoords(&x, &y);
-                if (x != 15 || y != 26)
-                    data.locationId++;
-            }
-            else if (locationId == QL_LOCATION_SEAFOAM_ISLANDS_1)
-            {
-                PlayerGetDestCoords(&x, &y);
-                if (x != 67 || y != 15)
-                    data.locationId++;
-            }
-            SetQuestLogEvent(QL_EVENT_DEPARTED, (const u16 *)&data);
-            FlagClear(FLAG_SYS_QL_DEPARTED);
-            if (locationId == QL_LOCATION_ROCKET_HIDEOUT)
-            {
-                VarSet(VAR_QL_ENTRANCE, QL_LOCATION_GAME_CORNER);
-                FlagSet(FLAG_SYS_QL_DEPARTED);
-            }
-        }
-    }
-}
 
 u16 GetMysteryGiftCardStat(void)
 {
@@ -2235,7 +2079,6 @@ void DoPokemonLeagueLightingEffect(void)
             LoadPalette(sEliteFourLightingPalettes[0], BG_PLTT_ID(7), PLTT_SIZE_4BPP);
         }
         data[1] = 0;
-        ApplyGlobalTintToPaletteSlot(7, 1);
     }
 }
 
@@ -2245,7 +2088,6 @@ static void Task_RunPokemonLeagueLightingEffect(u8 taskId)
     if (!gPaletteFade.active
      && FlagGet(FLAG_TEMP_2) != FALSE
      && FlagGet(FLAG_TEMP_5) != TRUE
-     && gGlobalFieldTintMode != QL_TINT_BACKUP_GRAYSCALE
      && --data[0] == 0
     )
     {
@@ -2262,7 +2104,6 @@ static void Task_RunPokemonLeagueLightingEffect(u8 taskId)
             data[0] = sEliteFourLightingTimers[data[1]];
             LoadPalette(sEliteFourLightingPalettes[data[1]], BG_PLTT_ID(7), PLTT_SIZE_4BPP);
         }
-        ApplyGlobalTintToPaletteSlot(7, 1);
     }
 }
 
@@ -2274,7 +2115,6 @@ static void Task_CancelPokemonLeagueLightingEffect(u8 taskId)
             LoadPalette(sChampionRoomLightingPalettes[8], BG_PLTT_ID(7), PLTT_SIZE_4BPP);
         else
             LoadPalette(sEliteFourLightingPalettes[11], BG_PLTT_ID(7), PLTT_SIZE_4BPP);
-        ApplyGlobalTintToPaletteSlot(7, 1);
         if (gPaletteFade.active)
         {
             BlendPalettes(0x00000080, 16, RGB_BLACK);
@@ -2478,7 +2318,7 @@ static void MoveDeoxysObject(u8 num)
     u8 mapObjId;
     LoadPalette(sDeoxysObjectPals[num], OBJ_PLTT_ID(10), PLTT_SIZEOF(4));
     UpdateSpritePaletteWithWeather(10, FALSE);
-    ApplyGlobalFieldPaletteTint(10);
+    
     TryGetObjectEventIdByLocalIdAndMap(1, gSaveBlock1Ptr->location.mapNum, gSaveBlock1Ptr->location.mapGroup, &mapObjId);
     if (num == 0)
         PlaySE(SE_M_CONFUSE_RAY);
@@ -2524,7 +2364,6 @@ void SetDeoxysTrianglePalette(void)
 {
     u8 num = VarGet(VAR_DEOXYS_INTERACTION_NUM);
     LoadPalette(sDeoxysObjectPals[num], OBJ_PLTT_ID(10), PLTT_SIZEOF(4));
-    ApplyGlobalFieldPaletteTint(10);
 }
 
 bool8 IsBadEggInParty(void)
@@ -2552,15 +2391,14 @@ void BrailleCursorToggle(void)
     // 8004 = x - 27
     // 8005 = y
     // 8006 = action (0 = create, 1 = delete)
+
     u16 x;
-    if (gQuestLogState != QL_STATE_PLAYBACK)
-    {
-        x = gSpecialVar_0x8004 + 27;
-        if (gSpecialVar_0x8006 == 0)
-            sBrailleTextCursorSpriteID = CreateTextCursorSprite(0, x, gSpecialVar_0x8005, 0, 0);
-        else
-            DestroyTextCursorSprite(sBrailleTextCursorSpriteID);
-    }
+    x = gSpecialVar_0x8004 + 27;
+    if (gSpecialVar_0x8006 == 0)
+        sBrailleTextCursorSpriteID = CreateTextCursorSprite(0, x, gSpecialVar_0x8005, 0, 0);
+    else
+        DestroyTextCursorSprite(sBrailleTextCursorSpriteID);
+
 }
 
 bool8 PlayerPartyContainsSpeciesWithPlayerID(void)
diff --git a/src/field_tasks.c b/src/field_tasks.c
index 41e0da7fa..c8f426444 100644
--- a/src/field_tasks.c
+++ b/src/field_tasks.c
@@ -9,7 +9,7 @@
 #include "fieldmap.h"
 #include "metatile_behavior.h"
 #include "overworld.h"
-#include "quest_log.h"
+
 #include "script.h"
 #include "task.h"
 #include "constants/field_tasks.h"
@@ -100,7 +100,7 @@ static void Task_RunTimeBasedEvents(u8 taskId)
 {
     s16 *data = gTasks[taskId].data;
 
-    if (!ArePlayerFieldControlsLocked() && !QL_IS_PLAYBACK_STATE)
+    if (!ArePlayerFieldControlsLocked())
     {
         RunTimeBasedEvents(data);
         UpdateAmbientCry(&tAmbientCryState, (u16*) &tAmbientCryDelay);
diff --git a/src/field_weather.c b/src/field_weather.c
index f815b6fb5..0a30ab2da 100644
--- a/src/field_weather.c
+++ b/src/field_weather.c
@@ -13,8 +13,7 @@
 #include "constants/weather.h"
 #include "constants/songs.h"
 
-#include "quest_log.h"
-#include "constants/quest_log.h"
+
 
 #define DROUGHT_COLOR_INDEX(color) ((((color) >> 1) & 0xF) | (((color) >> 2) & 0xF0) | (((color) >> 3) & 0xF00))
 
@@ -781,11 +780,6 @@ void FadeSelectedPals(u8 mode, s8 delay, u32 selectedPalettes)
         {
             gWeatherPtr->fadeScreenCounter = 0; // Triggers gamma-shift-based fade-in
         }
-        else if (!QL_IS_PLAYBACK_STATE && MapHasNaturalLight(gMapHeader.mapType))
-        {
-            UpdateAltBgPalettes(selectedPalettes & PALETTES_BG);
-            BeginTimeOfDayPaletteFade(selectedPalettes, delay, 16, 0, &gTimeBlend.startBlend, &gTimeBlend.endBlend, gTimeBlend.weight, fadeColor);
-        }
         else
         {
             BeginNormalPaletteFade(selectedPalettes, delay, 16, 0, fadeColor);
diff --git a/src/fieldmap.c b/src/fieldmap.c
index 02bbc1ced..d4d830529 100644
--- a/src/fieldmap.c
+++ b/src/fieldmap.c
@@ -3,7 +3,7 @@
 #include "fieldmap.h"
 #include "menu.h"
 #include "overworld.h"
-#include "quest_log.h"
+
 #include "rtc.h"
 #include "script.h"
 
@@ -20,8 +20,6 @@ EWRAM_DATA u16 ALIGNED(4) sBackupMapData[VIRTUAL_MAP_SIZE] = {0};
 EWRAM_DATA struct MapHeader gMapHeader = {0};
 EWRAM_DATA struct Camera gCamera = {0};
 static EWRAM_DATA struct ConnectionFlags gMapConnectionFlags = {0};
-EWRAM_DATA u8 gGlobalFieldTintMode = QL_TINT_NONE;
-
 static const struct ConnectionFlags sDummyConnectionFlags = {};
 
 static void InitMapLayoutData(struct MapHeader *);
@@ -844,45 +842,13 @@ static void CopyTilesetToVramUsingHeap(struct Tileset const *tileset, u16 numTil
 
 static void ApplyGlobalTintToPaletteEntries(u16 offset, u16 size)
 {
-    switch (gGlobalFieldTintMode)
-    {
-    case QL_TINT_NONE:
-        return;
-    case QL_TINT_GRAYSCALE:
-        TintPalette_GrayScale(&gPlttBufferUnfaded[offset], size);
-        break;
-    case QL_TINT_SEPIA:
-        TintPalette_SepiaTone(&gPlttBufferUnfaded[offset], size);
-        break;
-    case QL_TINT_BACKUP_GRAYSCALE:
-        QuestLog_BackUpPalette(offset, size);
-        TintPalette_GrayScale(&gPlttBufferUnfaded[offset], size);
-        break;
-    default:
-        return;
-    }
+    return;
     CpuCopy16(&gPlttBufferUnfaded[offset], &gPlttBufferFaded[offset], PLTT_SIZEOF(size));
 }
 
 void ApplyGlobalTintToPaletteSlot(u8 slot, u8 count)
 {
-    switch (gGlobalFieldTintMode)
-    {
-    case QL_TINT_NONE:
-        return;
-    case QL_TINT_GRAYSCALE:
-        TintPalette_GrayScale(&gPlttBufferUnfaded[BG_PLTT_ID(slot)], count * 16);
-        break;
-    case QL_TINT_SEPIA:
-        TintPalette_SepiaTone(&gPlttBufferUnfaded[BG_PLTT_ID(slot)], count * 16);
-        break;
-    case QL_TINT_BACKUP_GRAYSCALE:
-        QuestLog_BackUpPalette(BG_PLTT_ID(slot), count * 16);
-        TintPalette_GrayScale(&gPlttBufferUnfaded[BG_PLTT_ID(slot)], count * 16);
-        break;
-    default:
-        return;
-    }
+    return;
     CpuFastCopy(&gPlttBufferUnfaded[BG_PLTT_ID(slot)], &gPlttBufferFaded[BG_PLTT_ID(slot)], count * PLTT_SIZE_4BPP);
 }
 
@@ -913,7 +879,6 @@ static void LoadTilesetPalette(struct Tileset const *tileset, u16 destOffset, u1
                 CpuCopy16(tileset->palettes[NUM_PALS_IN_PRIMARY], &gPlttBufferUnfaded[destOffset], size);
             else
                 LoadPaletteFast(tileset->palettes[NUM_PALS_IN_PRIMARY], destOffset, size);
-            ApplyGlobalTintToPaletteEntries(destOffset, size >> 1);
             low = NUM_PALS_IN_PRIMARY;
             high = NUM_PALS_TOTAL;
         }
diff --git a/src/fldeff_flash.c b/src/fldeff_flash.c
index 6c38552a3..8d2418d89 100644
--- a/src/fldeff_flash.c
+++ b/src/fldeff_flash.c
@@ -240,11 +240,6 @@ static bool8 TryDoMapTransition(void)
     u8 fromType = GetLastUsedWarpMapType();
     u8 toType = GetCurrentMapType();
     u8 i = 0;
-    if (GetLastUsedWarpMapSectionId() != gMapHeader.regionMapSectionId && MapHasPreviewScreen_HandleQLState2(gMapHeader.regionMapSectionId, MPS_TYPE_CAVE) == TRUE)
-    {
-        RunMapPreviewScreen(gMapHeader.regionMapSectionId);
-        return TRUE;
-    }
     for (; sTransitionTypes[i].fromType != 0; i++)
     {
         if (sTransitionTypes[i].fromType == fromType && sTransitionTypes[i].toType == toType)
diff --git a/src/hall_of_fame.c b/src/hall_of_fame.c
index a8b5f83ec..d52ac8815 100644
--- a/src/hall_of_fame.c
+++ b/src/hall_of_fame.c
@@ -6,9 +6,9 @@
 #include "save.h"
 #include "data.h"
 #include "m4a.h"
-#include "help_system.h"
+
 #include "hall_of_fame.h"
-#include "quest_log.h"
+
 #include "pc_screen_effect.h"
 #include "strings.h"
 #include "credits.h"
@@ -320,7 +320,6 @@ static bool8 InitHallOfFameScreen(void)
     switch (gMain.state)
     {
     case 0:
-        gHelpSystemEnabled = FALSE;
         SetVBlankCallback(NULL);
         ClearVramOamPltt_LoadHofPal();
         sHofGfxPtr = AllocZeroed(sizeof(struct HofGfx));
@@ -427,7 +426,6 @@ static void Task_Hof_InitTeamSaveData(u8 taskId)
     u16 i;
     struct HallofFameTeam* lastSavedTeam = (struct HallofFameTeam *)(gDecompressionBuffer);
 
-    SaveQuestLogData();
     if (!gHasHallOfFameRecords)
     {
         memset(gDecompressionBuffer, 0, SECTOR_SIZE * NUM_HOF_SECTORS);
diff --git a/src/help_message.c b/src/help_message.c
index 7cd44dbb2..2fb694b88 100644
--- a/src/help_message.c
+++ b/src/help_message.c
@@ -17,35 +17,6 @@ static const struct WindowTemplate sHelpMessageWindowTemplate = {
     .baseBlock = 0x08F
 };
 
-void MapNamePopupWindowIdSetDummy(void)
-{
-    sHelpMessageWindowId = WINDOW_NONE;
-}
-
-u8 CreateHelpMessageWindow(void)
-{
-    if (sHelpMessageWindowId == WINDOW_NONE)
-    {
-        sHelpMessageWindowId = AddWindow(&sHelpMessageWindowTemplate);
-        PutWindowTilemap(sHelpMessageWindowId);
-    }
-    return sHelpMessageWindowId;
-}
-
-void DestroyHelpMessageWindow(u8 a0)
-{
-    if (sHelpMessageWindowId != WINDOW_NONE)
-    {
-        FillWindowPixelBuffer(sHelpMessageWindowId, PIXEL_FILL(0));
-        ClearWindowTilemap(sHelpMessageWindowId);
-
-        if (a0)
-            CopyWindowToVram(sHelpMessageWindowId, a0);
-
-        RemoveWindow(sHelpMessageWindowId);
-        sHelpMessageWindowId = WINDOW_NONE;
-    }
-}
 
 // Creates the bottom bar window that displays help text for e.g. the options in the Start menu
 void DrawHelpMessageWindowTilesById(u8 windowId)
diff --git a/src/help_system.c b/src/help_system.c
deleted file mode 100644
index 5f57730ce..000000000
--- a/src/help_system.c
+++ /dev/null
@@ -1,2480 +0,0 @@
-#include "global.h"
-#include "gflib.h"
-#include "event_data.h"
-#include "event_scripts.h"
-#include "field_player_avatar.h"
-#include "help_system.h"
-#include "item.h"
-#include "link.h"
-#include "overworld.h"
-#include "pokedex.h"
-#include "quest_log.h"
-#include "save.h"
-#include "save_location.h"
-#include "strings.h"
-#include "constants/items.h"
-#include "constants/maps.h"
-#include "constants/songs.h"
-
-#define HELP_NONE  0
-#define HELP_END   0xFF
-
-// Help Main Topics
-enum HelpSystemTopics
-{
-    TOPIC_WHAT_TO_DO,
-    TOPIC_HOW_TO_DO,
-    TOPIC_TERMS,
-    TOPIC_ABOUT_GAME,
-    TOPIC_TYPE_MATCHUP,
-    TOPIC_EXIT,
-    TOPIC_COUNT
-};
-
-static EWRAM_DATA u16 sHelpSystemContextId = 0;
-static EWRAM_DATA u8 sSeenHelpSystemIntro = 0;
-
-struct HelpSystemState
-{
-    // 0: Top level
-    // 1: Submenu
-    // 2: Help content
-    u8 level;
-
-    // enum HelpSystemTopics
-    u8 topic;
-
-    // Where the player's cursor was at top level
-    u8 scrollMain;
-
-    // Where the player's cursor was at submenu
-    u8 scrollSub;
-};
-
-COMMON_DATA struct HelpSystemState gHelpSystemState = {0};
-COMMON_DATA u16 gHelpContextIdBackup = 0;
-
-static bool32 IsCurrentMapInArray(const u16 * mapIdxs);
-static void BuildMainTopicsListAndMoveToH00(struct HelpSystemListMenu * a0, struct ListMenuItem * a1);
-static void SetHelpSystemSubmenuItems(struct HelpSystemListMenu * a0, struct ListMenuItem * a1);
-static bool8 HelpSystem_ShouldShowBasicTerms(void);
-static bool8 IsHelpSystemSubmenuEnabled(u8);
-static bool8 HasGottenAtLeastOneHM(void);
-
-static void PrintWelcomeMessageOnPanel1(void);
-static void PrintTextOnPanel2Row52RightAlign(const u8 *);
-static void ResetHelpSystemCursor(struct HelpSystemListMenu * a0);
-static void PrintHelpSystemTopicMouseoverDescription(struct HelpSystemListMenu * a0, struct ListMenuItem * a1);
-
-static const u8 *const sHelpSystemTopicPtrs[TOPIC_COUNT] = {
-    [TOPIC_WHAT_TO_DO]   = Help_Text_WhatShouldIDo,
-    [TOPIC_HOW_TO_DO]    = Help_Text_HowDoIDoThis,
-    [TOPIC_TERMS]        = Help_Text_WhatDoesThisTermMean,
-    [TOPIC_ABOUT_GAME]   = Help_Text_AboutThisGame,
-    [TOPIC_TYPE_MATCHUP] = Help_Text_TypeMatchupList,
-    [TOPIC_EXIT]         = Help_Text_Exit
-};
-
-static const u8 *const sHelpSystemTopicMouseoverDescriptionPtrs[TOPIC_COUNT] = {
-    [TOPIC_WHAT_TO_DO]   = Help_Text_DescWhatShouldIDo,
-    [TOPIC_HOW_TO_DO]    = Help_Text_DescHowDoIDoThis,
-    [TOPIC_TERMS]        = Help_Text_DescWhatDoesThisTermMean,
-    [TOPIC_ABOUT_GAME]   = Help_Text_DescAboutThisGame,
-    [TOPIC_TYPE_MATCHUP] = Help_Text_DescTypeMatchupList,
-    [TOPIC_EXIT]         = Help_Text_DescExit
-};
-
-// Submenu IDs for TOPIC_WHAT_TO_DO
-enum
-{
-    HELP_PLAYING_FOR_FIRST_TIME = 1,
-    HELP_WHAT_SHOULD_I_BE_DOING,
-    HELP_CANT_GET_OUT_OF_ROOM,
-    HELP_CANT_FIND_PERSON_I_WANT,
-    HELP_TALKED_TO_EVERYONE_NOW_WHAT,
-    HELP_SOMEONE_BLOCKING_MY_WAY,
-    HELP_I_CANT_GO_ON,
-    HELP_OUT_OF_THINGS_TO_DO,
-    HELP_WHAT_HAPPENED_TO_ITEM_I_GOT,
-    HELP_WHAT_ARE_MY_ADVENTURE_BASICS,
-    HELP_HOW_ARE_ROADS_FORESTS_DIFFERENT,
-    HELP_HOW_ARE_CAVES_DIFFERENT,
-    HELP_HOW_DO_I_PROGRESS,
-    HELP_WHEN_CAN_I_USE_ITEM,
-    HELP_WHATS_A_BATTLE,
-    HELP_HOW_DO_I_PREPARE_FOR_BATTLE,
-    HELP_WHAT_IS_A_MONS_VITALITY,
-    HELP_MY_MONS_ARE_HURT,
-    HELP_WHAT_IS_STATUS_PROBLEM,
-    HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT,
-    HELP_CANT_CATCH_MONS,
-    HELP_RAN_OUT_OF_POTIONS,
-    HELP_CAN_I_BUY_POKEBALLS,
-    HELP_WHATS_A_TRAINER,
-    HELP_HOW_DO_I_WIN_AGAINST_TRAINER,
-    HELP_WHERE_DO_MONS_APPEAR,
-    HELP_WHAT_ARE_MOVES,
-    HELP_WHAT_ARE_HIDDEN_MOVES,
-    HELP_WHAT_MOVES_SHOULD_I_USE,
-    HELP_WANT_TO_ADD_MORE_MOVES,
-    HELP_WANT_TO_MAKE_MON_STRONGER,
-    HELP_FOE_MONS_TOO_STRONG,
-    HELP_WHAT_DO_I_DO_IN_CAVE,
-    HELP_NOTHING_I_WANT_TO_KNOW,
-    HELP_WHATS_POKEMON_CENTER,
-    HELP_WHATS_POKEMON_MART,
-    HELP_WANT_TO_END_GAME,
-    HELP_WHATS_A_MON,
-    HELP_WHAT_IS_THAT_PERSON_LIKE,
-    HELP_WHAT_DOES_HIDDEN_MOVE_DO,
-    HELP_WHAT_DO_I_DO_IN_SAFARI,
-    HELP_WHAT_ARE_SAFARI_RULES,
-    HELP_WANT_TO_END_SAFARI,
-    HELP_WHAT_IS_A_GYM,
-};
-
-static const u8 *const sHelpSystemSpecializedQuestionTextPtrs[] = {
-    [HELP_NONE]                              = NULL,
-    [HELP_PLAYING_FOR_FIRST_TIME]            = Help_Text_PlayingForFirstTime,
-    [HELP_WHAT_SHOULD_I_BE_DOING]            = Help_Text_WhatShouldIBeDoing,
-    [HELP_CANT_GET_OUT_OF_ROOM]              = Help_Text_CantGetOutOfRoom,
-    [HELP_CANT_FIND_PERSON_I_WANT]           = Help_Text_CantFindPersonIWant,
-    [HELP_TALKED_TO_EVERYONE_NOW_WHAT]       = Help_Text_TalkedToEveryoneNowWhat,
-    [HELP_SOMEONE_BLOCKING_MY_WAY]           = Help_Text_SomeoneBlockingMyWay,
-    [HELP_I_CANT_GO_ON]                      = Help_Text_ICantGoOn,
-    [HELP_OUT_OF_THINGS_TO_DO]               = Help_Text_OutOfThingsToDo,
-    [HELP_WHAT_HAPPENED_TO_ITEM_I_GOT]       = Help_Text_WhatHappenedToItemIGot,
-    [HELP_WHAT_ARE_MY_ADVENTURE_BASICS]      = Help_Text_WhatAreMyAdventureBasics,
-    [HELP_HOW_ARE_ROADS_FORESTS_DIFFERENT]   = Help_Text_HowAreRoadsForestsDifferent,
-    [HELP_HOW_ARE_CAVES_DIFFERENT]           = Help_Text_HowAreCavesDifferent,
-    [HELP_HOW_DO_I_PROGRESS]                 = Help_Text_HowDoIProgress,
-    [HELP_WHEN_CAN_I_USE_ITEM]               = Help_Text_WhenCanIUseItem,
-    [HELP_WHATS_A_BATTLE]                    = Help_Text_WhatsABattle,
-    [HELP_HOW_DO_I_PREPARE_FOR_BATTLE]       = Help_Text_HowDoIPrepareForBattle,
-    [HELP_WHAT_IS_A_MONS_VITALITY]           = Help_Text_WhatIsAMonsVitality,
-    [HELP_MY_MONS_ARE_HURT]                  = Help_Text_MyMonsAreHurt,
-    [HELP_WHAT_IS_STATUS_PROBLEM]            = Help_Text_WhatIsStatusProblem,
-    [HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT] = Help_Text_WhatHappensIfAllMyMonsFaint,
-    [HELP_CANT_CATCH_MONS]                   = Help_Text_CantCatchMons,
-    [HELP_RAN_OUT_OF_POTIONS]                = Help_Text_RanOutOfPotions,
-    [HELP_CAN_I_BUY_POKEBALLS]               = Help_Text_CanIBuyPokeBalls,
-    [HELP_WHATS_A_TRAINER]                   = Help_Text_WhatsATrainer,
-    [HELP_HOW_DO_I_WIN_AGAINST_TRAINER]      = Help_Text_HowDoIWinAgainstTrainer,
-    [HELP_WHERE_DO_MONS_APPEAR]              = Help_Text_WhereDoMonsAppear,
-    [HELP_WHAT_ARE_MOVES]                    = Help_Text_WhatAreMoves,
-    [HELP_WHAT_ARE_HIDDEN_MOVES]             = Help_Text_WhatAreHiddenMoves,
-    [HELP_WHAT_MOVES_SHOULD_I_USE]           = Help_Text_WhatMovesShouldIUse,
-    [HELP_WANT_TO_ADD_MORE_MOVES]            = Help_Text_WantToAddMoreMoves,
-    [HELP_WANT_TO_MAKE_MON_STRONGER]         = Help_Text_WantToMakeMonStronger,
-    [HELP_FOE_MONS_TOO_STRONG]               = Help_Text_FoeMonsTooStrong,
-    [HELP_WHAT_DO_I_DO_IN_CAVE]              = Help_Text_WhatDoIDoInCave,
-    [HELP_NOTHING_I_WANT_TO_KNOW]            = Help_Text_NothingIWantToKnow,
-    [HELP_WHATS_POKEMON_CENTER]              = Help_Text_WhatsPokemonCenter,
-    [HELP_WHATS_POKEMON_MART]                = Help_Text_WhatsPokemonMart,
-    [HELP_WANT_TO_END_GAME]                  = Help_Text_WantToEndGame,
-    [HELP_WHATS_A_MON]                       = Help_Text_WhatsAMon,
-    [HELP_WHAT_IS_THAT_PERSON_LIKE]          = Help_Text_WhatIsThatPersonLike,
-    [HELP_WHAT_DOES_HIDDEN_MOVE_DO]          = Help_Text_WhatDoesHiddenMoveDo,
-    [HELP_WHAT_DO_I_DO_IN_SAFARI]            = Help_Text_WhatDoIDoInSafari,
-    [HELP_WHAT_ARE_SAFARI_RULES]             = Help_Text_WhatAreSafariRules,
-    [HELP_WANT_TO_END_SAFARI]                = Help_Text_WantToEndSafari,
-    [HELP_WHAT_IS_A_GYM]                     = Help_Text_WhatIsAGym
-};
-
-static const u8 *const sHelpSystemSpecializedAnswerTextPtrs[] = {
-    [HELP_NONE]                              = NULL,
-    [HELP_PLAYING_FOR_FIRST_TIME]            = Help_Text_AnswerPlayingForFirstTime,
-    [HELP_WHAT_SHOULD_I_BE_DOING]            = Help_Text_AnswerWhatShouldIBeDoing,
-    [HELP_CANT_GET_OUT_OF_ROOM]              = Help_Text_AnswerCantGetOutOfRoom,
-    [HELP_CANT_FIND_PERSON_I_WANT]           = Help_Text_AnswerCantFindPersonIWant,
-    [HELP_TALKED_TO_EVERYONE_NOW_WHAT]       = Help_Text_AnswerTalkedToEveryoneNowWhat,
-    [HELP_SOMEONE_BLOCKING_MY_WAY]           = Help_Text_AnswerSomeoneBlockingMyWay,
-    [HELP_I_CANT_GO_ON]                      = Help_Text_AnswerICantGoOn,
-    [HELP_OUT_OF_THINGS_TO_DO]               = Help_Text_AnswerOutOfThingsToDo,
-    [HELP_WHAT_HAPPENED_TO_ITEM_I_GOT]       = Help_Text_AnswerWhatHappenedToItemIGot,
-    [HELP_WHAT_ARE_MY_ADVENTURE_BASICS]      = Help_Text_AnswerWhatAreMyAdventureBasics,
-    [HELP_HOW_ARE_ROADS_FORESTS_DIFFERENT]   = Help_Text_AnswerHowAreRoadsForestsDifferent,
-    [HELP_HOW_ARE_CAVES_DIFFERENT]           = Help_Text_AnswerHowAreCavesDifferent,
-    [HELP_HOW_DO_I_PROGRESS]                 = Help_Text_AnswerHowDoIProgress,
-    [HELP_WHEN_CAN_I_USE_ITEM]               = Help_Text_AnswerWhenCanIUseItem,
-    [HELP_WHATS_A_BATTLE]                    = Help_Text_AnswerWhatsABattle,
-    [HELP_HOW_DO_I_PREPARE_FOR_BATTLE]       = Help_Text_AnswerHowDoIPrepareForBattle,
-    [HELP_WHAT_IS_A_MONS_VITALITY]           = Help_Text_AnswerWhatIsAMonsVitality,
-    [HELP_MY_MONS_ARE_HURT]                  = Help_Text_AnswerMyMonsAreHurt,
-    [HELP_WHAT_IS_STATUS_PROBLEM]            = Help_Text_AnswerWhatIsStatusProblem,
-    [HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT] = Help_Text_AnswerWhatHappensIfAllMyMonsFaint,
-    [HELP_CANT_CATCH_MONS]                   = Help_Text_AnswerCantCatchMons,
-    [HELP_RAN_OUT_OF_POTIONS]                = Help_Text_AnswerRanOutOfPotions,
-    [HELP_CAN_I_BUY_POKEBALLS]               = Help_Text_AnswerCanIBuyPokeBalls,
-    [HELP_WHATS_A_TRAINER]                   = Help_Text_AnswerWhatsATrainer,
-    [HELP_HOW_DO_I_WIN_AGAINST_TRAINER]      = Help_Text_AnswerHowDoIWinAgainstTrainer,
-    [HELP_WHERE_DO_MONS_APPEAR]              = Help_Text_AnswerWhereDoMonsAppear,
-    [HELP_WHAT_ARE_MOVES]                    = Help_Text_AnswerWhatAreMoves,
-    [HELP_WHAT_ARE_HIDDEN_MOVES]             = Help_Text_AnswerWhatAreHiddenMoves,
-    [HELP_WHAT_MOVES_SHOULD_I_USE]           = Help_Text_AnswerWhatMovesShouldIUse,
-    [HELP_WANT_TO_ADD_MORE_MOVES]            = Help_Text_AnswerWantToAddMoreMoves,
-    [HELP_WANT_TO_MAKE_MON_STRONGER]         = Help_Text_AnswerWantToMakeMonStronger,
-    [HELP_FOE_MONS_TOO_STRONG]               = Help_Text_AnswerFoeMonsTooStrong,
-    [HELP_WHAT_DO_I_DO_IN_CAVE]              = Help_Text_AnswerWhatDoIDoInCave,
-    [HELP_NOTHING_I_WANT_TO_KNOW]            = Help_Text_AnswerNothingIWantToKnow,
-    [HELP_WHATS_POKEMON_CENTER]              = Help_Text_AnswerWhatsPokemonCenter,
-    [HELP_WHATS_POKEMON_MART]                = Help_Text_AnswerWhatsPokemonMart,
-    [HELP_WANT_TO_END_GAME]                  = Help_Text_AnswerWantToEndGame,
-    [HELP_WHATS_A_MON]                       = Help_Text_AnswerWhatsAMon,
-    [HELP_WHAT_IS_THAT_PERSON_LIKE]          = Help_Text_AnswerWhatIsThatPersonLike,
-    [HELP_WHAT_DOES_HIDDEN_MOVE_DO]          = Help_Text_AnswerWhatDoesHiddenMoveDo,
-    [HELP_WHAT_DO_I_DO_IN_SAFARI]            = Help_Text_AnswerWhatDoIDoInSafari,
-    [HELP_WHAT_ARE_SAFARI_RULES]             = Help_Text_AnswerWhatAreSafariRules,
-    [HELP_WANT_TO_END_SAFARI]                = Help_Text_AnswerWantToEndSafari,
-    [HELP_WHAT_IS_A_GYM]                     = Help_Text_AnswerWhatIsAGym
-};
-
-// Submenu IDs for TOPIC_HOW_TO_DO
-enum
-{
-    HELP_USING_POKEDEX = 1,
-    HELP_USING_POKEMON,
-    HELP_USING_SUMMARY,
-    HELP_USING_SWITCH,
-    HELP_USING_ITEM,
-    HELP_USING_BAG,
-    HELP_USING_AN_ITEM,
-    HELP_USING_KEYITEM,
-    HELP_USING_POKEBALL,
-    HELP_USING_PLAYER,
-    HELP_USING_SAVE,
-    HELP_USING_OPTION,
-    HELP_USING_POTION,
-    HELP_USING_TOWN_MAP,
-    HELP_USING_TM,
-    HELP_USING_HM,
-    HELP_USING_MOVE_OUTSIDE_OF_BATTLE,
-    HELP_RIDING_BICYCLE,
-    HELP_ENTERING_NAME,
-    HELP_USING_PC,
-    HELP_USING_BILLS_PC,
-    HELP_USING_WITHDRAW,
-    HELP_USING_DEPOSIT,
-    HELP_USING_MOVE,
-    HELP_MOVING_ITEMS,
-    HELP_USING_PLAYERS_PC,
-    HELP_USING_WITHDRAW_ITEM,
-    HELP_USING_DEPOSIT_ITEM,
-    HELP_USING_MAILBOX,
-    HELP_USING_PROF_OAKS_PC,
-    HELP_OPENING_MENU,
-    HELP_USING_FIGHT,
-    HELP_USING_POKEMON2,
-    HELP_USING_SHIFT,
-    HELP_USING_SUMMARY2,
-    HELP_USING_BAG2,
-    HELP_READING_POKEDEX,
-    HELP_USING_HOME_PC,
-    HELP_USING_ITEM_STORAGE,
-    HELP_USING_WITHDRAW_ITEM2,
-    HELP_USING_DEPOSIT_ITEM2,
-    HELP_USING_MAILBOX2,
-    HELP_USING_RUN,
-    HELP_REGISTER_KEY_ITEM,
-    HELP_USING_BALL,
-    HELP_USING_BAIT,
-    HELP_USING_ROCK,
-    HELP_USING_HALL_OF_FAME,
-};
-
-static const u8 *const sHelpSystemMenuTopicTextPtrs[] = {
-    [HELP_NONE]                         = NULL,
-    [HELP_USING_POKEDEX]                = Help_Text_UsingPokedex,
-    [HELP_USING_POKEMON]                = Help_Text_UsingPokemon,
-    [HELP_USING_SUMMARY]                = Help_Text_UsingSummary,
-    [HELP_USING_SWITCH]                 = Help_Text_UsingSwitch,
-    [HELP_USING_ITEM]                   = Help_Text_UsingItem,
-    [HELP_USING_BAG]                    = Help_Text_UsingBag,
-    [HELP_USING_AN_ITEM]                = Help_Text_UsingAnItem,
-    [HELP_USING_KEYITEM]                = Help_Text_UsingKeyItem,
-    [HELP_USING_POKEBALL]               = Help_Text_UsingPokeBall,
-    [HELP_USING_PLAYER]                 = Help_Text_UsingPlayer,
-    [HELP_USING_SAVE]                   = Help_Text_UsingSave,
-    [HELP_USING_OPTION]                 = Help_Text_UsingOption,
-    [HELP_USING_POTION]                 = Help_Text_UsingPotion,
-    [HELP_USING_TOWN_MAP]               = Help_Text_UsingTownMap,
-    [HELP_USING_TM]                     = Help_Text_UsingTM,
-    [HELP_USING_HM]                     = Help_Text_UsingHM,
-    [HELP_USING_MOVE_OUTSIDE_OF_BATTLE] = Help_Text_UsingMoveOutsideOfBattle,
-    [HELP_RIDING_BICYCLE]               = Help_Text_RidingBicycle,
-    [HELP_ENTERING_NAME]                = Help_Text_EnteringName,
-    [HELP_USING_PC]                     = Help_Text_UsingPC,
-    [HELP_USING_BILLS_PC]               = Help_Text_UsingBillsPC,
-    [HELP_USING_WITHDRAW]               = Help_Text_UsingWithdraw,
-    [HELP_USING_DEPOSIT]                = Help_Text_UsingDeposit,
-    [HELP_USING_MOVE]                   = Help_Text_UsingMove,
-    [HELP_MOVING_ITEMS]                 = Help_Text_MovingItems,
-    [HELP_USING_PLAYERS_PC]             = Help_Text_UsingPlayersPC,
-    [HELP_USING_WITHDRAW_ITEM]          = Help_Text_UsingWithdrawItem,
-    [HELP_USING_DEPOSIT_ITEM]           = Help_Text_UsingDepositItem,
-    [HELP_USING_MAILBOX]                = Help_Text_UsingMailbox,
-    [HELP_USING_PROF_OAKS_PC]           = Help_Text_UsingProfOaksPC,
-    [HELP_OPENING_MENU]                 = Help_Text_OpeningMenu,
-    [HELP_USING_FIGHT]                  = Help_Text_UsingFight,
-    [HELP_USING_POKEMON2]               = Help_Text_UsingPokemon2,
-    [HELP_USING_SHIFT]                  = Help_Text_UsingShift,
-    [HELP_USING_SUMMARY2]               = Help_Text_UsingSummary2,
-    [HELP_USING_BAG2]                   = Help_Text_UsingBag2,
-    [HELP_READING_POKEDEX]              = Help_Text_ReadingPokedex,
-    [HELP_USING_HOME_PC]                = Help_Text_UsingHomePC,
-    [HELP_USING_ITEM_STORAGE]           = Help_Text_UsingItemStorage,
-    [HELP_USING_WITHDRAW_ITEM2]         = Help_Text_UsingWithdrawItem2,
-    [HELP_USING_DEPOSIT_ITEM2]          = Help_Text_UsingDepositItem2,
-    [HELP_USING_MAILBOX2]               = Help_Text_UsingMailbox2,
-    [HELP_USING_RUN]                    = Help_Text_UsingRun,
-    [HELP_REGISTER_KEY_ITEM]            = Help_Text_RegisterKeyItem,
-    [HELP_USING_BALL]                   = Help_Text_UsingBall,
-    [HELP_USING_BAIT]                   = Help_Text_UsingBait,
-    [HELP_USING_ROCK]                   = Help_Text_UsingRock,
-    [HELP_USING_HALL_OF_FAME]           = Help_Text_UsingHallOfFame
-};
-
-static const u8 *const sHelpSystemHowToUseMenuTextPtrs[] = {
-    [HELP_NONE]                         = NULL,
-    [HELP_USING_POKEDEX]                = Help_Text_HowToUsePokedex,
-    [HELP_USING_POKEMON]                = Help_Text_HowToUsePokemon,
-    [HELP_USING_SUMMARY]                = Help_Text_HowToUseSummary,
-    [HELP_USING_SWITCH]                 = Help_Text_HowToUseSwitch,
-    [HELP_USING_ITEM]                   = Help_Text_HowToUseItem,
-    [HELP_USING_BAG]                    = Help_Text_HowToUseBag,
-    [HELP_USING_AN_ITEM]                = Help_Text_HowToUseAnItem,
-    [HELP_USING_KEYITEM]                = Help_Text_HowToUseKeyItem,
-    [HELP_USING_POKEBALL]               = Help_Text_HowToUsePokeBall,
-    [HELP_USING_PLAYER]                 = Help_Text_HowToUsePlayer,
-    [HELP_USING_SAVE]                   = Help_Text_HowToUseSave,
-    [HELP_USING_OPTION]                 = Help_Text_HowToUseOption,
-    [HELP_USING_POTION]                 = Help_Text_HowToUsePotion,
-    [HELP_USING_TOWN_MAP]               = Help_Text_HowToUseTownMap,
-    [HELP_USING_TM]                     = Help_Text_HowToUseTM,
-    [HELP_USING_HM]                     = Help_Text_HowToUseHM,
-    [HELP_USING_MOVE_OUTSIDE_OF_BATTLE] = Help_Text_HowToUseMoveOutsideOfBattle,
-    [HELP_RIDING_BICYCLE]               = Help_Text_HowToRideBicycle,
-    [HELP_ENTERING_NAME]                = Help_Text_HowToEnterName,
-    [HELP_USING_PC]                     = Help_Text_HowToUsePC,
-    [HELP_USING_BILLS_PC]               = Help_Text_HowToUseBillsPC,
-    [HELP_USING_WITHDRAW]               = Help_Text_HowToUseWithdraw,
-    [HELP_USING_DEPOSIT]                = Help_Text_HowToUseDeposit,
-    [HELP_USING_MOVE]                   = Help_Text_HowToUseMove,
-    [HELP_MOVING_ITEMS]                 = Help_Text_HowToMoveItems,
-    [HELP_USING_PLAYERS_PC]             = Help_Text_HowToUsePlayersPC,
-    [HELP_USING_WITHDRAW_ITEM]          = Help_Text_HowToUseWithdrawItem,
-    [HELP_USING_DEPOSIT_ITEM]           = Help_Text_HowToUseDepositItem,
-    [HELP_USING_MAILBOX]                = Help_Text_HowToUseMailbox,
-    [HELP_USING_PROF_OAKS_PC]           = Help_Text_HowToUseProfOaksPC,
-    [HELP_OPENING_MENU]                 = Help_Text_HowToOpenMenu,
-    [HELP_USING_FIGHT]                  = Help_Text_HowToUseFight,
-    [HELP_USING_POKEMON2]               = Help_Text_HowToUsePokemon2,
-    [HELP_USING_SHIFT]                  = Help_Text_HowToUseShift,
-    [HELP_USING_SUMMARY2]               = Help_Text_HowToUseSummary2,
-    [HELP_USING_BAG2]                   = Help_Text_HowToUseBag2,
-    [HELP_READING_POKEDEX]              = Help_Text_HowToReadPokedex,
-    [HELP_USING_HOME_PC]                = Help_Text_HowToUseHomePC,
-    [HELP_USING_ITEM_STORAGE]           = Help_Text_HowToUseItemStorage,
-    [HELP_USING_WITHDRAW_ITEM2]         = Help_Text_HowToUseWithdrawItem2,
-    [HELP_USING_DEPOSIT_ITEM2]          = Help_Text_HowToUseDepositItem2,
-    [HELP_USING_MAILBOX2]               = Help_Text_HowToUseMailbox2,
-    [HELP_USING_RUN]                    = Help_Text_HowToUseRun,
-    [HELP_REGISTER_KEY_ITEM]            = Help_Text_HowToRegisterKeyItem,
-    [HELP_USING_BALL]                   = Help_Text_HowToUseBall,
-    [HELP_USING_BAIT]                   = Help_Text_HowToUseBait,
-    [HELP_USING_ROCK]                   = Help_Text_HowToUseRock,
-    [HELP_USING_HALL_OF_FAME]           = Help_Text_HowToUseHallOfFame
-};
-
-// Submenu IDs for TOPIC_TERMS
-enum
-{
-    HELP_TERM_HP = 1,
-    HELP_TERM_EXP,
-    HELP_TERM_MOVES,
-    HELP_TERM_ATTACK,
-    HELP_TERM_DEFENSE,
-    HELP_TERM_SPATK,
-    HELP_TERM_SPDEF,
-    HELP_TERM_SPEED,
-    HELP_TERM_LEVEL,
-    HELP_TERM_TYPE,
-    HELP_TERM_OT,
-    HELP_TERM_ITEM,
-    HELP_TERM_ABILITY,
-    HELP_TERM_MONEY,
-    HELP_TERM_MOVE_TYPE,
-    HELP_TERM_NATURE,
-    HELP_TERM_ID_NO,
-    HELP_TERM_PP,
-    HELP_TERM_POWER,
-    HELP_TERM_ACCURACY,
-    HELP_TERM_FNT,
-    HELP_TERM_ITEMS,
-    HELP_TERM_KEYITEMS,
-    HELP_TERM_POKEBALLS,
-    HELP_TERM_POKEDEX,
-    HELP_TERM_PLAY_TIME,
-    HELP_TERM_BADGES,
-    HELP_TERM_TEXT_SPEED,
-    HELP_TERM_BATTLE_SCENE,
-    HELP_TERM_BATTLE_STYLE,
-    HELP_TERM_SOUND,
-    HELP_TERM_BUTTON_MODE,
-    HELP_TERM_FRAME,
-    HELP_TERM_CANCEL,
-    HELP_TERM_TM,
-    HELP_TERM_HM,
-    HELP_TERM_HM_MOVE,
-    HELP_TERM_EVOLUTION,
-    HELP_TERM_STATUS_PROBLEM,
-    HELP_TERM_POKEMON,
-    HELP_TERM_ID_NO2,
-    HELP_TERM_MONEY2,
-    HELP_TERM_BADGES2,
-};
-
-static const u8 *const sHelpSystemTermTextPtrs[] = {
-    [HELP_NONE]                = NULL,
-    [HELP_TERM_HP]             = Help_Text_HP,
-    [HELP_TERM_EXP]            = Help_Text_EXP,
-    [HELP_TERM_MOVES]          = Help_Text_Moves,
-    [HELP_TERM_ATTACK]         = Help_Text_Attack,
-    [HELP_TERM_DEFENSE]        = Help_Text_Defense,
-    [HELP_TERM_SPATK]          = Help_Text_SpAtk,
-    [HELP_TERM_SPDEF]          = Help_Text_SpDef,
-    [HELP_TERM_SPEED]          = Help_Text_Speed,
-    [HELP_TERM_LEVEL]          = Help_Text_Level,
-    [HELP_TERM_TYPE]           = Help_Text_Type,
-    [HELP_TERM_OT]             = Help_Text_OT,
-    [HELP_TERM_ITEM]           = Help_Text_Item,
-    [HELP_TERM_ABILITY]        = Help_Text_Ability,
-    [HELP_TERM_MONEY]          = Help_Text_Money,
-    [HELP_TERM_MOVE_TYPE]      = Help_Text_MoveType,
-    [HELP_TERM_NATURE]         = Help_Text_Nature,
-    [HELP_TERM_ID_NO]          = Help_Text_IDNo,
-    [HELP_TERM_PP]             = Help_Text_PP,
-    [HELP_TERM_POWER]          = Help_Text_Power,
-    [HELP_TERM_ACCURACY]       = Help_Text_Accuracy,
-    [HELP_TERM_FNT]            = Help_Text_FNT,
-    [HELP_TERM_ITEMS]          = Help_Text_Items,
-    [HELP_TERM_KEYITEMS]       = Help_Text_KeyItems,
-    [HELP_TERM_POKEBALLS]      = Help_Text_PokeBalls,
-    [HELP_TERM_POKEDEX]        = Help_Text_Pokedex,
-    [HELP_TERM_PLAY_TIME]      = Help_Text_PlayTime,
-    [HELP_TERM_BADGES]         = Help_Text_Badges,
-    [HELP_TERM_TEXT_SPEED]     = Help_Text_TextSpeed,
-    [HELP_TERM_BATTLE_SCENE]   = Help_Text_BattleScene,
-    [HELP_TERM_BATTLE_STYLE]   = Help_Text_BattleStyle,
-    [HELP_TERM_SOUND]          = Help_Text_Sound,
-    [HELP_TERM_BUTTON_MODE]    = Help_Text_ButtonMode,
-    [HELP_TERM_FRAME]          = Help_Text_Frame,
-    [HELP_TERM_CANCEL]         = Help_Text_Cancel2,
-    [HELP_TERM_TM]             = Help_Text_TM,
-    [HELP_TERM_HM]             = Help_Text_HM,
-    [HELP_TERM_HM_MOVE]        = Help_Text_HMMove,
-    [HELP_TERM_EVOLUTION]      = Help_Text_Evolution,
-    [HELP_TERM_STATUS_PROBLEM] = Help_Text_StatusProblem,
-    [HELP_TERM_POKEMON]        = Help_Text_Pokemon,
-    [HELP_TERM_ID_NO2]         = Help_Text_IDNo2,
-    [HELP_TERM_MONEY2]         = Help_Text_Money2,
-    [HELP_TERM_BADGES2]        = Help_Text_Badges2
-};
-
-static const u8 *const sHelpSystemTermDefinitionsTextPtrs[] = {
-    [HELP_NONE]                = NULL,
-    [HELP_TERM_HP]             = Help_Text_DefineHP,
-    [HELP_TERM_EXP]            = Help_Text_DefineEXP,
-    [HELP_TERM_MOVES]          = Help_Text_DefineMoves,
-    [HELP_TERM_ATTACK]         = Help_Text_DefineAttack,
-    [HELP_TERM_DEFENSE]        = Help_Text_DefineDefense,
-    [HELP_TERM_SPATK]          = Help_Text_DefineSpAtk,
-    [HELP_TERM_SPDEF]          = Help_Text_DefineSpDef,
-    [HELP_TERM_SPEED]          = Help_Text_DefineSpeed,
-    [HELP_TERM_LEVEL]          = Help_Text_DefineLevel,
-    [HELP_TERM_TYPE]           = Help_Text_DefineType,
-    [HELP_TERM_OT]             = Help_Text_DefineOT,
-    [HELP_TERM_ITEM]           = Help_Text_DefineItem,
-    [HELP_TERM_ABILITY]        = Help_Text_DefineAbility,
-    [HELP_TERM_MONEY]          = Help_Text_DefineMoney,
-    [HELP_TERM_MOVE_TYPE]      = Help_Text_DefineMoveType,
-    [HELP_TERM_NATURE]         = Help_Text_DefineNature,
-    [HELP_TERM_ID_NO]          = Help_Text_DefineIDNo,
-    [HELP_TERM_PP]             = Help_Text_DefinePP,
-    [HELP_TERM_POWER]          = Help_Text_DefinePower,
-    [HELP_TERM_ACCURACY]       = Help_Text_DefineAccuracy,
-    [HELP_TERM_FNT]            = Help_Text_DefineFNT,
-    [HELP_TERM_ITEMS]          = Help_Text_DefineItems,
-    [HELP_TERM_KEYITEMS]       = Help_Text_DefineKeyItems,
-    [HELP_TERM_POKEBALLS]      = Help_Text_DefinePokeBalls,
-    [HELP_TERM_POKEDEX]        = Help_Text_DefinePokedex,
-    [HELP_TERM_PLAY_TIME]      = Help_Text_DefinePlayTime,
-    [HELP_TERM_BADGES]         = Help_Text_DefineBadges,
-    [HELP_TERM_TEXT_SPEED]     = Help_Text_DefineTextSpeed,
-    [HELP_TERM_BATTLE_SCENE]   = Help_Text_DefineBattleScene,
-    [HELP_TERM_BATTLE_STYLE]   = Help_Text_DefineBattleStyle,
-    [HELP_TERM_SOUND]          = Help_Text_DefineSound,
-    [HELP_TERM_BUTTON_MODE]    = Help_Text_DefineButtonMode,
-    [HELP_TERM_FRAME]          = Help_Text_DefineFrame,
-    [HELP_TERM_CANCEL]         = Help_Text_DefineCancel2,
-    [HELP_TERM_TM]             = Help_Text_DefineTM,
-    [HELP_TERM_HM]             = Help_Text_DefineHM,
-    [HELP_TERM_HM_MOVE]        = Help_Text_DefineHMMove,
-    [HELP_TERM_EVOLUTION]      = Help_Text_DefineEvolution,
-    [HELP_TERM_STATUS_PROBLEM] = Help_Text_DefineStatusProblem,
-    [HELP_TERM_POKEMON]        = Help_Text_DefinePokemon,
-    [HELP_TERM_ID_NO2]         = Help_Text_DefineIDNo2,
-    [HELP_TERM_MONEY2]         = Help_Text_DefineMoney2,
-    [HELP_TERM_BADGES2]        = Help_Text_DefineBadges2
-};
-
-// Submenu IDs for TOPIC_ABOUT_GAME
-enum
-{
-    HELP_THE_HELP_SYSTEM = 1,
-    HELP_THE_GAME,
-    HELP_WIRELESS_ADAPTER,
-    HELP_GAME_FUNDAMENTALS_1,
-    HELP_GAME_FUNDAMENTALS_2,
-    HELP_GAME_FUNDAMENTALS_3,
-    HELP_WHAT_ARE_POKEMON,
-};
-
-static const u8 *const sHelpSystemGeneralTopicTextPtrs[] = {
-    [HELP_NONE]                = NULL,
-    [HELP_THE_HELP_SYSTEM]     = Help_Text_TheHelpSystem,
-    [HELP_THE_GAME]            = Help_Text_TheGame,
-    [HELP_WIRELESS_ADAPTER]    = Help_Text_WirelessAdapter,
-    [HELP_GAME_FUNDAMENTALS_1] = Help_Text_GameFundamentals1,
-    [HELP_GAME_FUNDAMENTALS_2] = Help_Text_GameFundamentals2,
-    [HELP_GAME_FUNDAMENTALS_3] = Help_Text_GameFundamentals3,
-    [HELP_WHAT_ARE_POKEMON]    = Help_Text_WhatArePokemon
-};
-
-static const u8 *const sHelpSystemGeneralTopicDescriptionTextPtrs[] = {
-    [HELP_NONE]                = NULL,
-    [HELP_THE_HELP_SYSTEM]     = Help_Text_DescTheHelpSystem,
-    [HELP_THE_GAME]            = Help_Text_DescTheGame,
-    [HELP_WIRELESS_ADAPTER]    = Help_Text_DescWirelessAdapter,
-    [HELP_GAME_FUNDAMENTALS_1] = Help_Text_DescGameFundamentals1,
-    [HELP_GAME_FUNDAMENTALS_2] = Help_Text_DescGameFundamentals2,
-    [HELP_GAME_FUNDAMENTALS_3] = Help_Text_DescGameFundamentals3,
-    [HELP_WHAT_ARE_POKEMON]    = Help_Text_DescWhatArePokemon
-};
-
-// An enum for the type matchups isn't necessary, when used they're always used in their entirety
-// Macro below is used to reference the entire group at once
-#define HELP_TYPE_MATCHUPS  \
-    1,                      \
-    2, 3,                   \
-    4, 5,                   \
-    6, 7,                   \
-    8, 9,                   \
-    10, 11,                 \
-    12, 13,                 \
-    14, 15,                 \
-    16, 17,                 \
-    18, 19,                 \
-    20, 21,                 \
-    22, 23,                 \
-    24, 25,                 \
-    26, 27,                 \
-    28, 29,                 \
-    30, 31,                 \
-    32, 33,                 \
-    34, 35                  \
-
-static const u8 *const sHelpSystemTypeMatchupTextPtrs[] = {
-    [HELP_NONE] = NULL,
-    [1]  = Help_Text_UsingTypeMatchupList,
-    [2]  = Help_Text_OwnMoveDark,
-    [3]  = Help_Text_OwnPokemonDark,
-    [4]  = Help_Text_OwnMoveRock,
-    [5]  = Help_Text_OwnPokemonRock,
-    [6]  = Help_Text_OwnMovePsychic,
-    [7]  = Help_Text_OwnPokemonPsychic,
-    [8]  = Help_Text_OwnMoveFighting,
-    [9]  = Help_Text_OwnPokemonFighting,
-    [10] = Help_Text_OwnMoveGrass,
-    [11] = Help_Text_OwnPokemonGrass,
-    [12] = Help_Text_OwnMoveGhost,
-    [13] = Help_Text_OwnPokemonGhost,
-    [14] = Help_Text_OwnMoveIce,
-    [15] = Help_Text_OwnPokemonIce,
-    [16] = Help_Text_OwnMoveGround,
-    [17] = Help_Text_OwnPokemonGround,
-    [18] = Help_Text_OwnMoveElectric,
-    [19] = Help_Text_OwnPokemonElectric,
-    [20] = Help_Text_OwnMovePoison,
-    [21] = Help_Text_OwnPokemonPoison,
-    [22] = Help_Text_OwnMoveDragon,
-    [23] = Help_Text_OwnPokemonDragon,
-    [24] = Help_Text_OwnMoveNormal,
-    [25] = Help_Text_OwnPokemonNormal,
-    [26] = Help_Text_OwnMoveSteel,
-    [27] = Help_Text_OwnPokemonSteel,
-    [28] = Help_Text_OwnMoveFlying,
-    [29] = Help_Text_OwnPokemonFlying,
-    [30] = Help_Text_OwnMoveFire,
-    [31] = Help_Text_OwnPokemonFire,
-    [32] = Help_Text_OwnMoveWater,
-    [33] = Help_Text_OwnPokemonWater,
-    [34] = Help_Text_OwnMoveBug,
-    [35] = Help_Text_OwnPokemonBug
-};
-
-static const u8 *const sHelpSystemTypeMatchupDescriptionTextPtrs[] = {
-    [HELP_NONE] = NULL,
-    [1]  = Help_Text_HowToUseTypeMatchupList,
-    [2]  = Help_Text_TypeMatchupOwnMoveDark,
-    [3]  = Help_Text_TypeMatchupOwnPokemonDark,
-    [4]  = Help_Text_TypeMatchupOwnMoveRock,
-    [5]  = Help_Text_TypeMatchupOwnPokemonRock,
-    [6]  = Help_Text_TypeMatchupOwnMovePsychic,
-    [7]  = Help_Text_TypeMatchupOwnPokemonPsychic,
-    [8]  = Help_Text_TypeMatchupOwnMoveFighting,
-    [9]  = Help_Text_TypeMatchupOwnPokemonFighting,
-    [10] = Help_Text_TypeMatchupOwnMoveGrass,
-    [11] = Help_Text_TypeMatchupOwnPokemonGrass,
-    [12] = Help_Text_TypeMatchupOwnMoveGhost,
-    [13] = Help_Text_TypeMatchupOwnPokemonGhost,
-    [14] = Help_Text_TypeMatchupOwnMoveIce,
-    [15] = Help_Text_TypeMatchupOwnPokemonIce,
-    [16] = Help_Text_TypeMatchupOwnMoveGround,
-    [17] = Help_Text_TypeMatchupOwnPokemonGround,
-    [18] = Help_Text_TypeMatchupOwnMoveElectric,
-    [19] = Help_Text_TypeMatchupOwnPokemonElectric,
-    [20] = Help_Text_TypeMatchupOwnMovePoison,
-    [21] = Help_Text_TypeMatchupOwnPokemonPoison,
-    [22] = Help_Text_TypeMatchupOwnMoveDragon,
-    [23] = Help_Text_TypeMatchupOwnPokemonDragon,
-    [24] = Help_Text_TypeMatchupOwnMoveNormal,
-    [25] = Help_Text_TypeMatchupOwnPokemonNormal,
-    [26] = Help_Text_TypeMatchupOwnMoveSteel,
-    [27] = Help_Text_TypeMatchupOwnPokemonSteel,
-    [28] = Help_Text_TypeMatchupOwnMoveFlying,
-    [29] = Help_Text_TypeMatchupOwnPokemonFlying,
-    [30] = Help_Text_TypeMatchupOwnMoveFire,
-    [31] = Help_Text_TypeMatchupOwnPokemonFire,
-    [32] = Help_Text_TypeMatchupOwnMoveWater,
-    [33] = Help_Text_TypeMatchupOwnPokemonWater,
-    [34] = Help_Text_TypeMatchupOwnMoveBug,
-    [35] = Help_Text_TypeMatchupOwnPokemonBug
-};
-
-static const u8 sAboutGame_TitleScreen[] = {
-    HELP_THE_HELP_SYSTEM, 
-    HELP_THE_GAME, 
-    HELP_WIRELESS_ADAPTER, 
-    HELP_END
-};
-
-static const u8 sAboutGame_NewGame[] = {
-    HELP_THE_HELP_SYSTEM, 
-    HELP_THE_GAME, 
-    HELP_WIRELESS_ADAPTER, 
-    HELP_END
-};
-
-static const u8 sHowTo_NamingScreen[] = {
-    HELP_ENTERING_NAME, 
-    HELP_END
-};
-
-static const u8 sAboutGame_NamingScreen[] = {
-    HELP_THE_HELP_SYSTEM, 
-    HELP_THE_GAME, 
-    HELP_WIRELESS_ADAPTER, 
-    HELP_END
-};
-
-static const u8 sHowTo_Pokedex[] = {
-    HELP_USING_POKEDEX, 
-    HELP_READING_POKEDEX, 
-    HELP_END
-};
-
-static const u8 sHowTo_PartyMenu[] = {
-    HELP_USING_POKEMON, 
-    HELP_USING_SUMMARY,
-    HELP_USING_SWITCH, 
-    HELP_USING_ITEM, 
-    HELP_USING_MOVE_OUTSIDE_OF_BATTLE,
-    HELP_END
-};
-
-static const u8 sTerms_PartyMenu[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_END
-};
-
-static const u8 sHowTo_PokemonInfo[] = {
-    HELP_USING_POKEMON, 
-    HELP_USING_SUMMARY, 
-    HELP_END
-};
-
-static const u8 sTerms_PokemonInfo[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_OT, 
-    HELP_TERM_ID_NO, 
-    HELP_TERM_ITEM, 
-    HELP_TERM_NATURE, 
-    HELP_END
-};
-
-static const u8 sTerms_PokemonSkills[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_ATTACK, 
-    HELP_TERM_DEFENSE, 
-    HELP_TERM_SPATK, 
-    HELP_TERM_SPDEF, 
-    HELP_TERM_SPEED, 
-    HELP_TERM_EXP, 
-    HELP_TERM_ABILITY, 
-    HELP_END
-};
-
-static const u8 sTerms_PokemonMoves[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_MOVES, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_MOVE_TYPE, 
-    HELP_TERM_PP, 
-    HELP_TERM_POWER, 
-    HELP_TERM_ACCURACY, 
-    HELP_END
-};
-
-static const u8 sHowTo_Bag[] = {
-    HELP_USING_BAG, 
-    HELP_USING_AN_ITEM, 
-    HELP_USING_KEYITEM, 
-    HELP_REGISTER_KEY_ITEM, 
-    HELP_USING_POKEBALL, 
-    HELP_USING_POTION, 
-    HELP_USING_TOWN_MAP, 
-    HELP_USING_TM, 
-    HELP_USING_HM, 
-    HELP_RIDING_BICYCLE, 
-    HELP_END
-};
-
-static const u8 sTerms_Bag[] = {
-    HELP_TERM_ITEMS, 
-    HELP_TERM_KEYITEMS, 
-    HELP_TERM_POKEBALLS, 
-    HELP_END
-};
-
-static const u8 sHowTo_TrainerCardFront[] = {
-    HELP_USING_PLAYER, 
-    HELP_END
-};
-
-static const u8 sTerms_TrainerCardFront[] = {
-    HELP_TERM_ID_NO, 
-    HELP_TERM_MONEY, 
-    HELP_TERM_POKEDEX, 
-    HELP_TERM_PLAY_TIME, 
-    HELP_TERM_BADGES, 
-    HELP_END
-};
-
-static const u8 sHowTo_TrainerCardBack[] = {
-    HELP_USING_PLAYER, 
-    HELP_END
-};
-
-static const u8 sHowTo_Save[] = {
-    HELP_USING_SAVE, 
-    HELP_END
-};
-
-static const u8 sTerms_Save[] = {
-    HELP_TERM_BADGES2, 
-    HELP_TERM_POKEDEX, 
-    HELP_TERM_PLAY_TIME, 
-    HELP_END
-};
-
-static const u8 sHowTo_Options[] = {
-    HELP_USING_OPTION, 
-    HELP_END
-};
-
-static const u8 sTerms_Options[] = {
-    HELP_TERM_TEXT_SPEED, 
-    HELP_TERM_BATTLE_SCENE, 
-    HELP_TERM_BATTLE_STYLE, 
-    HELP_TERM_SOUND, 
-    HELP_TERM_BUTTON_MODE, 
-    HELP_TERM_FRAME, 
-    HELP_TERM_CANCEL, 
-    HELP_END
-};
-
-static const u8 sWhatToDo_PlayersHouse[] = {
-    HELP_WHAT_SHOULD_I_BE_DOING, 
-    HELP_CANT_GET_OUT_OF_ROOM, 
-    HELP_CANT_FIND_PERSON_I_WANT, 
-    HELP_END
-};
-
-static const u8 sAboutGame_PlayersHouse[] = {
-    HELP_THE_HELP_SYSTEM, 
-    HELP_THE_GAME, 
-    HELP_WIRELESS_ADAPTER, 
-    HELP_WHAT_ARE_POKEMON, 
-    HELP_END
-};
-
-static const u8 sWhatToDo_OaksLab[] = {
-    HELP_WHAT_SHOULD_I_BE_DOING, 
-    HELP_CANT_FIND_PERSON_I_WANT, 
-    HELP_TALKED_TO_EVERYONE_NOW_WHAT, 
-    HELP_WHAT_HAPPENED_TO_ITEM_I_GOT, 
-    HELP_WANT_TO_END_GAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_OaksLab[] = {
-    HELP_OPENING_MENU, 
-    HELP_USING_POKEDEX, 
-    HELP_USING_POKEMON, 
-    HELP_USING_SUMMARY, 
-    HELP_USING_SWITCH, 
-    HELP_USING_ITEM, 
-    HELP_USING_BAG, 
-    HELP_USING_AN_ITEM, 
-    HELP_USING_KEYITEM, 
-    HELP_REGISTER_KEY_ITEM,
-    HELP_USING_POKEBALL, 
-    HELP_USING_POTION, 
-    HELP_USING_TOWN_MAP, 
-    HELP_USING_TM, 
-    HELP_USING_HM, 
-    HELP_USING_PLAYER, 
-    HELP_USING_SAVE, 
-    HELP_USING_OPTION, 
-    HELP_USING_MOVE_OUTSIDE_OF_BATTLE, 
-    HELP_END
-};
-
-static const u8 sTerms_OaksLab[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_MOVES, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_POKEMON, 
-    HELP_END
-};
-
-static const u8 sWhatToDo_PokeCenter[] = {
-    HELP_WHAT_SHOULD_I_BE_DOING, 
-    HELP_TALKED_TO_EVERYONE_NOW_WHAT, 
-    HELP_SOMEONE_BLOCKING_MY_WAY, 
-    HELP_WHAT_ARE_MY_ADVENTURE_BASICS, 
-    HELP_WHATS_POKEMON_CENTER, 
-    HELP_WHATS_POKEMON_MART, 
-    HELP_WHAT_HAPPENED_TO_ITEM_I_GOT, 
-    HELP_WANT_TO_END_GAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_PokeCenter[] = {
-    HELP_OPENING_MENU, 
-    HELP_USING_POKEDEX, 
-    HELP_USING_POKEMON, 
-    HELP_USING_SUMMARY, 
-    HELP_USING_SWITCH, 
-    HELP_USING_ITEM, 
-    HELP_USING_BAG, 
-    HELP_USING_AN_ITEM, 
-    HELP_USING_KEYITEM, 
-    HELP_REGISTER_KEY_ITEM, 
-    HELP_USING_POKEBALL, 
-    HELP_USING_POTION, 
-    HELP_USING_TOWN_MAP, 
-    HELP_USING_TM, 
-    HELP_USING_HM, 
-    HELP_USING_PLAYER, 
-    HELP_USING_SAVE, 
-    HELP_USING_OPTION, 
-    HELP_USING_MOVE_OUTSIDE_OF_BATTLE, 
-    HELP_USING_PC, 
-    HELP_END
-};
-
-static const u8 sTerms_PokeCenter[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_MOVES, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_POKEMON, 
-    HELP_END
-};
-
-static const u8 sAboutGame_PokeCenter[] = {
-    HELP_WIRELESS_ADAPTER, 
-    HELP_WHAT_ARE_POKEMON, 
-    HELP_GAME_FUNDAMENTALS_1, 
-    HELP_GAME_FUNDAMENTALS_2, 
-    HELP_GAME_FUNDAMENTALS_3, 
-    HELP_END
-};
-
-static const u8 sWhatToDo_Mart[] = {
-    HELP_WHAT_SHOULD_I_BE_DOING, 
-    HELP_TALKED_TO_EVERYONE_NOW_WHAT, 
-    HELP_SOMEONE_BLOCKING_MY_WAY, 
-    HELP_WHAT_ARE_MY_ADVENTURE_BASICS, 
-    HELP_WHATS_POKEMON_CENTER, 
-    HELP_WHATS_POKEMON_MART, 
-    HELP_WHAT_HAPPENED_TO_ITEM_I_GOT, 
-    HELP_WANT_TO_END_GAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_Mart[] = {
-    HELP_OPENING_MENU, 
-    HELP_USING_POKEDEX, 
-    HELP_USING_POKEMON, 
-    HELP_USING_SUMMARY, 
-    HELP_USING_SWITCH, 
-    HELP_USING_ITEM, 
-    HELP_USING_BAG, 
-    HELP_USING_AN_ITEM, 
-    HELP_USING_KEYITEM, 
-    HELP_REGISTER_KEY_ITEM, 
-    HELP_USING_POKEBALL, 
-    HELP_USING_POTION, 
-    HELP_USING_TOWN_MAP, 
-    HELP_USING_TM, 
-    HELP_USING_HM, 
-    HELP_USING_PLAYER, 
-    HELP_USING_SAVE, 
-    HELP_USING_OPTION, 
-    HELP_USING_MOVE_OUTSIDE_OF_BATTLE, 
-    HELP_END
-};
-
-static const u8 sTerms_Mart[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_MOVES, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_ITEM, 
-    HELP_TERM_MONEY, 
-    HELP_TERM_ITEMS, 
-    HELP_TERM_KEYITEMS, 
-    HELP_TERM_POKEBALLS, 
-    HELP_TERM_FNT, 
-    HELP_END
-};
-
-static const u8 sWhatToDo_Gym[] = {
-    HELP_SOMEONE_BLOCKING_MY_WAY, 
-    HELP_WHAT_ARE_MY_ADVENTURE_BASICS, 
-    HELP_WHATS_POKEMON_CENTER, 
-    HELP_WHATS_POKEMON_MART, 
-    HELP_WHAT_HAPPENED_TO_ITEM_I_GOT, 
-    HELP_WANT_TO_END_GAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_Gym[] = {
-    HELP_OPENING_MENU, 
-    HELP_USING_POKEDEX, 
-    HELP_USING_POKEMON, 
-    HELP_USING_SUMMARY, 
-    HELP_USING_SWITCH, 
-    HELP_USING_ITEM, 
-    HELP_USING_BAG, 
-    HELP_USING_AN_ITEM, 
-    HELP_USING_KEYITEM, 
-    HELP_REGISTER_KEY_ITEM, 
-    HELP_USING_POKEBALL, 
-    HELP_USING_POTION, 
-    HELP_USING_TOWN_MAP, 
-    HELP_USING_TM, 
-    HELP_USING_HM, 
-    HELP_USING_PLAYER, 
-    HELP_USING_SAVE, 
-    HELP_USING_OPTION, 
-    HELP_USING_MOVE_OUTSIDE_OF_BATTLE, 
-    HELP_END
-};
-
-static const u8 sTerms_Gym[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_MOVES, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_FNT, 
-    HELP_END
-};
-
-static const u8 sTypeMatchups_Gym[] = {
-    HELP_TYPE_MATCHUPS,
-    HELP_END
-};
-
-static const u8 sWhatToDo_Indoors[] = {
-    HELP_WHAT_SHOULD_I_BE_DOING, 
-    HELP_WHAT_ARE_MY_ADVENTURE_BASICS, 
-    HELP_CANT_FIND_PERSON_I_WANT, 
-    HELP_TALKED_TO_EVERYONE_NOW_WHAT, 
-    HELP_SOMEONE_BLOCKING_MY_WAY, 
-    HELP_I_CANT_GO_ON, 
-    HELP_HOW_DO_I_PROGRESS, 
-    HELP_WHAT_IS_THAT_PERSON_LIKE, 
-    HELP_OUT_OF_THINGS_TO_DO, 
-    HELP_HOW_ARE_ROADS_FORESTS_DIFFERENT, 
-    HELP_WHAT_DO_I_DO_IN_CAVE, 
-    HELP_WHATS_POKEMON_CENTER, 
-    HELP_WHATS_POKEMON_MART, 
-    HELP_WHAT_IS_A_GYM, 
-    HELP_WHAT_HAPPENED_TO_ITEM_I_GOT, 
-    HELP_WHEN_CAN_I_USE_ITEM, 
-    HELP_RAN_OUT_OF_POTIONS, 
-    HELP_CAN_I_BUY_POKEBALLS, 
-    HELP_WHATS_A_BATTLE, 
-    HELP_HOW_DO_I_PREPARE_FOR_BATTLE, 
-    HELP_WHAT_IS_A_MONS_VITALITY, 
-    HELP_WHERE_DO_MONS_APPEAR, 
-    HELP_CANT_CATCH_MONS, 
-    HELP_WANT_TO_MAKE_MON_STRONGER, 
-    HELP_FOE_MONS_TOO_STRONG, 
-    HELP_MY_MONS_ARE_HURT, 
-    HELP_WHAT_IS_STATUS_PROBLEM, 
-    HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT, 
-    HELP_WHATS_A_TRAINER, 
-    HELP_HOW_DO_I_WIN_AGAINST_TRAINER, 
-    HELP_WHAT_ARE_MOVES, 
-    HELP_WANT_TO_ADD_MORE_MOVES, 
-    HELP_WHAT_ARE_HIDDEN_MOVES, 
-    HELP_WHAT_DOES_HIDDEN_MOVE_DO, 
-    HELP_WANT_TO_END_GAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_Indoors[] = {
-    HELP_OPENING_MENU, 
-    HELP_USING_POKEDEX, 
-    HELP_USING_POKEMON, 
-    HELP_USING_SUMMARY, 
-    HELP_USING_SWITCH, 
-    HELP_USING_ITEM, 
-    HELP_USING_BAG, 
-    HELP_USING_AN_ITEM, 
-    HELP_USING_KEYITEM, 
-    HELP_REGISTER_KEY_ITEM, 
-    HELP_USING_POKEBALL, 
-    HELP_USING_POTION, 
-    HELP_USING_TOWN_MAP, 
-    HELP_USING_TM, 
-    HELP_USING_HM, 
-    HELP_USING_PLAYER, 
-    HELP_USING_SAVE, 
-    HELP_USING_OPTION, 
-    HELP_USING_MOVE_OUTSIDE_OF_BATTLE, 
-    HELP_END
-};
-
-static const u8 sTerms_Indoors[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_OT, 
-    HELP_TERM_ITEM, 
-    HELP_TERM_ABILITY,
-    HELP_TERM_FNT, 
-    HELP_END
-};
-
-static const u8 sWhatToDo_Overworld[] = {
-    HELP_WHAT_SHOULD_I_BE_DOING, 
-    HELP_WHAT_ARE_MY_ADVENTURE_BASICS, 
-    HELP_CANT_FIND_PERSON_I_WANT, 
-    HELP_TALKED_TO_EVERYONE_NOW_WHAT, 
-    HELP_SOMEONE_BLOCKING_MY_WAY, 
-    HELP_I_CANT_GO_ON, 
-    HELP_HOW_DO_I_PROGRESS, 
-    HELP_WHAT_IS_THAT_PERSON_LIKE, 
-    HELP_OUT_OF_THINGS_TO_DO, 
-    HELP_HOW_ARE_ROADS_FORESTS_DIFFERENT, 
-    HELP_WHAT_DO_I_DO_IN_CAVE, 
-    HELP_WHATS_POKEMON_CENTER, 
-    HELP_WHATS_POKEMON_MART, 
-    HELP_WHAT_IS_A_GYM, 
-    HELP_WHAT_HAPPENED_TO_ITEM_I_GOT, 
-    HELP_WHEN_CAN_I_USE_ITEM, 
-    HELP_RAN_OUT_OF_POTIONS, 
-    HELP_CAN_I_BUY_POKEBALLS, 
-    HELP_WHATS_A_BATTLE, 
-    HELP_HOW_DO_I_PREPARE_FOR_BATTLE, 
-    HELP_WHAT_IS_A_MONS_VITALITY, 
-    HELP_WHERE_DO_MONS_APPEAR, 
-    HELP_CANT_CATCH_MONS, 
-    HELP_WANT_TO_MAKE_MON_STRONGER, 
-    HELP_FOE_MONS_TOO_STRONG, 
-    HELP_MY_MONS_ARE_HURT, 
-    HELP_WHAT_IS_STATUS_PROBLEM, 
-    HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT, 
-    HELP_WHATS_A_TRAINER, 
-    HELP_HOW_DO_I_WIN_AGAINST_TRAINER, 
-    HELP_WHAT_ARE_MOVES, 
-    HELP_WANT_TO_ADD_MORE_MOVES, 
-    HELP_WHAT_ARE_HIDDEN_MOVES, 
-    HELP_WHAT_DOES_HIDDEN_MOVE_DO, 
-    HELP_WANT_TO_END_GAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_Overworld[] = {
-    HELP_OPENING_MENU, 
-    HELP_USING_POKEDEX, 
-    HELP_USING_POKEMON, 
-    HELP_USING_BAG, 
-    HELP_USING_PLAYER, 
-    HELP_USING_SAVE, 
-    HELP_USING_OPTION, 
-    HELP_USING_MOVE_OUTSIDE_OF_BATTLE, 
-    HELP_END
-};
-
-static const u8 sTerms_Overworld[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_OT, 
-    HELP_TERM_ITEM, 
-    HELP_TERM_ABILITY, 
-    HELP_TERM_FNT, 
-    HELP_TERM_POKEMON, 
-    HELP_END
-};
-
-static const u8 sWhatToDo_Dungeon[] = {
-    HELP_WHAT_ARE_MY_ADVENTURE_BASICS, 
-    HELP_I_CANT_GO_ON, 
-    HELP_HOW_DO_I_PROGRESS, 
-    HELP_WHAT_IS_THAT_PERSON_LIKE, 
-    HELP_OUT_OF_THINGS_TO_DO, 
-    HELP_HOW_ARE_ROADS_FORESTS_DIFFERENT, 
-    HELP_WHAT_DO_I_DO_IN_CAVE, 
-    HELP_WHATS_POKEMON_CENTER, 
-    HELP_WHATS_POKEMON_MART, 
-    HELP_WHAT_IS_A_GYM, 
-    HELP_WHAT_HAPPENED_TO_ITEM_I_GOT, 
-    HELP_WHEN_CAN_I_USE_ITEM, 
-    HELP_RAN_OUT_OF_POTIONS, 
-    HELP_WHATS_A_BATTLE, 
-    HELP_HOW_DO_I_PREPARE_FOR_BATTLE, 
-    HELP_WHAT_IS_A_MONS_VITALITY, 
-    HELP_WHERE_DO_MONS_APPEAR, 
-    HELP_CANT_CATCH_MONS, 
-    HELP_WANT_TO_MAKE_MON_STRONGER, 
-    HELP_FOE_MONS_TOO_STRONG, 
-    HELP_MY_MONS_ARE_HURT, 
-    HELP_WHAT_IS_STATUS_PROBLEM, 
-    HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT, 
-    HELP_WHATS_A_TRAINER, 
-    HELP_HOW_DO_I_WIN_AGAINST_TRAINER, 
-    HELP_WHAT_ARE_MOVES, 
-    HELP_WANT_TO_ADD_MORE_MOVES, 
-    HELP_WHAT_ARE_HIDDEN_MOVES, 
-    HELP_WHAT_DOES_HIDDEN_MOVE_DO, 
-    HELP_WANT_TO_END_GAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_Dungeon[] = {
-    HELP_OPENING_MENU, 
-    HELP_USING_POKEDEX, 
-    HELP_USING_POKEMON, 
-    HELP_USING_BAG, 
-    HELP_USING_PLAYER, 
-    HELP_USING_SAVE, 
-    HELP_USING_OPTION, 
-    HELP_USING_MOVE_OUTSIDE_OF_BATTLE, 
-    HELP_END
-};
-
-static const u8 sTerms_Dungeon[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_OT, 
-    HELP_TERM_ITEM, 
-    HELP_TERM_ABILITY, 
-    HELP_TERM_FNT, 
-    HELP_END
-};
-
-static const u8 sWhatToDo_Surfing[] = {
-    HELP_I_CANT_GO_ON, 
-    HELP_WHAT_IS_THAT_PERSON_LIKE, 
-    HELP_OUT_OF_THINGS_TO_DO, 
-    HELP_WHAT_IS_A_GYM, 
-    HELP_CANT_CATCH_MONS, 
-    HELP_WANT_TO_MAKE_MON_STRONGER, 
-    HELP_FOE_MONS_TOO_STRONG, 
-    HELP_MY_MONS_ARE_HURT, 
-    HELP_WHAT_IS_STATUS_PROBLEM, 
-    HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT, 
-    HELP_WHATS_A_TRAINER, 
-    HELP_HOW_DO_I_WIN_AGAINST_TRAINER, 
-    HELP_WHAT_ARE_MOVES, 
-    HELP_WANT_TO_ADD_MORE_MOVES, 
-    HELP_WHAT_ARE_HIDDEN_MOVES, 
-    HELP_WHAT_DOES_HIDDEN_MOVE_DO, 
-    HELP_WANT_TO_END_GAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_Surfing[] = {
-    HELP_OPENING_MENU, 
-    HELP_USING_POKEDEX, 
-    HELP_USING_POKEMON, 
-    HELP_USING_BAG, 
-    HELP_USING_PLAYER, 
-    HELP_USING_SAVE, 
-    HELP_USING_OPTION, 
-    HELP_USING_MOVE_OUTSIDE_OF_BATTLE, 
-    HELP_END
-};
-
-static const u8 sTerms_Surfing[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP,
-    HELP_TERM_EXP, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_OT, 
-    HELP_TERM_ITEM, 
-    HELP_TERM_ABILITY, 
-    HELP_TERM_FNT, 
-    HELP_END
-};
-
-static const u8 sWhatToDo_WildBattle[] = {
-    HELP_WHATS_A_BATTLE, 
-    HELP_WHAT_ARE_MOVES, 
-    HELP_WHAT_MOVES_SHOULD_I_USE, 
-    HELP_WHAT_IS_A_MONS_VITALITY, 
-    HELP_MY_MONS_ARE_HURT, 
-    HELP_CANT_CATCH_MONS, 
-    HELP_CAN_I_BUY_POKEBALLS, 
-    HELP_RAN_OUT_OF_POTIONS, 
-    HELP_WANT_TO_MAKE_MON_STRONGER, 
-    HELP_FOE_MONS_TOO_STRONG, 
-    HELP_WHAT_IS_STATUS_PROBLEM, 
-    HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT, 
-    HELP_END
-};
-
-static const u8 sHowTo_WildBattle[] = {
-    HELP_USING_FIGHT, 
-    HELP_USING_POKEMON2, 
-    HELP_USING_SHIFT, 
-    HELP_USING_SUMMARY2, 
-    HELP_USING_BAG2, 
-    HELP_USING_AN_ITEM, 
-    HELP_USING_POKEBALL, 
-    HELP_USING_RUN, 
-    HELP_END
-};
-
-static const u8 sTerms_WildBattle[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_MOVES, 
-    HELP_TERM_ATTACK, 
-    HELP_TERM_DEFENSE, 
-    HELP_TERM_SPATK, 
-    HELP_TERM_SPDEF, 
-    HELP_TERM_SPEED, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_ABILITY, 
-    HELP_TERM_MOVE_TYPE, 
-    HELP_TERM_PP, 
-    HELP_TERM_POWER, 
-    HELP_TERM_ACCURACY, 
-    HELP_TERM_STATUS_PROBLEM, 
-    HELP_TERM_FNT, 
-    HELP_END
-};
-
-static const u8 sTypeMatchups_WildBattle[] = {
-    HELP_TYPE_MATCHUPS,
-    HELP_END
-};
-
-static const u8 sWhatToDo_TrainerBattleSingle[] = {
-    HELP_WHATS_A_BATTLE, 
-    HELP_WHAT_ARE_MOVES, 
-    HELP_WHAT_MOVES_SHOULD_I_USE, 
-    HELP_WHAT_IS_A_MONS_VITALITY, 
-    HELP_MY_MONS_ARE_HURT, 
-    HELP_RAN_OUT_OF_POTIONS, 
-    HELP_WANT_TO_MAKE_MON_STRONGER, 
-    HELP_FOE_MONS_TOO_STRONG, 
-    HELP_WHAT_IS_STATUS_PROBLEM, 
-    HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT,
-    HELP_END
-};
-
-static const u8 sHowTo_TrainerBattleSingle[] = {
-    HELP_USING_FIGHT, 
-    HELP_USING_POKEMON2, 
-    HELP_USING_SHIFT, 
-    HELP_USING_SUMMARY2, 
-    HELP_USING_BAG2, 
-    HELP_USING_AN_ITEM, 
-    HELP_USING_RUN, 
-    HELP_END
-};
-
-static const u8 sTerms_TrainerBattleSingle[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_MOVES, 
-    HELP_TERM_ATTACK, 
-    HELP_TERM_DEFENSE, 
-    HELP_TERM_SPATK, 
-    HELP_TERM_SPDEF, 
-    HELP_TERM_SPEED, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_ABILITY, 
-    HELP_TERM_MOVE_TYPE, 
-    HELP_TERM_PP, 
-    HELP_TERM_POWER, 
-    HELP_TERM_ACCURACY, 
-    HELP_TERM_STATUS_PROBLEM, 
-    HELP_TERM_FNT, 
-    HELP_END
-};
-
-static const u8 sTypeMatchups_TrainerBattleSingle[] = {
-    HELP_TYPE_MATCHUPS, 
-    HELP_END
-};
-
-static const u8 sWhatToDo_TrainerBattleDouble[] = {
-    HELP_WHATS_A_BATTLE, 
-    HELP_WHAT_ARE_MOVES, 
-    HELP_WHAT_MOVES_SHOULD_I_USE, 
-    HELP_WHAT_IS_A_MONS_VITALITY, 
-    HELP_MY_MONS_ARE_HURT, 
-    HELP_RAN_OUT_OF_POTIONS, 
-    HELP_WANT_TO_MAKE_MON_STRONGER, 
-    HELP_FOE_MONS_TOO_STRONG, 
-    HELP_WHAT_IS_STATUS_PROBLEM, 
-    HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT, 
-    HELP_END
-};
-
-static const u8 sHowTo_TrainerBattleDouble[] = {
-    HELP_USING_FIGHT, 
-    HELP_USING_POKEMON2, 
-    HELP_USING_SHIFT, 
-    HELP_USING_SUMMARY2, 
-    HELP_USING_BAG2, 
-    HELP_USING_AN_ITEM, 
-    HELP_USING_RUN, 
-    HELP_END
-};
-
-static const u8 sTerms_TrainerBattleDouble[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_MOVES, 
-    HELP_TERM_ATTACK, 
-    HELP_TERM_DEFENSE, 
-    HELP_TERM_SPATK, 
-    HELP_TERM_SPDEF, 
-    HELP_TERM_SPEED, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_ABILITY, 
-    HELP_TERM_MOVE_TYPE, 
-    HELP_TERM_PP, 
-    HELP_TERM_POWER, 
-    HELP_TERM_ACCURACY, 
-    HELP_TERM_STATUS_PROBLEM, 
-    HELP_TERM_FNT, 
-    HELP_END
-};
-
-static const u8 sTypeMatchups_TrainerBattleDouble[] = {
-    HELP_TYPE_MATCHUPS,
-    HELP_END
-};
-
-static const u8 sWhatToDo_SafariBattle[] = {
-    HELP_WHAT_DO_I_DO_IN_SAFARI, 
-    HELP_WHAT_ARE_SAFARI_RULES, 
-    HELP_WANT_TO_END_SAFARI, 
-    HELP_END
-};
-
-static const u8 sHowTo_SafariBattle[] = {
-    HELP_USING_BALL, 
-    HELP_USING_BAIT, 
-    HELP_USING_ROCK, 
-    HELP_USING_RUN, 
-    HELP_END
-};
-
-static const u8 sTerms_SafariBattle[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_MOVES, 
-    HELP_TERM_ATTACK, 
-    HELP_TERM_DEFENSE, 
-    HELP_TERM_SPATK, 
-    HELP_TERM_SPDEF, 
-    HELP_TERM_SPEED, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_ABILITY, 
-    HELP_TERM_MOVE_TYPE, 
-    HELP_TERM_PP, 
-    HELP_TERM_POWER, 
-    HELP_TERM_ACCURACY, 
-    HELP_END
-};
-
-static const u8 sTypeMatchups_SafariBattle[] = {
-    HELP_TYPE_MATCHUPS,
-    HELP_END
-};
-
-static const u8 sHowTo_PC[] = {
-    HELP_USING_PC, 
-    HELP_USING_BILLS_PC, 
-    HELP_USING_WITHDRAW, 
-    HELP_USING_DEPOSIT, 
-    HELP_USING_MOVE, 
-    HELP_MOVING_ITEMS, 
-    HELP_USING_PLAYERS_PC, 
-    HELP_USING_WITHDRAW_ITEM, 
-    HELP_USING_DEPOSIT_ITEM,
-    HELP_USING_MAILBOX, 
-    HELP_USING_PROF_OAKS_PC, 
-    HELP_USING_HALL_OF_FAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_BillsPC[] = {
-    HELP_USING_PC, 
-    HELP_USING_BILLS_PC, 
-    HELP_USING_WITHDRAW, 
-    HELP_USING_DEPOSIT, 
-    HELP_USING_MOVE, 
-    HELP_MOVING_ITEMS, 
-    HELP_USING_PLAYERS_PC, 
-    HELP_USING_WITHDRAW_ITEM, 
-    HELP_USING_DEPOSIT_ITEM,
-    HELP_USING_MAILBOX, 
-    HELP_USING_PROF_OAKS_PC, 
-    HELP_USING_HALL_OF_FAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_PlayersPCItems[] = {
-    HELP_USING_PC, 
-    HELP_USING_BILLS_PC, 
-    HELP_USING_WITHDRAW, 
-    HELP_USING_DEPOSIT, 
-    HELP_USING_MOVE, 
-    HELP_MOVING_ITEMS, 
-    HELP_USING_PLAYERS_PC, 
-    HELP_USING_WITHDRAW_ITEM, 
-    HELP_USING_DEPOSIT_ITEM,
-    HELP_USING_MAILBOX, 
-    HELP_USING_PROF_OAKS_PC, 
-    HELP_USING_HALL_OF_FAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_PlayersPCMailbox[] = {
-    HELP_USING_PC, 
-    HELP_USING_BILLS_PC, 
-    HELP_USING_WITHDRAW, 
-    HELP_USING_DEPOSIT, 
-    HELP_USING_MOVE, 
-    HELP_MOVING_ITEMS, 
-    HELP_USING_PLAYERS_PC, 
-    HELP_USING_WITHDRAW_ITEM, 
-    HELP_USING_DEPOSIT_ITEM,
-    HELP_USING_MAILBOX, 
-    HELP_USING_PROF_OAKS_PC, 
-    HELP_USING_HALL_OF_FAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_PCMisc[] = {
-    HELP_USING_PC, 
-    HELP_USING_BILLS_PC, 
-    HELP_USING_WITHDRAW, 
-    HELP_USING_DEPOSIT, 
-    HELP_USING_MOVE, 
-    HELP_MOVING_ITEMS, 
-    HELP_USING_PLAYERS_PC, 
-    HELP_USING_WITHDRAW_ITEM, 
-    HELP_USING_DEPOSIT_ITEM,
-    HELP_USING_MAILBOX, 
-    HELP_USING_PROF_OAKS_PC, 
-    HELP_USING_HALL_OF_FAME, 
-    HELP_END
-};
-
-static const u8 sHowTo_BedroomPC[] = {
-    HELP_USING_HOME_PC, 
-    HELP_USING_ITEM_STORAGE, 
-    HELP_USING_WITHDRAW_ITEM2, 
-    HELP_USING_DEPOSIT_ITEM2, 
-    HELP_USING_MAILBOX2, 
-    HELP_END
-};
-
-static const u8 sHowTo_BedroomPCItems[] = {
-    HELP_USING_HOME_PC, 
-    HELP_USING_ITEM_STORAGE, 
-    HELP_USING_WITHDRAW_ITEM2, 
-    HELP_USING_DEPOSIT_ITEM2, 
-    HELP_USING_MAILBOX2, 
-    HELP_END
-};
-
-static const u8 sHowTo_BedroomPCMailbox[] = {
-    HELP_USING_HOME_PC, 
-    HELP_USING_ITEM_STORAGE, 
-    HELP_USING_WITHDRAW_ITEM2, 
-    HELP_USING_DEPOSIT_ITEM2, 
-    HELP_USING_MAILBOX2, 
-    HELP_END
-};
-
-static const u8 sTerms_Basic[] = {
-    HELP_TERM_LEVEL, 
-    HELP_TERM_HP, 
-    HELP_TERM_EXP, 
-    HELP_TERM_MOVES, 
-    HELP_TERM_TM, 
-    HELP_TERM_HM_MOVE, 
-    HELP_TERM_HM, 
-    HELP_TERM_ATTACK, 
-    HELP_TERM_DEFENSE, 
-    HELP_TERM_SPATK, 
-    HELP_TERM_SPDEF, 
-    HELP_TERM_SPEED, 
-    HELP_TERM_TYPE, 
-    HELP_TERM_OT, 
-    HELP_TERM_ITEM, 
-    HELP_TERM_ABILITY, 
-    HELP_TERM_MOVE_TYPE, 
-    HELP_TERM_NATURE, 
-    HELP_TERM_ID_NO, 
-    HELP_TERM_PP, 
-    HELP_TERM_POWER, 
-    HELP_TERM_ACCURACY, 
-    HELP_TERM_STATUS_PROBLEM, 
-    HELP_TERM_FNT, 
-    HELP_TERM_EVOLUTION, 
-    HELP_TERM_ITEMS, 
-    HELP_TERM_KEYITEMS, 
-    HELP_TERM_POKEBALLS, 
-    HELP_TERM_PLAY_TIME, 
-    HELP_TERM_MONEY, 
-    HELP_TERM_BADGES, 
-    HELP_END
-};
-
-
-// Cant get this to match as a 2D array but it probably should be one, [HELPCONTEXT_COUNT][TOPIC_COUNT - 1] (Excludes TOPIC_EXIT)
-static const u8 *const sHelpSystemSubmenuItemLists[HELPCONTEXT_COUNT * (TOPIC_COUNT - 1)] = {
-    NULL,                          NULL,                       NULL,                       NULL,                    NULL, // HELPCONTEXT_NONE
-    NULL,                          NULL,                       NULL,                       sAboutGame_TitleScreen,  NULL, // HELPCONTEXT_TITLE_SCREEN
-    NULL,                          NULL,                       NULL,                       sAboutGame_NewGame,      NULL, // HELPCONTEXT_NEW_GAME
-    NULL,                          sHowTo_NamingScreen,        NULL,                       sAboutGame_NamingScreen, NULL, // HELPCONTEXT_NAMING_SCREEN
-    NULL,                          sHowTo_Pokedex,             NULL,                       NULL,                    NULL, // HELPCONTEXT_POKEDEX
-    NULL,                          sHowTo_PartyMenu,           sTerms_PartyMenu,           NULL,                    NULL, // HELPCONTEXT_PARTY_MENU
-    NULL,                          sHowTo_PokemonInfo,         sTerms_PokemonInfo,         NULL,                    NULL, // HELPCONTEXT_POKEMON_INFO
-    NULL,                          NULL,                       sTerms_PokemonSkills,       NULL,                    NULL, // HELPCONTEXT_POKEMON_SKILLS
-    NULL,                          NULL,                       sTerms_PokemonMoves,        NULL,                    NULL, // HELPCONTEXT_POKEMON_MOVES
-    NULL,                          sHowTo_Bag,                 sTerms_Bag,                 NULL,                    NULL, // HELPCONTEXT_BAG
-    NULL,                          sHowTo_TrainerCardFront,    sTerms_TrainerCardFront,    NULL,                    NULL, // HELPCONTEXT_TRAINER_CARD_FRONT
-    NULL,                          sHowTo_TrainerCardBack,     NULL,                       NULL,                    NULL, // HELPCONTEXT_TRAINER_CARD_BACK
-    NULL,                          sHowTo_Save,                sTerms_Save,                NULL,                    NULL, // HELPCONTEXT_SAVE
-    NULL,                          sHowTo_Options,             sTerms_Options,             NULL,                    NULL, // HELPCONTEXT_OPTIONS
-    sWhatToDo_PlayersHouse,        NULL,                       NULL,                       sAboutGame_PlayersHouse, NULL, // HELPCONTEXT_PLAYERS_HOUSE
-    sWhatToDo_OaksLab,             sHowTo_OaksLab,             sTerms_OaksLab,             NULL,                    NULL, // HELPCONTEXT_OAKS_LAB
-    sWhatToDo_PokeCenter,          sHowTo_PokeCenter,          sTerms_PokeCenter,          sAboutGame_PokeCenter,   NULL, // HELPCONTEXT_POKECENTER
-    sWhatToDo_Mart,                sHowTo_Mart,                sTerms_Mart,                NULL,                    NULL, // HELPCONTEXT_MART
-    sWhatToDo_Gym,                 sHowTo_Gym,                 sTerms_Gym,                 NULL,                    sTypeMatchups_Gym, // HELPCONTEXT_GYM
-    sWhatToDo_Indoors,             sHowTo_Indoors,             sTerms_Indoors,             NULL,                    NULL, // HELPCONTEXT_INDOORS
-    sWhatToDo_Overworld,           sHowTo_Overworld,           sTerms_Overworld,           NULL,                    NULL, // HELPCONTEXT_OVERWORLD
-    sWhatToDo_Dungeon,             sHowTo_Dungeon,             sTerms_Dungeon,             NULL,                    NULL, // HELPCONTEXT_DUNGEON
-    sWhatToDo_Surfing,             sHowTo_Surfing,             sTerms_Surfing,             NULL,                    NULL, // HELPCONTEXT_SURFING
-    sWhatToDo_WildBattle,          sHowTo_WildBattle,          sTerms_WildBattle,          NULL,                    sTypeMatchups_WildBattle, // HELPCONTEXT_WILD_BATTLE
-    sWhatToDo_TrainerBattleSingle, sHowTo_TrainerBattleSingle, sTerms_TrainerBattleSingle, NULL,                    sTypeMatchups_TrainerBattleSingle, // HELPCONTEXT_TRAINER_BATTLE_SINGLE
-    sWhatToDo_TrainerBattleDouble, sHowTo_TrainerBattleDouble, sTerms_TrainerBattleDouble, NULL,                    sTypeMatchups_TrainerBattleDouble, // HELPCONTEXT_TRAINER_BATTLE_DOUBLE
-    sWhatToDo_SafariBattle,        sHowTo_SafariBattle,        sTerms_SafariBattle,        NULL,                    sTypeMatchups_SafariBattle, // HELPCONTEXT_SAFARI_BATTLE
-    NULL,                          sHowTo_PC,                  NULL,                       NULL,                    NULL, // HELPCONTEXT_PC
-    NULL,                          sHowTo_BillsPC,             NULL,                       NULL,                    NULL, // HELPCONTEXT_BILLS_PC
-    NULL,                          sHowTo_PlayersPCItems,      NULL,                       NULL,                    NULL, // HELPCONTEXT_PLAYERS_PC_ITEMS
-    NULL,                          sHowTo_PlayersPCMailbox,    NULL,                       NULL,                    NULL, // HELPCONTEXT_PLAYERS_PC_MAILBOX
-    NULL,                          sHowTo_PCMisc,              NULL,                       NULL,                    NULL, // HELPCONTEXT_PC_MISC
-    NULL,                          sHowTo_BedroomPC,           NULL,                       NULL,                    NULL, // HELPCONTEXT_BEDROOM_PC
-    NULL,                          sHowTo_BedroomPCItems,      NULL,                       NULL,                    NULL, // HELPCONTEXT_BEDROOM_PC_ITEMS
-    NULL,                          sHowTo_BedroomPCMailbox,    NULL,                       NULL,                    NULL, // HELPCONTEXT_BEDROOM_PC_MAILBOX
-    NULL,                          NULL,                       NULL,                       NULL,                    NULL  // HELPCONTEXT_UNUSED
-};
-
-static const u16 sUnused[] = INCBIN_U16("graphics/help_system/unused.bin");
-
-static const u8 sHelpSystemContextTopicOrder[TOPIC_COUNT] = {
-    TOPIC_ABOUT_GAME, 
-    TOPIC_WHAT_TO_DO, 
-    TOPIC_HOW_TO_DO, 
-    TOPIC_TERMS, 
-    TOPIC_TYPE_MATCHUP, 
-    TOPIC_EXIT
-};
-
-#define CONTEXT_TOPIC_FLAGS(whatToDo, howToDo, terms, aboutGame, typeMatchup, exit)     \
-    {                                                                                   \
-        [TOPIC_WHAT_TO_DO]   = whatToDo,                                                \
-        [TOPIC_HOW_TO_DO]    = howToDo,                                                 \
-        [TOPIC_TERMS]        = terms,                                                   \
-        [TOPIC_ABOUT_GAME]   = aboutGame,                                               \
-        [TOPIC_TYPE_MATCHUP] = typeMatchup,                                             \
-        [TOPIC_EXIT]         = exit                                                     \
-    }                                                                                   \
-
-static const bool8 sHelpSystemContextTopicFlags[HELPCONTEXT_COUNT + 1][TOPIC_COUNT] = {
-    [HELPCONTEXT_NONE]                  = CONTEXT_TOPIC_FLAGS(FALSE, FALSE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_TITLE_SCREEN]          = CONTEXT_TOPIC_FLAGS(FALSE, FALSE, FALSE,  TRUE, FALSE,  TRUE),
-    [HELPCONTEXT_NEW_GAME]              = CONTEXT_TOPIC_FLAGS(FALSE, FALSE, FALSE,  TRUE, FALSE,  TRUE),
-    [HELPCONTEXT_NAMING_SCREEN]         = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE,  TRUE, FALSE,  TRUE),
-    [HELPCONTEXT_POKEDEX]               = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_PARTY_MENU]            = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_POKEMON_INFO]          = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_POKEMON_SKILLS]        = CONTEXT_TOPIC_FLAGS(FALSE, FALSE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_POKEMON_MOVES]         = CONTEXT_TOPIC_FLAGS(FALSE, FALSE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_BAG]                   = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_TRAINER_CARD_FRONT]    = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_TRAINER_CARD_BACK]     = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_SAVE]                  = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_OPTIONS]               = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_PLAYERS_HOUSE]         = CONTEXT_TOPIC_FLAGS( TRUE, FALSE, FALSE,  TRUE, FALSE,  TRUE),
-    [HELPCONTEXT_OAKS_LAB]              = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_POKECENTER]            = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE,  TRUE, FALSE,  TRUE),
-    [HELPCONTEXT_MART]                  = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_GYM]                   = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE),
-    [HELPCONTEXT_INDOORS]               = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_OVERWORLD]             = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_DUNGEON]               = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_SURFING]               = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_WILD_BATTLE]           = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE),
-    [HELPCONTEXT_TRAINER_BATTLE_SINGLE] = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE),
-    [HELPCONTEXT_TRAINER_BATTLE_DOUBLE] = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE),
-    [HELPCONTEXT_SAFARI_BATTLE]         = CONTEXT_TOPIC_FLAGS( TRUE,  TRUE,  TRUE, FALSE,  TRUE,  TRUE),
-    [HELPCONTEXT_PC]                    = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_BILLS_PC]              = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_PLAYERS_PC_ITEMS]      = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_PLAYERS_PC_MAILBOX]    = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_PC_MISC]               = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_BEDROOM_PC]            = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_BEDROOM_PC_ITEMS]      = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_BEDROOM_PC_MAILBOX]    = CONTEXT_TOPIC_FLAGS(FALSE,  TRUE, FALSE, FALSE, FALSE,  TRUE),
-    [HELPCONTEXT_UNUSED]                = {},
-    [HELPCONTEXT_COUNT]                 = {}
-};
-
-static const u16 sMartMaps[] = {
-    MAP_VIRIDIAN_CITY_MART,
-    MAP_PEWTER_CITY_MART,
-    MAP_CERULEAN_CITY_MART,
-    MAP_LAVENDER_TOWN_MART,
-    MAP_VERMILION_CITY_MART,
-    MAP_CELADON_CITY_DEPARTMENT_STORE_1F,
-    MAP_CELADON_CITY_DEPARTMENT_STORE_2F,
-    MAP_CELADON_CITY_DEPARTMENT_STORE_3F,
-    MAP_CELADON_CITY_DEPARTMENT_STORE_4F,
-    MAP_CELADON_CITY_DEPARTMENT_STORE_5F,
-    MAP_CELADON_CITY_DEPARTMENT_STORE_ROOF,
-    MAP_CELADON_CITY_DEPARTMENT_STORE_ELEVATOR,
-    MAP_FUCHSIA_CITY_MART,
-    MAP_CINNABAR_ISLAND_MART,
-    MAP_SAFFRON_CITY_MART,
-    MAP_THREE_ISLAND_MART,
-    MAP_FOUR_ISLAND_MART,
-    MAP_SEVEN_ISLAND_MART,
-    MAP_SIX_ISLAND_MART,
-    MAP_UNDEFINED
-};
-
-static const u16 sGymMaps[] = {
-    MAP_PEWTER_CITY_GYM,
-    MAP_CERULEAN_CITY_GYM,
-    MAP_VERMILION_CITY_GYM,
-    MAP_CELADON_CITY_GYM,
-    MAP_FUCHSIA_CITY_GYM,
-    MAP_SAFFRON_CITY_GYM,
-    MAP_CINNABAR_ISLAND_GYM,
-    MAP_VIRIDIAN_CITY_GYM,
-    MAP_UNDEFINED
-};
-
-static const u8 sDungeonMaps[][3] = {
-    { MAP_GROUP(VIRIDIAN_FOREST), MAP_NUM(VIRIDIAN_FOREST), 1 },
-    { MAP_GROUP(MT_MOON_1F), MAP_NUM(MT_MOON_1F), 3 },
-    { MAP_GROUP(ROCK_TUNNEL_1F), MAP_NUM(ROCK_TUNNEL_1F), 2 },
-    { MAP_GROUP(DIGLETTS_CAVE_NORTH_ENTRANCE), MAP_NUM(DIGLETTS_CAVE_NORTH_ENTRANCE), 3 },
-    { MAP_GROUP(SEAFOAM_ISLANDS_1F), MAP_NUM(SEAFOAM_ISLANDS_1F), 5 },
-    { MAP_GROUP(VICTORY_ROAD_1F), MAP_NUM(VICTORY_ROAD_1F), 3 },
-    { MAP_GROUP(CERULEAN_CAVE_1F), MAP_NUM(CERULEAN_CAVE_1F), 3 },
-    { MAP_GROUP(MT_EMBER_RUBY_PATH_B4F), MAP_NUM(MT_EMBER_RUBY_PATH_B4F), 1 },
-    { MAP_GROUP(MT_EMBER_SUMMIT_PATH_1F), MAP_NUM(MT_EMBER_SUMMIT_PATH_1F), 3 },
-    { MAP_GROUP(MT_EMBER_RUBY_PATH_B5F), MAP_NUM(MT_EMBER_RUBY_PATH_B5F), 7 },
-    { MAP_GROUP(THREE_ISLAND_BERRY_FOREST), MAP_NUM(THREE_ISLAND_BERRY_FOREST), 1 },
-    { MAP_GROUP(SIX_ISLAND_PATTERN_BUSH), MAP_NUM(SIX_ISLAND_PATTERN_BUSH), 1 },
-    { MAP_GROUP(FIVE_ISLAND_LOST_CAVE_ENTRANCE), MAP_NUM(FIVE_ISLAND_LOST_CAVE_ENTRANCE), 15 },
-    { MAP_GROUP(FOUR_ISLAND_ICEFALL_CAVE_ENTRANCE), MAP_NUM(FOUR_ISLAND_ICEFALL_CAVE_ENTRANCE), 4 },
-    { MAP_GROUP(SIX_ISLAND_ALTERING_CAVE), MAP_NUM(SIX_ISLAND_ALTERING_CAVE), 1 },
-    { MAP_GROUP(SEVEN_ISLAND_TANOBY_RUINS_MONEAN_CHAMBER), MAP_NUM(SEVEN_ISLAND_TANOBY_RUINS_MONEAN_CHAMBER), 7 }
-};
-
-void SetHelpContextDontCheckBattle(u8 contextId)
-{
-    sHelpSystemContextId = contextId;
-}
-
-void SetHelpContext(u8 contextId)
-{
-    switch (sHelpSystemContextId)
-    {
-    case HELPCONTEXT_WILD_BATTLE:
-    case HELPCONTEXT_TRAINER_BATTLE_SINGLE:
-    case HELPCONTEXT_TRAINER_BATTLE_DOUBLE:
-    case HELPCONTEXT_SAFARI_BATTLE:
-        if (contextId == HELPCONTEXT_BAG 
-         || contextId == HELPCONTEXT_PARTY_MENU 
-         || contextId == HELPCONTEXT_POKEMON_INFO 
-         || contextId == HELPCONTEXT_POKEMON_SKILLS 
-         || contextId == HELPCONTEXT_POKEMON_MOVES)
-            break;
-        // fallthrough
-    default:
-        sHelpSystemContextId = contextId;
-        break;
-    }
-}
-
-void Script_SetHelpContext(void)
-{
-    sHelpSystemContextId = gSpecialVar_0x8004;
-}
-
-void BackupHelpContext(void)
-{
-    gHelpContextIdBackup = sHelpSystemContextId;
-}
-
-void RestoreHelpContext(void)
-{
-    sHelpSystemContextId = gHelpContextIdBackup;
-}
-
-static bool32 IsInMartMap(void)
-{
-    return IsCurrentMapInArray(sMartMaps);
-}
-
-static bool32 IsInGymMap(void)
-{
-    return IsCurrentMapInArray(sGymMaps);
-}
-
-static bool32 IsCurrentMapInArray(const u16 * mapIdxs)
-{
-    u16 mapIdx = (gSaveBlock1Ptr->location.mapGroup << 8) + gSaveBlock1Ptr->location.mapNum;
-    s32 i;
-
-    for (i = 0; mapIdxs[i] != MAP_UNDEFINED; i++)
-    {
-        if (mapIdxs[i] == mapIdx)
-            return TRUE;
-    }
-
-    return FALSE;
-}
-
-static bool8 IsInDungeonMap(void)
-{
-    u8 i, j;
-
-    for (i = 0; i < NELEMS(sDungeonMaps); i++)
-    {
-        for (j = 0; j < sDungeonMaps[i][2]; j++)
-        {
-            if (
-                   sDungeonMaps[i][0] == gSaveBlock1Ptr->location.mapGroup
-                && sDungeonMaps[i][1] + j == gSaveBlock1Ptr->location.mapNum
-                && (i != 15 /* TANOBY */ || FlagGet(FLAG_SYS_UNLOCKED_TANOBY_RUINS) == TRUE)
-            )
-                return TRUE;
-        }
-    }
-
-    return FALSE;
-}
-
-#define IN_PLAYERS_HOUSE \
-    ((gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(PALLET_TOWN_PLAYERS_HOUSE_1F) \
-  && gSaveBlock1Ptr->location.mapNum == MAP_NUM(PALLET_TOWN_PLAYERS_HOUSE_1F))     \
- || (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(PALLET_TOWN_PLAYERS_HOUSE_2F)  \
-  && gSaveBlock1Ptr->location.mapNum == MAP_NUM(PALLET_TOWN_PLAYERS_HOUSE_2F)))    \
-
- #define IN_OAKS_LAB \
-    (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(PALLET_TOWN_PROFESSOR_OAKS_LAB) \
-  && gSaveBlock1Ptr->location.mapNum == MAP_NUM(PALLET_TOWN_PROFESSOR_OAKS_LAB))    \
-
-void SetHelpContextForMap(void)
-{
-    HelpSystem_EnableToggleWithRButton();
-    if (TestPlayerAvatarFlags(PLAYER_AVATAR_FLAG_SURFING))
-        SetHelpContext(HELPCONTEXT_SURFING);
-    else if (IsInDungeonMap())
-        SetHelpContext(HELPCONTEXT_DUNGEON);
-    else if (IsMapTypeIndoors(gMapHeader.mapType))
-    {
-        if (IN_PLAYERS_HOUSE)
-            SetHelpContext(HELPCONTEXT_PLAYERS_HOUSE);
-        else if (IN_OAKS_LAB)
-            SetHelpContext(HELPCONTEXT_OAKS_LAB);
-        else if (IsCurMapPokeCenter() == TRUE)
-            SetHelpContext(HELPCONTEXT_POKECENTER);
-        else if (IsInMartMap() == TRUE)
-            SetHelpContext(HELPCONTEXT_MART);
-        else if (IsInGymMap() == TRUE)
-            SetHelpContext(HELPCONTEXT_GYM);
-        else
-            SetHelpContext(HELPCONTEXT_INDOORS);
-    }
-    else
-        SetHelpContext(HELPCONTEXT_OVERWORLD);
-}
-
-bool8 HelpSystem_UpdateHasntSeenIntro(void)
-{
-    if (sSeenHelpSystemIntro == TRUE)
-        return FALSE;
-
-    if (gSaveFileStatus != SAVE_STATUS_EMPTY && gSaveFileStatus != SAVE_STATUS_INVALID && FlagGet(FLAG_SYS_SAW_HELP_SYSTEM_INTRO))
-        return FALSE;
-
-    FlagSet(FLAG_SYS_SAW_HELP_SYSTEM_INTRO);
-    sSeenHelpSystemIntro = TRUE;
-    return TRUE;
-}
-
-bool8 HelpSystem_IsSinglePlayer(void)
-{
-    if (gReceivedRemoteLinkPlayers == TRUE)
-        return FALSE;
-    return TRUE;
-}
-
-void HelpSystem_Disable(void)
-{
-    gHelpSystemEnabled = FALSE;
-}
-
-void HelpSystem_Enable(void)
-{
-    if (!QL_IS_PLAYBACK_STATE)
-    {
-        gHelpSystemEnabled = TRUE;
-        HelpSystem_EnableToggleWithRButton();
-    }
-}
-
-void HelpSystem_DisableToggleWithRButton(void)
-{
-    gHelpSystemToggleWithRButtonDisabled = TRUE;
-}
-
-void HelpSystem_EnableToggleWithRButton(void)
-{
-    gHelpSystemToggleWithRButtonDisabled = FALSE;
-}
-
-static void ResetHelpSystemListMenu(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    helpListMenu->sub.items = listMenuItemsBuffer;
-    helpListMenu->sub.totalItems = 1;
-    helpListMenu->sub.maxShowed = 1;
-    helpListMenu->sub.left = 1;
-    helpListMenu->sub.top = 4;
-}
-
-static void BuildAndPrintMainTopicsListMenu(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    ResetHelpSystemListMenu(helpListMenu, listMenuItemsBuffer);
-    BuildMainTopicsListAndMoveToH00(helpListMenu, listMenuItemsBuffer);
-    PrintTextOnPanel2Row52RightAlign(gText_HelpSystemControls_PickOkEnd);
-    HelpSystem_InitListMenuController(helpListMenu, 0, gHelpSystemState.scrollMain);
-    PrintHelpSystemTopicMouseoverDescription(helpListMenu, listMenuItemsBuffer);
-    HS_ShowOrHideMainWindowText(1);
-    HS_ShowOrHideControlsGuideInTopRight(1);
-}
-
-static void BuildMainTopicsListAndMoveToH00(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    u8 i;
-    u8 totalItems = 0;
-    for (i = 0; i < TOPIC_COUNT; i++)
-    {
-        if (sHelpSystemContextTopicFlags[sHelpSystemContextId][sHelpSystemContextTopicOrder[i]] == TRUE)
-        {
-            listMenuItemsBuffer[totalItems].label = sHelpSystemTopicPtrs[sHelpSystemContextTopicOrder[i]];
-            listMenuItemsBuffer[totalItems].index = sHelpSystemContextTopicOrder[i];
-            totalItems++;
-        }
-    }
-    listMenuItemsBuffer[totalItems - 1].index = -2;
-    helpListMenu->sub.totalItems = totalItems;
-    helpListMenu->sub.maxShowed = totalItems;
-    helpListMenu->sub.left = 0;
-}
-
-static void BuildAndPrintSubmenuList(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    HS_SetMainWindowBgBrightness(0);
-    HS_ShowOrHideHeaderLine_Darker_FooterStyle(0);
-    HS_ShowOrHideHeaderAndFooterLines_Lighter(1);
-    ResetHelpSystemListMenu(helpListMenu, listMenuItemsBuffer);
-    SetHelpSystemSubmenuItems(helpListMenu, listMenuItemsBuffer);
-    PrintTextOnPanel2Row52RightAlign(gText_HelpSystemControls_PickOkCancel);
-    HelpSystem_InitListMenuController(helpListMenu, helpListMenu->itemsAbove, helpListMenu->cursorPos);
-    HelpSystem_PrintTextAt(sHelpSystemTopicPtrs[gHelpSystemState.topic], 0, 0);
-    HS_ShowOrHideMainWindowText(1);
-    HS_ShowOrHideControlsGuideInTopRight(1);
-}
-
-static void SetHelpSystemSubmenuItems(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    u8 totalItems = 0;
-    const u8 * submenuItems = sHelpSystemSubmenuItemLists[sHelpSystemContextId * 5 + gHelpSystemState.topic]; // accessing as 2D array
-    u8 i;
-    for (i = 0; submenuItems[i] != HELP_END; i++)
-    {
-        if (IsHelpSystemSubmenuEnabled(submenuItems[i]) == TRUE)
-        {
-            if (gHelpSystemState.topic == TOPIC_WHAT_TO_DO)
-                listMenuItemsBuffer[totalItems].label = sHelpSystemSpecializedQuestionTextPtrs[submenuItems[i]];
-            else if (gHelpSystemState.topic == TOPIC_HOW_TO_DO)
-                listMenuItemsBuffer[totalItems].label = sHelpSystemMenuTopicTextPtrs[submenuItems[i]];
-            else if (gHelpSystemState.topic == TOPIC_TERMS)
-                listMenuItemsBuffer[totalItems].label = sHelpSystemTermTextPtrs[submenuItems[i]];
-            else if (gHelpSystemState.topic == TOPIC_ABOUT_GAME)
-                listMenuItemsBuffer[totalItems].label = sHelpSystemGeneralTopicTextPtrs[submenuItems[i]];
-            else // TOPIC_TYPE_MATCHUP
-                listMenuItemsBuffer[totalItems].label = sHelpSystemTypeMatchupTextPtrs[submenuItems[i]];
-            listMenuItemsBuffer[totalItems].index = submenuItems[i];
-            totalItems++;
-        }
-    }
-    if (HelpSystem_ShouldShowBasicTerms() == TRUE)
-    {
-        for (i = 0, submenuItems = sTerms_Basic; submenuItems[i] != HELP_END; i++)
-        {
-            listMenuItemsBuffer[totalItems].label = sHelpSystemTermTextPtrs[submenuItems[i]];
-            listMenuItemsBuffer[totalItems].index = submenuItems[i];
-            totalItems++;
-        }
-    }
-    listMenuItemsBuffer[totalItems].label = Help_Text_Cancel;
-    listMenuItemsBuffer[totalItems].index = -2;
-    totalItems++;
-    helpListMenu->sub.totalItems = totalItems;
-    helpListMenu->sub.maxShowed = 7;
-    helpListMenu->sub.left = 0;
-    helpListMenu->sub.top = 21;
-}
-
-static bool8 HelpSystem_ShouldShowBasicTerms(void)
-{
-    if (FlagGet(FLAG_DEFEATED_BROCK) == TRUE && gHelpSystemState.topic == TOPIC_TERMS)
-        return TRUE;
-    return FALSE;
-}
-
-static bool8 IsHelpSystemSubmenuEnabled(u8 id)
-{
-    u8 i = 0;
-
-    if (gHelpSystemState.topic == TOPIC_WHAT_TO_DO)
-    {
-        switch (id)
-        {
-        case HELP_PLAYING_FOR_FIRST_TIME:
-        case HELP_WHAT_SHOULD_I_BE_DOING:
-        case HELP_CANT_GET_OUT_OF_ROOM:
-        case HELP_TALKED_TO_EVERYONE_NOW_WHAT:
-        case HELP_OUT_OF_THINGS_TO_DO:
-        case HELP_NOTHING_I_WANT_TO_KNOW:
-        case HELP_WHATS_A_MON:
-        case HELP_WHAT_DO_I_DO_IN_SAFARI:
-        case HELP_WHAT_ARE_SAFARI_RULES:
-        case HELP_WANT_TO_END_SAFARI:
-            return TRUE;
-        case HELP_CANT_FIND_PERSON_I_WANT:
-            return FlagGet(FLAG_VISITED_OAKS_LAB);
-        case HELP_SOMEONE_BLOCKING_MY_WAY:
-        case HELP_WHAT_ARE_MY_ADVENTURE_BASICS:
-        case HELP_HOW_DO_I_PREPARE_FOR_BATTLE:
-        case HELP_WHAT_IS_STATUS_PROBLEM:
-        case HELP_RAN_OUT_OF_POTIONS:
-        case HELP_WHATS_POKEMON_CENTER:
-        case HELP_WHATS_POKEMON_MART:
-            return FlagGet(FLAG_WORLD_MAP_VIRIDIAN_CITY);
-        case HELP_I_CANT_GO_ON:
-            return FlagGet(FLAG_WORLD_MAP_VERMILION_CITY);
-        case HELP_HOW_ARE_ROADS_FORESTS_DIFFERENT:
-        case HELP_WHATS_A_TRAINER:
-            return FlagGet(FLAG_WORLD_MAP_VIRIDIAN_FOREST);
-        case HELP_WHAT_HAPPENED_TO_ITEM_I_GOT:
-        case HELP_WHEN_CAN_I_USE_ITEM:
-        case HELP_HOW_DO_I_PROGRESS:
-        case HELP_WHATS_A_BATTLE:
-        case HELP_WHAT_IS_A_MONS_VITALITY:
-        case HELP_MY_MONS_ARE_HURT:
-        case HELP_WHAT_HAPPENS_IF_ALL_MY_MONS_FAINT:
-        case HELP_WHERE_DO_MONS_APPEAR:
-        case HELP_WHAT_MOVES_SHOULD_I_USE:
-        case HELP_WANT_TO_MAKE_MON_STRONGER:
-        case HELP_WANT_TO_END_GAME:
-            return FlagGet(FLAG_SYS_POKEMON_GET);
-        case HELP_CANT_CATCH_MONS:
-        case HELP_CAN_I_BUY_POKEBALLS:
-            return FlagGet(FLAG_SYS_POKEDEX_GET);
-        case HELP_HOW_ARE_CAVES_DIFFERENT:
-        case HELP_WHAT_DO_I_DO_IN_CAVE:
-        case HELP_HOW_DO_I_WIN_AGAINST_TRAINER:
-        case HELP_FOE_MONS_TOO_STRONG:
-        case HELP_WHAT_ARE_MOVES:
-        case HELP_WANT_TO_ADD_MORE_MOVES:
-            return FlagGet(FLAG_BADGE01_GET);
-        case HELP_WHAT_ARE_HIDDEN_MOVES:
-        case HELP_WHAT_DOES_HIDDEN_MOVE_DO:
-            return HasGottenAtLeastOneHM();
-        case HELP_WHAT_IS_THAT_PERSON_LIKE:
-            return FlagGet(FLAG_GOT_FAME_CHECKER);
-        case HELP_WHAT_IS_A_GYM:
-            return FlagGet(FLAG_WORLD_MAP_PEWTER_CITY);
-        }
-        return FALSE;
-    }
-    if (gHelpSystemState.topic == TOPIC_HOW_TO_DO)
-    {
-        switch (id)
-        {
-        case HELP_USING_BAG:
-        case HELP_USING_PLAYER:
-        case HELP_USING_SAVE:
-        case HELP_USING_OPTION:
-        case HELP_ENTERING_NAME:
-        case HELP_USING_PC:
-        case HELP_USING_BILLS_PC:
-        case HELP_USING_WITHDRAW:
-        case HELP_USING_DEPOSIT:
-        case HELP_USING_MOVE:
-        case HELP_MOVING_ITEMS:
-        case HELP_USING_PLAYERS_PC:
-        case HELP_USING_WITHDRAW_ITEM:
-        case HELP_USING_DEPOSIT_ITEM:
-        case HELP_USING_MAILBOX:
-        case HELP_OPENING_MENU:
-        case HELP_USING_BAG2:
-        case HELP_USING_HOME_PC:
-        case HELP_USING_ITEM_STORAGE:
-        case HELP_USING_WITHDRAW_ITEM2:
-        case HELP_USING_DEPOSIT_ITEM2:
-        case HELP_USING_MAILBOX2:
-        case HELP_USING_BALL:
-        case HELP_USING_BAIT:
-        case HELP_USING_ROCK:
-            return TRUE;
-        case HELP_USING_POKEDEX:
-        case HELP_USING_PROF_OAKS_PC:
-        case HELP_READING_POKEDEX:
-            return FlagGet(FLAG_SYS_POKEDEX_GET);
-        case HELP_USING_TOWN_MAP:
-            return CheckBagHasItem(ITEM_TOWN_MAP, 1);
-        case HELP_USING_POKEMON:
-        case HELP_USING_SUMMARY:
-        case HELP_USING_ITEM:
-        case HELP_USING_AN_ITEM:
-        case HELP_USING_KEYITEM:
-        case HELP_USING_POKEBALL:
-        case HELP_USING_POTION:
-        case HELP_USING_FIGHT:
-        case HELP_USING_POKEMON2:
-        case HELP_USING_SUMMARY2:
-        case HELP_USING_RUN:
-        case HELP_REGISTER_KEY_ITEM:
-            return FlagGet(FLAG_SYS_POKEMON_GET);
-        case HELP_USING_SWITCH:
-        case HELP_USING_SHIFT:
-            // Only show if player has caught mon after starter
-            if (GetKantoPokedexCount(1) > 1)
-                return TRUE;
-            return FALSE;
-        case HELP_USING_TM:
-            return FlagGet(FLAG_BADGE01_GET);
-        case HELP_USING_HM:
-        case HELP_USING_MOVE_OUTSIDE_OF_BATTLE:
-            return HasGottenAtLeastOneHM();
-        case HELP_RIDING_BICYCLE:
-            return FlagGet(FLAG_GOT_BICYCLE);
-        case HELP_USING_HALL_OF_FAME:
-            return FlagGet(FLAG_SYS_GAME_CLEAR);
-        }
-        return FALSE;
-    }
-    if (gHelpSystemState.topic == TOPIC_TERMS)
-    {
-        if (HelpSystem_ShouldShowBasicTerms() == TRUE)
-        {
-            // After defeating Brock, all basic terms are added
-            // This checks to make sure they arent added twice
-            for (i = 0; sTerms_Basic[i] != HELP_END; i++)
-            {
-                if (sTerms_Basic[i] == id)
-                    return FALSE;
-            }
-        }
-        switch (id)
-        {
-        case HELP_TERM_MONEY:
-        case HELP_TERM_ID_NO:
-        case HELP_TERM_ITEMS:
-        case HELP_TERM_KEYITEMS:
-        case HELP_TERM_POKEBALLS:
-        case HELP_TERM_POKEDEX:
-        case HELP_TERM_PLAY_TIME:
-        case HELP_TERM_BADGES:
-        case HELP_TERM_TEXT_SPEED:
-        case HELP_TERM_BATTLE_SCENE:
-        case HELP_TERM_BATTLE_STYLE:
-        case HELP_TERM_SOUND:
-        case HELP_TERM_BUTTON_MODE:
-        case HELP_TERM_FRAME:
-        case HELP_TERM_CANCEL:
-        case HELP_TERM_TM:
-        case HELP_TERM_EVOLUTION:
-            return TRUE;
-        case HELP_TERM_HP:
-        case HELP_TERM_EXP:
-        case HELP_TERM_ATTACK:
-        case HELP_TERM_DEFENSE:
-        case HELP_TERM_SPATK:
-        case HELP_TERM_SPDEF:
-        case HELP_TERM_SPEED:
-        case HELP_TERM_LEVEL:
-        case HELP_TERM_TYPE:
-        case HELP_TERM_OT:
-        case HELP_TERM_ITEM:
-        case HELP_TERM_ABILITY:
-        case HELP_TERM_NATURE:
-        case HELP_TERM_POWER:
-        case HELP_TERM_ACCURACY:
-        case HELP_TERM_FNT:
-            return FlagGet(FLAG_SYS_POKEMON_GET);
-        case HELP_TERM_HM:
-        case HELP_TERM_HM_MOVE:
-            return HasGottenAtLeastOneHM();
-        case HELP_TERM_MOVES:
-        case HELP_TERM_MOVE_TYPE:
-        case HELP_TERM_PP:
-        case HELP_TERM_STATUS_PROBLEM:
-            return FlagGet(FLAG_WORLD_MAP_VIRIDIAN_FOREST);
-        }
-        return TRUE;
-    }
-    if (gHelpSystemState.topic == TOPIC_ABOUT_GAME)
-    {
-        switch (id)
-        {
-        case HELP_GAME_FUNDAMENTALS_2:
-            return FlagGet(FLAG_BADGE01_GET);
-        case HELP_GAME_FUNDAMENTALS_3:
-            return FlagGet(FLAG_BADGE02_GET);
-        }
-        return TRUE;
-    }
-    if (gHelpSystemState.topic == TOPIC_TYPE_MATCHUP)
-    {
-        return TRUE;
-    }
-
-    return FALSE;
-}
-
-static bool8 HasGottenAtLeastOneHM(void)
-{
-    if (FlagGet(FLAG_GOT_HM01) == TRUE)
-        return TRUE;
-    if (FlagGet(FLAG_GOT_HM02) == TRUE)
-        return TRUE;
-    if (FlagGet(FLAG_GOT_HM03) == TRUE)
-        return TRUE;
-    if (FlagGet(FLAG_GOT_HM04) == TRUE)
-        return TRUE;
-    if (FlagGet(FLAG_GOT_HM05) == TRUE)
-        return TRUE;
-    if (FlagGet(FLAG_GOT_HM06) == TRUE)
-        return TRUE;
-    if (FlagGet(FLAG_HIDE_FOUR_ISLAND_ICEFALL_CAVE_1F_HM07) == TRUE)
-        return TRUE;
-    return FALSE;
-}
-
-bool8 RunHelpMenuSubroutine(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    switch (helpListMenu->state)
-    {
-    case  8:
-        return HelpSystemSubroutine_PrintWelcomeMessage(helpListMenu, listMenuItemsBuffer);
-    case  9:
-        return HelpSystemSubroutine_WelcomeWaitButton(helpListMenu, listMenuItemsBuffer);
-    case 10:
-        return HelpSystemSubroutine_WelcomeEndGotoMenu(helpListMenu, listMenuItemsBuffer);
-    case  0:
-        return HelpSystemSubroutine_MenuInputHandlerMain(helpListMenu, listMenuItemsBuffer);
-    case  1:
-        return HelpMenuSubroutine_InitSubmenu(helpListMenu, listMenuItemsBuffer);
-    case  2:
-        return HelpMenuSubroutine_ReturnFromSubmenu(helpListMenu, listMenuItemsBuffer);
-    case  3:
-        return HelpMenuSubroutine_SubmenuInputHandler(helpListMenu, listMenuItemsBuffer);
-    case  4:
-        return HelpMenuSubroutine_HelpItemPrint(helpListMenu, listMenuItemsBuffer);
-    case  5:
-        return HelpMenuSubroutine_ReturnFromHelpItem(helpListMenu, listMenuItemsBuffer);
-    case  6:
-        return HelpMenuSubroutine_HelpItemWaitButton(helpListMenu, listMenuItemsBuffer);
-    }
-    return FALSE;
-}
-
-bool8 HelpSystemSubroutine_PrintWelcomeMessage(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    PrintTextOnPanel2Row52RightAlign(gText_HelpSystemControls_A_Next);
-    PrintWelcomeMessageOnPanel1();
-    HS_ShowOrHideMainWindowText(1);
-    HS_ShowOrHideControlsGuideInTopRight(1);
-    helpListMenu->state = 9;
-    return TRUE;
-}
-
-bool8 HelpSystemSubroutine_WelcomeWaitButton(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    if (JOY_NEW(A_BUTTON))
-    {
-        PlaySE(SE_SELECT);
-        helpListMenu->state = 10;
-    }
-    return TRUE;
-}
-
-bool8 HelpSystemSubroutine_WelcomeEndGotoMenu(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    gHelpSystemState.scrollMain = 0;
-    ResetHelpSystemCursor(helpListMenu);
-    BuildAndPrintMainTopicsListMenu(helpListMenu, listMenuItemsBuffer);
-    helpListMenu->state = 0;
-    return TRUE;
-}
-
-bool8 HelpSystemSubroutine_MenuInputHandlerMain(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    s32 input = HelpSystem_GetMenuInput();
-    switch (input)
-    {
-    case -6:
-    case -2:
-        return FALSE;
-    case -5:
-    case -4:
-        PrintHelpSystemTopicMouseoverDescription(helpListMenu, listMenuItemsBuffer);
-        break;
-    case -3:
-    case -1:
-        break;
-    default:
-        gHelpSystemState.topic = input;
-        helpListMenu->state = 1;
-        break;
-    }
-    return TRUE;
-}
-
-bool8 HelpMenuSubroutine_InitSubmenu(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    gHelpSystemState.level = 1;
-    gHelpSystemState.scrollMain = helpListMenu->cursorPos;
-    ResetHelpSystemCursor(helpListMenu);
-    BuildAndPrintSubmenuList(helpListMenu, listMenuItemsBuffer);
-    HS_UpdateMenuScrollArrows();
-    HelpSystem_SetInputDelay(2);
-    helpListMenu->state = 3;
-    return TRUE;
-}
-
-bool8 HelpMenuSubroutine_ReturnFromSubmenu(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    HS_ShowOrHideScrollArrows(0, 0);
-    HS_ShowOrHideScrollArrows(1, 0);
-    gHelpSystemState.level = 0;
-    BuildAndPrintMainTopicsListMenu(helpListMenu, listMenuItemsBuffer);
-    helpListMenu->state = 0;
-    return TRUE;
-}
-
-bool8 HelpMenuSubroutine_SubmenuInputHandler(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    s32 input = HelpSystem_GetMenuInput();
-    switch (input)
-    {
-    case -6:
-        return FALSE;
-    case -2:
-        helpListMenu->state = 2;
-        break;
-    case -5:
-    case -4:
-    case -3:
-    case -1:
-        break;
-    default:
-        gHelpSystemState.scrollSub = input;
-        helpListMenu->state = 4;
-        break;
-    }
-    return TRUE;
-}
-
-void HelpSystem_PrintTopicLabel(void)
-{
-    HelpSystem_PrintTextAt(sHelpSystemTopicPtrs[gHelpSystemState.topic], 0, 0);
-}
-
-bool8 HelpMenuSubroutine_HelpItemPrint(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    gHelpSystemState.level = 2;
-    HS_ShowOrHideMainWindowText(0);
-    HelpSystem_FillPanel1();
-    PrintTextOnPanel2Row52RightAlign(gText_HelpSystemControls_AorBtoCancel);
-    HS_SetMainWindowBgBrightness(1);
-    HS_ShowOrHideHeaderAndFooterLines_Darker(1);
-
-    if (gHelpSystemState.topic == TOPIC_WHAT_TO_DO)
-    {
-        HelpSystem_PrintQuestionAndAnswerPair(sHelpSystemSpecializedQuestionTextPtrs[gHelpSystemState.scrollSub], sHelpSystemSpecializedAnswerTextPtrs[gHelpSystemState.scrollSub]);
-    }
-    else if (gHelpSystemState.topic == TOPIC_HOW_TO_DO)
-    {
-        HelpSystem_PrintQuestionAndAnswerPair(sHelpSystemMenuTopicTextPtrs[gHelpSystemState.scrollSub], sHelpSystemHowToUseMenuTextPtrs[gHelpSystemState.scrollSub]);
-    }
-    else if (gHelpSystemState.topic == TOPIC_TERMS)
-    {
-        HelpSystem_PrintQuestionAndAnswerPair(sHelpSystemTermTextPtrs[gHelpSystemState.scrollSub], sHelpSystemTermDefinitionsTextPtrs[gHelpSystemState.scrollSub]);
-    }
-    else if (gHelpSystemState.topic == TOPIC_ABOUT_GAME)
-    {
-        HelpSystem_PrintQuestionAndAnswerPair(sHelpSystemGeneralTopicTextPtrs[gHelpSystemState.scrollSub], sHelpSystemGeneralTopicDescriptionTextPtrs[gHelpSystemState.scrollSub]);
-    }
-    else // TOPIC_TYPE_MATCHUP
-    {
-        HelpSystem_PrintQuestionAndAnswerPair(sHelpSystemTypeMatchupTextPtrs[gHelpSystemState.scrollSub], sHelpSystemTypeMatchupDescriptionTextPtrs[gHelpSystemState.scrollSub]);
-    }
-    HS_ShowOrHideMainWindowText(1);
-    HS_ShowOrHideControlsGuideInTopRight(1);
-    helpListMenu->state = 6;
-    return TRUE;
-}
-
-bool8 HelpMenuSubroutine_ReturnFromHelpItem(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    gHelpSystemState.level = 1;
-    BuildAndPrintSubmenuList(helpListMenu, listMenuItemsBuffer);
-    HS_UpdateMenuScrollArrows();
-    HelpSystem_SetInputDelay(2);
-    helpListMenu->state = 3;
-    return TRUE;
-}
-
-bool8 HelpMenuSubroutine_HelpItemWaitButton(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    if (JOY_NEW(B_BUTTON) || JOY_NEW(A_BUTTON))
-    {
-        PlaySE(SE_SELECT);
-        helpListMenu->state = 5;
-        return TRUE;
-    }
-    if (JOY_NEW(L_BUTTON | R_BUTTON))
-        return FALSE;
-    return TRUE;
-}
-
-static void PrintWelcomeMessageOnPanel1(void)
-{
-    HelpSystem_FillPanel1();
-    HelpSystem_PrintTextAt(Help_Text_Greetings, 0, 0);
-}
-
-static void PrintTextOnPanel2Row52RightAlign(const u8 * str)
-{
-    HelpSystem_FillPanel2();
-    HelpSystem_PrintTextRightAlign_Row52(str);
-}
-
-u8 GetHelpSystemMenuLevel(void)
-{
-    return gHelpSystemState.level;
-}
-
-static void ResetHelpSystemCursor(struct HelpSystemListMenu * helpListMenu)
-{
-    helpListMenu->itemsAbove = 0;
-    helpListMenu->cursorPos = 0;
-}
-
-static void PrintHelpSystemTopicMouseoverDescription(struct HelpSystemListMenu * helpListMenu, struct ListMenuItem * listMenuItemsBuffer)
-{
-    s32 index = listMenuItemsBuffer[helpListMenu->itemsAbove + helpListMenu->cursorPos].index;
-    if (index == -2)
-        HelpSystem_PrintTopicMouseoverDescription(sHelpSystemTopicMouseoverDescriptionPtrs[5]);
-    else
-        HelpSystem_PrintTopicMouseoverDescription(sHelpSystemTopicMouseoverDescriptionPtrs[index]);
-    HS_ShowOrHideToplevelTooltipWindow(1);
-}
diff --git a/src/help_system_util.c b/src/help_system_util.c
deleted file mode 100644
index cbd8d3ae9..000000000
--- a/src/help_system_util.c
+++ /dev/null
@@ -1,855 +0,0 @@
-#include "global.h"
-#include "gflib.h"
-#include "decompress.h"
-#include "m4a.h"
-#include "event_data.h"
-#include "help_system.h"
-#include "list_menu.h"
-#include "strings.h"
-#include "constants/songs.h"
-
-#define ZERO 0
-
-COMMON_DATA bool8 gHelpSystemEnabled = 0;
-
-struct HelpSystemVideoState
-{
-    /*0x00*/ MainCallback savedVblankCb;
-    /*0x04*/ MainCallback savedHblankCb;
-    /*0x08*/ u16 savedDispCnt;
-    /*0x0a*/ u16 savedBg0Cnt;
-    /*0x0c*/ u16 savedBg0Hofs;
-    /*0x0e*/ u16 savedBg0Vofs;
-    /*0x10*/ u16 savedBldCnt;
-    /*0x12*/ u8 savedTextColor[3];
-    /*0x15*/ u8 state;
-};
-
-#define TILES_BACKUP_HEAP 0x2000
-
-static EWRAM_DATA u8 sMapTilesBackup[BG_CHAR_SIZE - TILES_BACKUP_HEAP] = {0};
-static EWRAM_DATA u8 (*sMapTilesBackupHeap)[TILES_BACKUP_HEAP] = NULL;
-EWRAM_DATA u8 gDisableHelpSystemVolumeReduce = 0;
-EWRAM_DATA bool8 gHelpSystemToggleWithRButtonDisabled = FALSE;
-static EWRAM_DATA u8 sDelayTimer = 0;
-static EWRAM_DATA u8 sInHelpSystem = 0;
-static EWRAM_DATA struct HelpSystemVideoState sVideoState = {0};
-EWRAM_DATA struct HelpSystemListMenu gHelpSystemListMenu = {0};
-EWRAM_DATA struct ListMenuItem gHelpSystemListMenuItems[52] = {0};
-
-static const u16 sTiles[] = INCBIN_U16("graphics/help_system/bg_tiles.4bpp");
-static const u16 sPals[] = INCBIN_U16("graphics/help_system/bg_tiles.gbapal");
-
-u8 RunHelpSystemCallback(void)
-{
-    s32 i;
-
-    switch (sVideoState.state)
-    {
-    case 0:
-        sInHelpSystem = 0;
-        if (gSaveBlock2Ptr->optionsButtonMode != OPTIONS_BUTTON_MODE_HELP)
-            return 0;
-        if (JOY_NEW(R_BUTTON) && gHelpSystemToggleWithRButtonDisabled == TRUE)
-            return 0;
-        if (JOY_NEW(L_BUTTON | R_BUTTON))
-        {
-            if (!HelpSystem_IsSinglePlayer() || !gHelpSystemEnabled)
-            {
-                PlaySE(SE_HELP_ERROR);
-                return 0;
-            }
-            m4aMPlayStop(&gMPlayInfo_SE1);
-            m4aMPlayStop(&gMPlayInfo_SE2);
-            PlaySE(SE_HELP_OPEN);
-            if (!gDisableHelpSystemVolumeReduce)
-                m4aMPlayVolumeControl(&gMPlayInfo_BGM, TRACKS_ALL, 0x80);
-            SaveCallbacks();
-            sInHelpSystem = 1;
-            sVideoState.state = 1;
-        }
-        break;
-    case 1:
-        SaveMapTiles();
-        SaveMapGPURegs();
-        SaveMapTextColors();
-        (*(vu16 *)PLTT) = sPals[15];
-        SetGpuReg(REG_OFFSET_DISPCNT, 0);
-        sVideoState.state = 2;
-        break;
-    case 2:
-        RequestDma3Fill(0, (void *)BG_CHAR_ADDR(3), BG_CHAR_SIZE, DMA3_16BIT);
-        RequestDma3Copy(sPals, (void *)PLTT, sizeof(sPals), DMA3_16BIT);
-        RequestDma3Copy(sTiles, gDecompressionBuffer + 0x3EE0, sizeof(sTiles), DMA3_16BIT);
-        sVideoState.state = 3;
-        break;
-    case 3:
-        HS_BufferFillMapWithTile1FF();
-        HelpSystem_FillPanel3();
-        HelpSystem_FillPanel2();
-        HelpSystem_PrintTextInTopLeftCorner(gString_Help);
-        HS_ShowOrHideWordHELPinTopLeft(1);
-        if (HelpSystem_UpdateHasntSeenIntro() == TRUE)
-            HelpSystemSubroutine_PrintWelcomeMessage(&gHelpSystemListMenu, gHelpSystemListMenuItems);
-        else
-            HelpSystemSubroutine_WelcomeEndGotoMenu(&gHelpSystemListMenu, gHelpSystemListMenuItems);
-        HS_ShowOrHideHeaderAndFooterLines_Lighter(1);
-        HS_ShowOrHideVerticalBlackBarsAlongSides(1);
-        CommitTilemap();
-        sVideoState.state = 4;
-        break;
-    case 4:
-        SetGpuReg(REG_OFFSET_BLDCNT, 0);
-        SetGpuReg(REG_OFFSET_BG0HOFS, 0);
-        SetGpuReg(REG_OFFSET_BG0VOFS, 0);
-        SetGpuReg(REG_OFFSET_BG0CNT, BGCNT_PRIORITY(0) | BGCNT_CHARBASE(3) | BGCNT_16COLOR | BGCNT_SCREENBASE(31));
-        SetGpuReg(REG_OFFSET_DISPCNT, DISPCNT_BG0_ON);
-        sVideoState.state = 5;
-        break;
-    case 5:
-        if (!RunHelpMenuSubroutine(&gHelpSystemListMenu, gHelpSystemListMenuItems))
-        {
-            PlaySE(SE_HELP_CLOSE);
-            sVideoState.state = 6;
-        }
-        break;
-    case 6:
-        SetGpuReg(REG_OFFSET_DISPCNT, 0);
-        RestoreMapTiles();
-        for (i = 0; i < 0x200; i += 2)
-        {
-            *((vu16 *)(PLTT + 0x000 + i)) = sPals[15];
-            *((vu16 *)(PLTT + 0x200 + i)) = sPals[15];
-        }
-        sVideoState.state = 7;
-        break;
-    case 7:
-        if (!gDisableHelpSystemVolumeReduce)
-            m4aMPlayVolumeControl(&gMPlayInfo_BGM, TRACKS_ALL, 0x100);
-        RestoreMapTextColors();
-        RestoreGPURegs();
-        sVideoState.state = 8;
-        break;
-    case 8:
-        RestoreCallbacks();
-        sInHelpSystem = 0;
-        sVideoState.state = 0;
-        break;
-    }
-    return sVideoState.state;
-}
-
-void SaveCallbacks(void)
-{
-    vu16 * dma;
-    sVideoState.savedVblankCb = gMain.vblankCallback;
-    sVideoState.savedHblankCb = gMain.hblankCallback;
-    gMain.vblankCallback = NULL;
-    gMain.hblankCallback = NULL;
-
-    dma = (void *)REG_ADDR_DMA0;
-    dma[5] &= ~(DMA_START_MASK | DMA_DREQ_ON | DMA_REPEAT);
-    dma[5] &= ~DMA_ENABLE;
-    dma[5];
-}
-
-void SaveMapGPURegs(void)
-{
-    sVideoState.savedDispCnt = GetGpuReg(REG_OFFSET_DISPCNT);
-    sVideoState.savedBg0Cnt = GetGpuReg(REG_OFFSET_BG0CNT);
-    sVideoState.savedBg0Hofs = GetGpuReg(REG_OFFSET_BG0HOFS);
-    sVideoState.savedBg0Vofs = GetGpuReg(REG_OFFSET_BG0VOFS);
-    sVideoState.savedBldCnt = GetGpuReg(REG_OFFSET_BLDCNT);
-}
-
-void SaveMapTiles(void)
-{
-    sMapTilesBackupHeap = Alloc(sizeof(*sMapTilesBackupHeap));
-    RequestDma3Copy((void *)BG_CHAR_ADDR(3), sMapTilesBackup, sizeof(sMapTilesBackup), DMA3_16BIT);
-    RequestDma3Copy((void *)(BG_CHAR_ADDR(3) + sizeof(sMapTilesBackup)), sMapTilesBackupHeap, sizeof(*sMapTilesBackupHeap), DMA3_16BIT);
-}
-
-void SaveMapTextColors(void)
-{
-    SaveTextColors(
-        &sVideoState.savedTextColor[0],
-        &sVideoState.savedTextColor[1],
-        &sVideoState.savedTextColor[2]
-    );
-}
-
-void RestoreCallbacks(void)
-{
-    gMain.vblankCallback = sVideoState.savedVblankCb;
-    gMain.hblankCallback = sVideoState.savedHblankCb;
-}
-
-void RestoreGPURegs(void)
-{
-    SetGpuReg(REG_OFFSET_BLDCNT, sVideoState.savedBldCnt);
-    SetGpuReg(REG_OFFSET_BG0HOFS, sVideoState.savedBg0Hofs);
-    SetGpuReg(REG_OFFSET_BG0VOFS, sVideoState.savedBg0Vofs);
-    SetGpuReg(REG_OFFSET_BG0CNT, sVideoState.savedBg0Cnt);
-    SetGpuReg(REG_OFFSET_DISPCNT, sVideoState.savedDispCnt);
-}
-
-void RestoreMapTiles(void)
-{
-    RequestDma3Copy(sMapTilesBackup, (void *)BG_CHAR_ADDR(3), sizeof(sMapTilesBackup), DMA3_16BIT);
-    RequestDma3Copy(sMapTilesBackupHeap, (void *)(BG_CHAR_ADDR(3) + sizeof(sMapTilesBackup)), sizeof(*sMapTilesBackupHeap), DMA3_16BIT);
-    Free(sMapTilesBackupHeap);
-}
-
-void RestoreMapTextColors(void)
-{
-    RestoreTextColors(
-        &sVideoState.savedTextColor[0],
-        &sVideoState.savedTextColor[1],
-        &sVideoState.savedTextColor[2]
-    );
-}
-
-void CommitTilemap(void)
-{
-    RequestDma3Copy(gDecompressionBuffer, (void *)BG_CHAR_ADDR(3), BG_CHAR_SIZE, DMA3_16BIT);
-}
-
-void HS_DrawBgTilemapRect(u16 baseTile, u8 left, u8 top, u8 width, u8 height, u16 increment)
-{
-    u16 i, j;
-
-    for (i = top; i < top + height; i++)
-    {
-        for (j = left; j < left + width; j++)
-        {
-            *((u16 *)(gDecompressionBuffer + 0x3800 + 64 * i + 2 * j)) = baseTile;
-            baseTile += increment;
-        }
-    }
-
-    CommitTilemap();
-}
-
-void HS_BufferFillMapWithTile1FF(void)
-{
-    HS_DrawBgTilemapRect(0x1FF, 0, 0, 30, 20, 0);
-}
-
-void HS_ShowOrHideWordHELPinTopLeft(u8 mode)
-{
-    switch (mode)
-    {
-    case 0:
-        HS_DrawBgTilemapRect(0x1FF, 1, 0, 7, 2, 0);
-        break;
-    case 1:
-        HS_DrawBgTilemapRect(0x1E8, 1, 0, 7, 2, 1);
-        break;
-    }
-}
-
-void HS_ShowOrHideControlsGuideInTopRight(u8 mode)
-{
-    switch (mode)
-    {
-    case 0:
-        HS_DrawBgTilemapRect(0x1FF, 13, 0, 16, 2, 0);
-        break;
-    case 1:
-        HS_DrawBgTilemapRect(0x1A0, 13, 0, 16, 2, 1);
-        break;
-    }
-}
-
-void HS_ShowOrHideMainWindowText(u8 mode)
-{
-    switch (mode)
-    {
-    case 0:
-        HS_DrawBgTilemapRect(0x1FF, 2, 3, 26, 16, 0);
-        break;
-    case 1:
-        HS_DrawBgTilemapRect(0x000, 2, 3, 26, 16, 1);
-        break;
-    }
-}
-
-void HS_SetMainWindowBgBrightness(u8 mode)
-{
-    switch (mode)
-    {
-    case 0:
-        // Brighter
-        HS_DrawBgTilemapRect(0x1FF, 1, 3, 28, 16, 0);
-        break;
-    case 1:
-        // Darker
-        HS_DrawBgTilemapRect(0x1FA, 1, 3, 28, 17, 0);
-        break;
-    }
-}
-
-void HS_ShowOrHideToplevelTooltipWindow(u8 mode)
-{
-    switch (mode)
-    {
-    case 0:
-        HS_DrawBgTilemapRect(0x1FF, 2, 14, 26, 5, 0);
-        break;
-    case 1:
-        HS_DrawBgTilemapRect(0x11E, 2, 14, 26, 5, 1);
-        break;
-    }
-}
-
-void HS_ShowOrHideHeaderAndFooterLines_Lighter(u8 mode)
-{
-    switch (mode)
-    {
-    case 0:
-        HS_DrawBgTilemapRect(0x1FF, 1,  2, 28, 1, 0);
-        HS_DrawBgTilemapRect(0x1FF, 1, 19, 28, 1, 0);
-        break;
-    case 1:
-        HS_DrawBgTilemapRect(0x1F7, 1,  2, 28, 1, 0);
-        HS_DrawBgTilemapRect(0x1F8, 1, 19, 28, 1, 0);
-        break;
-    }
-}
-
-void HS_ShowOrHideHeaderAndFooterLines_Darker(u8 mode)
-{
-    switch (mode)
-    {
-    case 0:
-        HS_DrawBgTilemapRect(0x1FF, 1,  2, 28, 1, 0);
-        HS_DrawBgTilemapRect(0x1FF, 1, 19, 28, 1, 0);
-        break;
-    case 1:
-        HS_DrawBgTilemapRect(0x1FB, 1,  2, 28, 1, 0);
-        HS_DrawBgTilemapRect(0x1FC, 1, 19, 28, 1, 0);
-        break;
-    }
-}
-
-void HS_ShowOrHideVerticalBlackBarsAlongSides(u8 mode)
-{
-    switch (mode)
-    {
-    case 0:
-        HS_DrawBgTilemapRect(0x1FF,  0, 0, 1, 20, 0);
-        HS_DrawBgTilemapRect(0x1FF, 29, 0, 1, 20, 0);
-        break;
-    case 1:
-        HS_DrawBgTilemapRect(0x1F9,  0, 0, 1, 20, 0);
-        HS_DrawBgTilemapRect(0x1F9, 29, 0, 1, 20, 0);
-        break;
-    }
-}
-
-void HS_ShowOrHideHeaderLine_Darker_FooterStyle(u8 mode)
-{
-    switch (mode)
-    {
-    case 0:
-        HS_DrawBgTilemapRect(0x1FF, 1, 5, 28, 1, 0);
-        break;
-    case 1:
-        HS_DrawBgTilemapRect(0x1FC, 1, 5, 28, 1, 0);
-        break;
-    }
-}
-
-void HS_ShowOrHideScrollArrows(u8 which, u8 mode)
-{
-    switch (mode)
-    {
-    case 0:
-        HS_DrawBgTilemapRect(0x1FF, 28,  3, 1, 1, 0);
-        HS_DrawBgTilemapRect(0x1FF, 28, 18, 1, 1, 0);
-        break;
-    case 1:
-        if (which == 0) // top
-            HS_DrawBgTilemapRect(0x1FE, 28,  3, 1, 1, 0);
-        else // bottom
-            HS_DrawBgTilemapRect(0x1FD, 28, 18, 1, 1, 0);
-        break;
-    }
-}
-
-void HelpSystemRenderText(u8 fontId, u8 * dest, const u8 * src, u8 x, u8 y, u8 width, u8 height)
-{
-    // fontId -> sp+24
-    // dest -> sp+28
-    // src -> r9
-    // x -> sp+34
-    // y -> r10
-    // width -> sp+2C
-    // height -> sp+30
-    struct Bitmap srcBlit;
-    struct Bitmap destBlit;
-    u8 orig_x = x;
-    u8 i = 0;
-    s32 clearPixels = 0;
-
-    while (1)
-    {
-        u16 curChar = *src;
-        src++;
-        switch (curChar)
-        {
-        case EOS:
-            return;
-        case CHAR_NEWLINE:
-            x = orig_x;
-            y += gCurGlyph.height + 1;
-            break;
-        case PLACEHOLDER_BEGIN:
-            curChar = *src;
-            src++;
-            if (curChar == PLACEHOLDER_ID_PLAYER)
-            {
-                for (i = 0; i < 10; i++)
-                {
-                    if (gSaveBlock2Ptr->playerName[i] == EOS)
-                    {
-                        break;
-                    }
-                    DecompressAndRenderGlyph(fontId, gSaveBlock2Ptr->playerName[i], &srcBlit, &destBlit, dest, x, y, width, height);
-                    // This is required to match a dummy [sp+#0x24] read here
-                    if (fontId == FONT_SMALL)
-                    {
-                        x += gCurGlyph.width;
-                    }
-                    else
-                    {
-                        x += gCurGlyph.width + ZERO;
-                    }
-                }
-            }
-            else if (curChar == PLACEHOLDER_ID_STRING_VAR_1)
-            {
-                for (i = 0; ; i++)
-                {
-                    if (FlagGet(FLAG_SYS_NOT_SOMEONES_PC) == TRUE)
-                    {
-                        if (gString_Bill[i] == EOS)
-                        {
-                            break;
-                        }
-                        DecompressAndRenderGlyph(fontId, gString_Bill[i], &srcBlit, &destBlit, dest, x, y, width, height);
-                    }
-                    else
-                    {
-                        if (gString_Someone[i] == EOS)
-                        {
-                            break;
-                        }
-                        DecompressAndRenderGlyph(fontId, gString_Someone[i], &srcBlit, &destBlit, dest, x, y, width, height);
-                    }
-                    if (fontId == FONT_SMALL)
-                    {
-                        x += gCurGlyph.width;
-                    }
-                    else
-                    {
-                        x += gCurGlyph.width + ZERO;
-                    }
-                }
-            }
-            break;
-        case CHAR_PROMPT_SCROLL:
-        case CHAR_PROMPT_CLEAR:
-            x = orig_x;
-            y += gCurGlyph.height + 1;
-            break;
-        case EXT_CTRL_CODE_BEGIN:
-            curChar = *src;
-            src++;
-            switch (curChar)
-            {
-            case EXT_CTRL_CODE_COLOR_HIGHLIGHT_SHADOW:
-                src++;
-                //fallthrough
-            case EXT_CTRL_CODE_PLAY_BGM:
-            case EXT_CTRL_CODE_PLAY_SE:
-                src++;
-                //fallthrough
-            case EXT_CTRL_CODE_COLOR:
-            case EXT_CTRL_CODE_HIGHLIGHT:
-            case EXT_CTRL_CODE_SHADOW:
-            case EXT_CTRL_CODE_PALETTE:
-            case EXT_CTRL_CODE_FONT:
-            case EXT_CTRL_CODE_PAUSE:
-            case EXT_CTRL_CODE_ESCAPE:
-            case EXT_CTRL_CODE_SHIFT_RIGHT:
-            case EXT_CTRL_CODE_SHIFT_DOWN:
-                src++;
-            case EXT_CTRL_CODE_RESET_FONT:
-            case EXT_CTRL_CODE_PAUSE_UNTIL_PRESS:
-            case EXT_CTRL_CODE_WAIT_SE:
-            case EXT_CTRL_CODE_FILL_WINDOW:
-                break;
-            case EXT_CTRL_CODE_CLEAR:
-            case EXT_CTRL_CODE_SKIP:
-                src++;
-                break;
-            case EXT_CTRL_CODE_CLEAR_TO:
-            {
-                clearPixels = *src + orig_x - x;
-
-                if (clearPixels > 0)
-                {
-                    destBlit.pixels = dest;
-                    destBlit.width = width * 8;
-                    destBlit.height = height * 8;
-                    FillBitmapRect4Bit(&destBlit, x, y, clearPixels, GetFontAttribute(fontId, FONTATTR_MAX_LETTER_HEIGHT), 0);
-                    x += clearPixels;
-                }
-                src++;
-                break;
-            }
-            case EXT_CTRL_CODE_MIN_LETTER_SPACING:
-                src++;
-                break;
-            case EXT_CTRL_CODE_JPN:
-            case EXT_CTRL_CODE_ENG:
-                break;
-            }
-            break;
-        case CHAR_KEYPAD_ICON:
-            curChar = *src;
-            src++;
-            srcBlit.pixels = (u8 *)&gKeypadIconTiles[0x20 * GetKeypadIconTileOffset(curChar)];
-            srcBlit.width = 0x80;
-            srcBlit.height = 0x80;
-            destBlit.pixels = dest;
-            destBlit.width = width * 8;
-            destBlit.height = height * 8;
-            BlitBitmapRect4Bit(&srcBlit, &destBlit, 0, 0, x, y, GetKeypadIconWidth(curChar), GetKeypadIconHeight(curChar), 0);
-            x += GetKeypadIconWidth(curChar);
-            break;
-        case CHAR_EXTRA_SYMBOL:
-            curChar = *src + 0x100;
-            src++;
-            //fallthrough
-        default:
-            if (curChar == CHAR_SPACE)
-            {
-                if (fontId == FONT_SMALL)
-                {
-                    x += 5;
-                }
-                else
-                {
-                    x += 4;
-                }
-            }
-            else
-            {
-                DecompressAndRenderGlyph(fontId, curChar, &srcBlit, &destBlit, dest, x, y, width, height);
-                if (fontId == FONT_SMALL)
-                {
-                    x += gCurGlyph.width;
-                }
-                else
-                {
-                    x += gCurGlyph.width + ZERO;
-                }
-            }
-            break;
-        }
-    }
-}
-
-void DecompressAndRenderGlyph(u8 fontId, u16 glyph, struct Bitmap *srcBlit, struct Bitmap *destBlit, u8 *destBuffer, u8 x, u8 y, u8 width, u8 height)
-{
-    if (fontId == FONT_SMALL)
-        DecompressGlyph_Small(glyph, FALSE);
-    else if (fontId == FONT_FEMALE)
-        DecompressGlyph_Female(glyph, FALSE);
-    else
-        DecompressGlyph_Normal(glyph, FALSE);
-    srcBlit->pixels = (u8*) gCurGlyph.gfxBufferTop;
-    srcBlit->width = 16;
-    srcBlit->height = 16;
-    destBlit->pixels = destBuffer;
-    destBlit->width = width * 8;
-    destBlit->height = height * 8;
-    BlitBitmapRect4Bit(srcBlit, destBlit, 0, 0, x, y, gCurGlyph.width, gCurGlyph.height, 0);
-}
-
-void HelpSystem_PrintTextInTopLeftCorner(const u8 * str)
-{
-    GenerateFontHalfRowLookupTable(TEXT_COLOR_WHITE, TEXT_DYNAMIC_COLOR_6, TEXT_COLOR_DARK_GRAY);
-    HelpSystemRenderText(5, gDecompressionBuffer + 0x3D00, str, 6, 2, 7, 2);
-}
-
-void HelpSystem_PrintTextRightAlign_Row52(const u8 * str)
-{
-    s32 left = 0x7C - GetStringWidth(FONT_SMALL, str, 0);
-    GenerateFontHalfRowLookupTable(TEXT_COLOR_WHITE, TEXT_DYNAMIC_COLOR_6, TEXT_COLOR_DARK_GRAY);
-    HelpSystemRenderText(0, gDecompressionBuffer + 0x3400, str, left, 2, 16, 2);
-}
-
-void HelpSystem_PrintTextAt(const u8 * str, u8 x, u8 y)
-{
-    GenerateFontHalfRowLookupTable(TEXT_COLOR_WHITE, TEXT_DYNAMIC_COLOR_6, TEXT_COLOR_DARK_GRAY);
-    HelpSystemRenderText(2, gDecompressionBuffer + 0x0000, str, x, y, 26, 16);
-}
-
-void HelpSystem_PrintQuestionAndAnswerPair(const u8 * question, const u8 * answer)
-{
-    CpuFill16(0xEEEE, gDecompressionBuffer + 0x0000, 0x3400);
-    GenerateFontHalfRowLookupTable(TEXT_COLOR_WHITE, TEXT_DYNAMIC_COLOR_5, TEXT_COLOR_DARK_GRAY);
-    HelpSystemRenderText(2, gDecompressionBuffer + 0x0000, question, 0, 0, 26, 16);
-    HelpSystemRenderText(2, gDecompressionBuffer + 0x09C0, answer, 0, 0, 26, 13);
-}
-
-void HelpSystem_PrintTopicMouseoverDescription(const u8 * str)
-{
-    CpuFill16(0x1111, gDecompressionBuffer + 0x23C0, 0x1040);
-    GenerateFontHalfRowLookupTable(TEXT_COLOR_DARK_GRAY, TEXT_COLOR_WHITE, TEXT_COLOR_LIGHT_GRAY);
-    HelpSystemRenderText(2, gDecompressionBuffer + 0x23C0, str, 2, 6, 26, 5);
-}
-
-void HelpSystem_FillPanel3(void)
-{
-    CpuFill16(0xFFFF, gDecompressionBuffer + 0x3D00, 0x1C0);
-}
-
-void HelpSystem_FillPanel2(void)
-{
-    CpuFill16(0xFFFF, gDecompressionBuffer + 0x3400, 0x400);
-}
-
-void HelpSystem_FillPanel1(void)
-{
-    CpuFill16(0xFFFF, gDecompressionBuffer + 0x0000, 0x3400);
-}
-
-void HelpSystem_InitListMenuController(struct HelpSystemListMenu * a0, u8 a1, u8 a2)
-{
-    gHelpSystemListMenu.sub = a0->sub;
-    gHelpSystemListMenu.itemsAbove = a1;
-    gHelpSystemListMenu.cursorPos = a2;
-    gHelpSystemListMenu.state = 0;
-    if (gHelpSystemListMenu.sub.totalItems < gHelpSystemListMenu.sub.maxShowed)
-        gHelpSystemListMenu.sub.maxShowed = gHelpSystemListMenu.sub.totalItems;
-    HS_ShowOrHideMainWindowText(0);
-    HelpSystem_FillPanel1();
-    PrintListMenuItems();
-    PlaceListMenuCursor();
-}
-
-void HelpSystem_SetInputDelay(u8 a0)
-{
-    sDelayTimer = a0;
-}
-
-s32 HelpSystem_GetMenuInput(void)
-{
-    if (sDelayTimer != 0)
-    {
-        sDelayTimer--;
-        return -1;
-    }
-    else if (JOY_NEW(A_BUTTON))
-    {
-        PlaySE(SE_SELECT);
-        return gHelpSystemListMenu.sub.items[gHelpSystemListMenu.itemsAbove + gHelpSystemListMenu.cursorPos].index;
-    }
-    else if (JOY_NEW(B_BUTTON))
-    {
-        PlaySE(SE_SELECT);
-        return -2;
-    }
-    else if (JOY_NEW(L_BUTTON | R_BUTTON))
-    {
-        return -6;
-    }
-    else if (JOY_REPT(DPAD_UP))
-    {
-        if (!MoveCursor(1, 0))
-            PlaySE(SE_SELECT);
-        return -4;
-    }
-    else if (JOY_REPT(DPAD_DOWN))
-    {
-        if (!MoveCursor(1, 1))
-            PlaySE(SE_SELECT);
-        return -5;
-    }
-    else if (JOY_REPT(DPAD_LEFT))
-    {
-        if (!MoveCursor(7, 0))
-            PlaySE(SE_SELECT);
-        return -4;
-    }
-    else if (JOY_REPT(DPAD_RIGHT))
-    {
-        if (!MoveCursor(7, 1))
-            PlaySE(SE_SELECT);
-        return -5;
-    }
-    else
-        return -1;
-}
-
-void HS_UpdateMenuScrollArrows(void)
-{
-    u8 topItemIdx = gHelpSystemListMenu.sub.totalItems - 7;
-    if (gHelpSystemListMenu.sub.totalItems > 7)
-    {
-        s32 cursorPos = gHelpSystemListMenu.itemsAbove + gHelpSystemListMenu.cursorPos;
-        HS_ShowOrHideScrollArrows(0, 0); // Hide both
-        if (cursorPos == 0)
-            HS_ShowOrHideScrollArrows(1, 1); // Show bottom
-        else if (gHelpSystemListMenu.itemsAbove == 0 && gHelpSystemListMenu.cursorPos != 0)
-            HS_ShowOrHideScrollArrows(1, 1); // Show bottom
-        else if (gHelpSystemListMenu.itemsAbove == topItemIdx)
-            HS_ShowOrHideScrollArrows(0, 1); // Show top
-        else if (gHelpSystemListMenu.itemsAbove != 0)
-        {
-            // Show both
-            HS_ShowOrHideScrollArrows(0, 1);
-            HS_ShowOrHideScrollArrows(1, 1);
-        }
-    }
-}
-
-void PrintListMenuItems(void)
-{
-    u8 glyphHeight = GetFontAttribute(FONT_NORMAL, FONTATTR_MAX_LETTER_HEIGHT) + 1;
-    s32 i;
-    s32 r5 = gHelpSystemListMenu.itemsAbove;
-
-    for (i = 0; i < gHelpSystemListMenu.sub.maxShowed; i++)
-    {
-        u8 x = gHelpSystemListMenu.sub.left + 8;
-        u8 y = gHelpSystemListMenu.sub.top + glyphHeight * i;
-        HelpSystem_PrintTextAt(gHelpSystemListMenu.sub.items[r5].label, x, y);
-        r5++;
-    }
-}
-
-void PlaceListMenuCursor(void)
-{
-    u8 glyphHeight = GetFontAttribute(FONT_NORMAL, FONTATTR_MAX_LETTER_HEIGHT) + 1;
-    u8 x = gHelpSystemListMenu.sub.left;
-    u8 y = gHelpSystemListMenu.sub.top + glyphHeight * gHelpSystemListMenu.cursorPos;
-    HelpSystem_PrintTextAt(gText_SelectorArrow2, x, y);
-}
-
-void HS_RemoveSelectionCursorAt(u8 i)
-{
-    u8 glyphHeight = GetFontAttribute(FONT_NORMAL, FONTATTR_MAX_LETTER_HEIGHT) + 1;
-    u8 x = gHelpSystemListMenu.sub.left;
-    u8 y = gHelpSystemListMenu.sub.top + i * glyphHeight;
-    HelpSystem_PrintTextAt(gString_HelpSystem_ClearTo8, x, y);
-}
-
-u8 TryMoveCursor1(u8 dirn)
-{
-    u16 midPoint;
-    if (dirn == 0)
-    {
-        if (gHelpSystemListMenu.sub.maxShowed == 1)
-            midPoint = 0;
-        else
-            midPoint = gHelpSystemListMenu.sub.maxShowed - (gHelpSystemListMenu.sub.maxShowed / 2 + (gHelpSystemListMenu.sub.maxShowed & 1)) - 1;
-        if (gHelpSystemListMenu.itemsAbove == 0)
-        {
-            if (gHelpSystemListMenu.cursorPos != 0)
-            {
-                gHelpSystemListMenu.cursorPos--;
-                return 1;
-            }
-            else
-                return 0;
-        }
-        if (gHelpSystemListMenu.cursorPos > midPoint)
-        {
-            gHelpSystemListMenu.cursorPos--;
-            return 1;
-        }
-        else
-        {
-            gHelpSystemListMenu.itemsAbove--;
-            return 2;
-        }
-    }
-    else
-    {
-        if (gHelpSystemListMenu.sub.maxShowed == 1)
-            midPoint = 0;
-        else
-            midPoint = gHelpSystemListMenu.sub.maxShowed / 2 + (gHelpSystemListMenu.sub.maxShowed & 1);
-        if (gHelpSystemListMenu.itemsAbove == gHelpSystemListMenu.sub.totalItems - gHelpSystemListMenu.sub.maxShowed)
-        {
-            if (gHelpSystemListMenu.cursorPos < gHelpSystemListMenu.sub.maxShowed - 1)
-            {
-                gHelpSystemListMenu.cursorPos++;
-                return 1;
-            }
-            else
-                return 0;
-        }
-        else if (gHelpSystemListMenu.cursorPos < midPoint)
-        {
-            gHelpSystemListMenu.cursorPos++;
-            return 1;
-        }
-        else
-        {
-            gHelpSystemListMenu.itemsAbove++;
-            return 2;
-        }
-    }
-}
-
-bool8 MoveCursor(u8 by, u8 dirn)
-{
-    u8 r7 = gHelpSystemListMenu.cursorPos;
-    u8 flags = 0;
-    s32 i;
-    for (i = 0; i < by; i++)
-        flags |= TryMoveCursor1(dirn);
-
-    switch (flags)
-    {
-    case 0:
-    default:
-        // neither changed
-        return TRUE;
-    case 1:
-        // changed cursorPos only
-        HS_RemoveSelectionCursorAt(r7);
-        PlaceListMenuCursor();
-        CommitTilemap();
-        break;
-    case 2:
-    case 3:
-        // changed itemsAbove
-        if (GetHelpSystemMenuLevel() == 1)
-        {
-            HelpSystem_SetInputDelay(2);
-            HelpSystem_FillPanel1();
-            PrintListMenuItems();
-            PlaceListMenuCursor();
-            HelpSystem_PrintTopicLabel();
-            HS_UpdateMenuScrollArrows();
-        }
-        else
-        {
-            HS_ShowOrHideMainWindowText(0);
-            HelpSystem_FillPanel1();
-            PrintListMenuItems();
-            PlaceListMenuCursor();
-            HS_ShowOrHideMainWindowText(1);
-        }
-        CommitTilemap();
-        break;
-    }
-    return FALSE;
-}
diff --git a/src/item.c b/src/item.c
index ce42d4caf..3824720c9 100644
--- a/src/item.c
+++ b/src/item.c
@@ -9,8 +9,9 @@
 #include "load_save.h"
 #include "party_menu.h"
 #include "pokeball.h"
-#include "quest_log.h"
+
 #include "strings.h"
+#include "constants/battle.h"
 #include "constants/hold_effects.h"
 #include "constants/item.h"
 #include "constants/item_effects.h"
@@ -583,40 +584,7 @@ u16 BagGetQuantityByItemId(u16 itemId)
     return 0;
 }
 
-void TrySetObtainedItemQuestLogEvent(u16 itemId)
-{
-    // Only some key items trigger this event
-    if (itemId == ITEM_OAKS_PARCEL
-     || itemId == ITEM_POKE_FLUTE
-     || itemId == ITEM_SECRET_KEY
-     || itemId == ITEM_BIKE_VOUCHER
-     || itemId == ITEM_GOLD_TEETH
-     || itemId == ITEM_OLD_AMBER
-     || itemId == ITEM_CARD_KEY
-     || itemId == ITEM_LIFT_KEY
-     || itemId == ITEM_HELIX_FOSSIL
-     || itemId == ITEM_DOME_FOSSIL
-     || itemId == ITEM_SILPH_SCOPE
-     || itemId == ITEM_BICYCLE
-     || itemId == ITEM_TOWN_MAP
-     || itemId == ITEM_VS_SEEKER
-     || itemId == ITEM_TEACHY_TV
-     || itemId == ITEM_RAINBOW_PASS
-     || itemId == ITEM_TEA
-     || itemId == ITEM_POWDER_JAR
-     || itemId == ITEM_RUBY
-     || itemId == ITEM_SAPPHIRE)
-    {
-        if (itemId != ITEM_TOWN_MAP || (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(PALLET_TOWN_RIVALS_HOUSE) && gSaveBlock1Ptr->location.mapNum == MAP_NUM(PALLET_TOWN_RIVALS_HOUSE)))
-        {
-            struct QuestLogEvent_StoryItem * data = malloc(sizeof(*data));
-            data->itemId = itemId;
-            data->mapSec = gMapHeader.regionMapSectionId;
-            SetQuestLogEvent(QL_EVENT_OBTAINED_STORY_ITEM, (const u16 *)data);
-            free(data);
-        }
-    }
-}
+
 
 u16 SanitizeItemId(u16 itemId)
 {
diff --git a/src/item_menu.c b/src/item_menu.c
index e0177d368..ea95fd4f2 100644
--- a/src/item_menu.c
+++ b/src/item_menu.c
@@ -8,7 +8,7 @@
 #include "event_object_movement.h"
 #include "field_player_avatar.h"
 #include "graphics.h"
-#include "help_system.h"
+
 #include "item.h"
 #include "item_icon.h"
 #include "item_menu.h"
@@ -33,7 +33,6 @@
 #include "tm_case.h"
 #include "constants/item_menu.h"
 #include "constants/items.h"
-#include "constants/quest_log.h"
 #include "constants/songs.h"
 
 #define FREE_IF_SET(ptr) ({ if (ptr) Free(ptr); })
@@ -492,10 +491,6 @@ static bool8 LoadBagMenuGraphics(void)
         gMain.state++;
         break;
     case 19:
-        if (gBagMenuState.location == ITEMMENULOCATION_ITEMPC)
-            SetHelpContext(HELPCONTEXT_PLAYERS_PC_ITEMS);
-        else
-            SetHelpContext(HELPCONTEXT_BAG);
         gPaletteFade.bufferTransferDisabled = FALSE;
         gMain.state++;
         break;
@@ -1931,7 +1926,6 @@ static void Task_FinalizeSaleToShop(u8 taskId)
     PlaySE(SE_SHOP);
     RemoveBagItem(gSpecialVar_ItemId, data[8]);
     AddMoney(&gSaveBlock1Ptr->money, (ItemId_GetPrice(gSpecialVar_ItemId) / ITEM_SELL_FACTOR) * data[8]);
-    RecordItemTransaction(gSpecialVar_ItemId, data[8], QL_EVENT_SOLD_ITEM - QL_EVENT_USED_POKEMART);
     DestroyListMenuTask(data[0], &gBagMenuState.cursorPos[gBagMenuState.pocket], &gBagMenuState.itemsAbove[gBagMenuState.pocket]);
     Pocket_CalculateNItemsAndMaxShowed(gBagMenuState.pocket);
     PocketCalculateInitialCursorPosAndItemsAbove(gBagMenuState.pocket);
@@ -2006,7 +2000,6 @@ static void Task_TryDoItemDeposit(u8 taskId)
     s16 *data = gTasks[taskId].data;
     if (AddPCItem(gSpecialVar_ItemId, data[8]) == TRUE)
     {
-        ItemUse_SetQuestLogEvent(QL_EVENT_DEPOSITED_ITEM_PC, 0, gSpecialVar_ItemId, 0xFFFF);
         CopyItemName(gSpecialVar_ItemId, gStringVar1);
         ConvertIntToDecimalStringN(gStringVar2, data[8], STR_CONV_MODE_LEFT_ALIGN, 3);
         StringExpandPlaceholders(gStringVar4, gText_DepositedStrVar2StrVar1s);
diff --git a/src/item_pc.c b/src/item_pc.c
index 17fede866..909684fa1 100644
--- a/src/item_pc.c
+++ b/src/item_pc.c
@@ -3,7 +3,7 @@
 #include "data.h"
 #include "decompress.h"
 #include "graphics.h"
-#include "help_system.h"
+
 #include "item.h"
 #include "item_menu.h"
 #include "item_icon.h"
@@ -22,7 +22,6 @@
 #include "task.h"
 #include "text_window.h"
 #include "constants/items.h"
-#include "constants/quest_log.h"
 #include "constants/songs.h"
 
 struct ItemPcResources
@@ -356,7 +355,6 @@ static bool8 ItemPc_DoGfxSetup(void)
         gMain.state++;
         break;
     case 17:
-        SetHelpContext(HELPCONTEXT_PLAYERS_PC_ITEMS);
         gMain.state++;
         break;
     case 18:
@@ -897,7 +895,6 @@ static void ItemPc_DoWithdraw(u8 taskId)
 
     if (AddBagItem(itemId, data[8]) == TRUE)
     {
-        ItemUse_SetQuestLogEvent(QL_EVENT_WITHDREW_ITEM_PC, NULL, itemId, 0xFFFF);
         CopyItemName(itemId, gStringVar1);
         ConvertIntToDecimalStringN(gStringVar2, data[8], STR_CONV_MODE_LEFT_ALIGN, 3);
         StringExpandPlaceholders(gStringVar4, gText_WithdrewQuantItem);
diff --git a/src/item_use.c b/src/item_use.c
index 36f8ffc69..d230f0dae 100644
--- a/src/item_use.c
+++ b/src/item_use.c
@@ -27,7 +27,7 @@
 #include "metatile_behavior.h"
 #include "overworld.h"
 #include "party_menu.h"
-#include "quest_log.h"
+
 #include "region_map.h"
 #include "script.h"
 #include "strings.h"
@@ -413,7 +413,6 @@ void ItemUseOutOfBattle_CoinCase(u8 taskId)
 {
     ConvertIntToDecimalStringN(gStringVar1, GetCoins(), STR_CONV_MODE_LEFT_ALIGN, 4);
     StringExpandPlaceholders(gStringVar4, gText_CoinCase);
-    ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, NULL, gSpecialVar_ItemId, 0xFFFF);
     if (gTasks[taskId].tIsFieldUse == FALSE)
         DisplayItemMessageInBag(taskId, FONT_NORMAL, gStringVar4, Task_ReturnToBagFromContextMenu);
     else
@@ -430,7 +429,6 @@ void ItemUseOutOfBattle_PowderJar(u8 taskId)
 {
     ConvertIntToDecimalStringN(gStringVar1, GetBerryPowder(), STR_CONV_MODE_LEFT_ALIGN, 5);
     StringExpandPlaceholders(gStringVar4, gText_PowderQty);
-    ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, NULL, gSpecialVar_ItemId, 0xFFFF);
     if (gTasks[taskId].tIsFieldUse == FALSE)
         DisplayItemMessageInBag(taskId, FONT_NORMAL, gStringVar4, Task_ReturnToBagFromContextMenu);
     else
@@ -497,7 +495,6 @@ void ItemUseOutOfBattle_PokeFlute(u8 taskId)
 
     if (wokeSomeoneUp)
     {
-        ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, NULL, gSpecialVar_ItemId, 0xFFFF);
         if (gTasks[taskId].tIsFieldUse == FALSE)
             DisplayItemMessageInBag(taskId, FONT_NORMAL, gText_PlayedPokeFlute, Task_PlayPokeFlute);
         else
@@ -561,7 +558,6 @@ void ItemUseOutOfBattle_BerryPouch(u8 taskId)
 
 void ItemUseOutOfBattle_TeachyTv(u8 taskId)
 {
-    ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, NULL, gSpecialVar_ItemId, 0xFFFF);
     if (gTasks[taskId].tIsFieldUse == FALSE)
     {
         ItemMenu_SetExitCallback(InitTeachyTvFromBag);
@@ -592,7 +588,6 @@ void ItemUseOutOfBattle_TownMap(u8 taskId)
 
 void ItemUseOutOfBattle_FameChecker(u8 taskId)
 {
-    ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, NULL, gSpecialVar_ItemId, 0xFFFF);
     if (gTasks[taskId].tIsFieldUse == FALSE)
     {
         ItemMenu_SetExitCallback(UseFameCheckerFromBag);
@@ -730,7 +725,6 @@ static void Task_UseRepel(u8 taskId)
 {
     if (!IsSEPlaying())
     {
-        ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, NULL, gSpecialVar_ItemId, 0xFFFF);
         VarSet(VAR_REPEL_STEP_COUNT, ItemId_GetHoldEffectParam(gSpecialVar_ItemId));
     #if VAR_LAST_REPEL_LURE_USED != 0
         VarSet(VAR_LAST_REPEL_LURE_USED, gSpecialVar_ItemId);
@@ -797,7 +791,6 @@ static void RemoveUsedItem(void)
 
 void ItemUseOutOfBattle_BlackWhiteFlute(u8 taskId)
 {
-    ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, NULL, gSpecialVar_ItemId, 0xFFFF);
     if (gSpecialVar_ItemId == ITEM_WHITE_FLUTE)
     {
         FlagSet(FLAG_SYS_WHITE_FLUTE_ACTIVE);
@@ -839,7 +832,6 @@ void ItemUseOutOfBattle_EscapeRope(u8 taskId)
 {
     if (CanUseEscapeRopeOnCurrMap() == TRUE)
     {
-        ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, NULL, gSpecialVar_ItemId, gMapHeader.regionMapSectionId);
         sItemUseOnFieldCB = ItemUseOnFieldCB_EscapeRope;
         SetUpItemUseOnFieldCallback(taskId);
     }
@@ -1181,18 +1173,4 @@ void ItemUseOutOfBattle_CannotUse(u8 taskId)
         PrintNotTheTimeToUseThat(taskId, gTasks[taskId].data[3]);
 }
 
-void ItemUse_SetQuestLogEvent(u8 eventId, struct Pokemon *pokemon, u16 itemId, u16 param)
-{
-    struct QuestLogEvent_Item *data = Alloc(sizeof(*data));
-
-    data->itemId = itemId;
-    data->itemParam = param;
-    if (pokemon != NULL)
-        data->species = GetMonData(pokemon, MON_DATA_SPECIES_OR_EGG);
-    else
-        data->species = 0xFFFF;
-    SetQuestLogEvent(eventId, (void *)data);
-    Free(data);
-}
-
 #undef tUsingRegisteredKeyItem
diff --git a/src/link.c b/src/link.c
index da03c06fb..50a544aff 100644
--- a/src/link.c
+++ b/src/link.c
@@ -9,7 +9,7 @@
 #include "decompress.h"
 #include "event_data.h"
 #include "graphics.h"
-#include "help_system.h"
+
 #include "item_menu.h"
 #include "librfu.h"
 #include "link.h"
@@ -18,7 +18,7 @@
 #include "menu.h"
 #include "overworld.h"
 #include "palette.h"
-#include "quest_log.h"
+
 #include "random.h"
 #include "reload_save.h"
 #include "save.h"
@@ -209,8 +209,6 @@ static const u8 sLinkErrorTextColor[] = { 0x00, 0x01, 0x02 };
 
 bool8 IsWirelessAdapterConnected(void)
 {
-    if (QL_IS_PLAYBACK_STATE)
-        return FALSE;
 
     SetWirelessCommType1();
     InitRFUAPI();
@@ -1221,7 +1219,6 @@ static void CB2_PrintErrorMessage(void)
         {
             if (JOY_NEW(A_BUTTON))
             {
-                HelpSystem_Enable();
                 PlaySE(SE_PIN);
                 gWirelessCommType = 0;
                 sLinkErrorBuffer.disconnected = 0;
@@ -1232,7 +1229,6 @@ static void CB2_PrintErrorMessage(void)
         {
             if (JOY_NEW(A_BUTTON))
             {
-                HelpSystem_Enable();
                 rfu_REQ_stopMode();
                 rfu_waitREQComplete();
                 DoSoftReset();
diff --git a/src/link_rfu_2.c b/src/link_rfu_2.c
index 99785437f..e38ac64d4 100644
--- a/src/link_rfu_2.c
+++ b/src/link_rfu_2.c
@@ -6,7 +6,7 @@
 #include "link_rfu.h"
 #include "mystery_gift_menu.h"
 #include "overworld.h"
-#include "quest_log.h"
+
 #include "random.h"
 #include "task.h"
 #include "constants/union_room.h"
@@ -572,9 +572,6 @@ void LinkRfu_Shutdown(void)
 {
     u8 i;
 
-    if (QL_IS_PLAYBACK_STATE)
-        return;
-
     rfu_LMAN_powerDownRFU();
     if (gRfu.parentChild == MODE_PARENT)
     {
@@ -614,8 +611,6 @@ void LinkRfu_Shutdown(void)
 
 static void CreateTask_ParentSearchForChildren(void)
 {
-    if (QL_IS_PLAYBACK_STATE)
-        return;
     gRfu.searchTaskId = CreateTask(Task_ParentSearchForChildren, 1);
 }
 
@@ -639,8 +634,6 @@ static bool32 TryReconnectParent(void)
 
 static void CreateTask_ChildSearchForParent(void)
 {
-    if (QL_IS_PLAYBACK_STATE)
-        return;
     gRfu.searchTaskId = CreateTask(Task_ChildSearchForParent, 1);
 }
 
@@ -2620,8 +2613,6 @@ void InitializeRfuLinkManager_JoinGroup(void)
 
 void InitializeRfuLinkManager_EnterUnionRoom(void)
 {
-    if (QL_IS_PLAYBACK_STATE)
-        return;
     gRfu.parentChild = MODE_P_C_SWITCH;
     SetHostRfuUsername();
     rfu_LMAN_initializeManager(LinkManagerCB_UnionRoom, NULL);
diff --git a/src/load_save.c b/src/load_save.c
index 47b24576c..3e01c917a 100644
--- a/src/load_save.c
+++ b/src/load_save.c
@@ -12,7 +12,7 @@
 #include "overworld.h"
 #include "pokemon.h"
 #include "pokemon_storage_system.h"
-#include "quest_log.h"
+
 #include "random.h"
 #include "save_location.h"
 #include "trainer_tower.h"
@@ -75,7 +75,6 @@ void ClearSav1(void)
 void SetSaveBlocksPointers(u16 offset)
 {
     struct SaveBlock1** sav1_LocalVar = &gSaveBlock1Ptr;
-    void *oldSave = (void *)gSaveBlock1Ptr;
 
     offset = (offset + Random()) & (SAVEBLOCK_MOVE_RANGE - 4);
 
@@ -84,7 +83,6 @@ void SetSaveBlocksPointers(u16 offset)
     gPokemonStoragePtr = (void *)(&gPokemonStorage) + offset;
 
     SetBagPocketsPointers();
-    QL_AddASLROffset(oldSave);
 }
 
 void MoveSaveBlocks_ResetHeap(void)
diff --git a/src/mail.c b/src/mail.c
index b472a66b3..360585485 100644
--- a/src/mail.c
+++ b/src/mail.c
@@ -10,7 +10,7 @@
 #include "mail_data.h"
 #include "player_pc.h"
 #include "overworld.h"
-#include "help_system.h"
+
 #include "menu_helpers.h"
 #include "graphics.h"
 #include "pokemon_icon.h"
@@ -500,10 +500,6 @@ static bool8 DoInitMailView(void)
         SetVBlankCallback(NULL);
         ScanlineEffect_Stop();
         SetGpuReg(REG_OFFSET_DISPCNT, 0);
-        if (gPlayerPcMenuManager.notInRoom == FALSE)
-            SetHelpContext(HELPCONTEXT_BEDROOM_PC_MAILBOX);
-        else
-            SetHelpContext(HELPCONTEXT_PLAYERS_PC_MAILBOX);
         break;
     case 1:
         CpuFill16(0, (void *)OAM, OAM_SIZE);
diff --git a/src/main.c b/src/main.c
index 224774497..83b597bfa 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1,7 +1,7 @@
 #include "global.h"
 #include "crt0.h"
 #include "malloc.h"
-#include "help_system.h"
+
 #include "link.h"
 #include "link_rfu.h"
 #include "librfu.h"
@@ -11,7 +11,7 @@
 #include "scanline_effect.h"
 #include "overworld.h"
 #include "play_time.h"
-#include "quest_log.h"
+
 #include "random.h"
 #include "save_failed_screen.h"
 #include "dma3.h"
@@ -106,16 +106,13 @@ void AgbMain()
     CheckForFlashMemory();
     InitMainCallbacks();
     InitMapMusic();
-#ifdef BUGFIX
     SeedRngWithRtc(); // see comment at SeedRngWithRtc definition below
-#endif
     ClearDma3Requests();
     ResetBgs();
     SetDefaultFontsPointer();
     InitHeap(gHeap, HEAP_SIZE);
 
     gSoftResetDisabled = FALSE;
-    gHelpSystemEnabled = FALSE;
 
     SetNotInSaveFailedScreen();
 
@@ -192,18 +189,10 @@ static void InitMainCallbacks(void)
     SetMainCallback2(gInitialMainCB2);
     gSaveBlock2Ptr = &gSaveblock2.block;
     gPokemonStoragePtr = &gPokemonStorage.block;
-    gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
 }
 
 static void CallCallbacks(void)
 {
-#if !TESTING && DEBUG_BATTLE_MENU != TRUE // test framework not working with help system
-    if (!RunSaveFailedScreen() && !RunHelpSystemCallback())
-#else
-#if !TESTING
-    if (!RunSaveFailedScreen())
-#endif
-#endif
     {
         if (gMain.callback1)
             gMain.callback1();
diff --git a/src/main_menu.c b/src/main_menu.c
index 199a6e1ce..15d2ee1b8 100644
--- a/src/main_menu.c
+++ b/src/main_menu.c
@@ -3,14 +3,14 @@
 #include "gflib.h"
 
 #include "event_data.h"
-#include "help_system.h"
+
 #include "pokedex.h"
 #include "menu.h"
 #include "rtc.h"
 #include "link.h"
 #include "oak_speech.h"
 #include "overworld.h"
-#include "quest_log.h"
+
 #include "mystery_gift_menu.h"
 #include "save.h"
 #include "scanline_effect.h"
@@ -535,15 +535,17 @@ static void Task_ExecuteMainMenuSelection(u8 taskId)
             StartNewGameScene();
             break;
         case MAIN_MENU_CONTINUE:
+
             gPlttBufferUnfaded[0] = RGB_BLACK;
             gPlttBufferFaded[0] = RGB_BLACK;
             gExitStairsMovementDisabled = FALSE;
             FreeAllWindowBuffers();
-            TryStartQuestLogPlayback(taskId);
+            UpdateLoadedSeason();
+            SetMainCallback2(CB2_ContinueSavedGame);
+            DestroyTask(taskId);
             break;
         case MAIN_MENU_MYSTERYGIFT:
             SetMainCallback2(CB2_InitMysteryGift);
-            HelpSystem_Disable();
             FreeAllWindowBuffers();
             DestroyTask(taskId);
             break;
diff --git a/src/map_name_popup.c b/src/map_name_popup.c
index db2b0cb64..8e7899663 100644
--- a/src/map_name_popup.c
+++ b/src/map_name_popup.c
@@ -3,7 +3,7 @@
 #include "task.h"
 #include "event_data.h"
 #include "text_window.h"
-#include "quest_log.h"
+
 #include "region_map.h"
 #include "strings.h"
 #include "map_name_popup_expansion.h"
@@ -28,8 +28,6 @@ static u8 *MapNamePopupAppendFloorNum(u8 *dest, s8 flags);
 void ShowMapNamePopup(bool32 palIntoFadedBuffer)
 {
     u8 taskId;
-    if (QL_IS_PLAYBACK_STATE)
-        return;
 
     if (OW_POPUP_GENERATION >= GEN_4)
     {
@@ -37,7 +35,7 @@ void ShowMapNamePopup(bool32 palIntoFadedBuffer)
         return;
     }
 
-    if (FlagGet(FLAG_DONT_SHOW_MAP_NAME_POPUP) != TRUE && !QL_IS_PLAYBACK_STATE)
+    if (FlagGet(FLAG_DONT_SHOW_MAP_NAME_POPUP) != TRUE)
     {
         taskId = FindTaskIdByFunc(Task_MapNamePopup);
         if (taskId == TASK_NONE)
diff --git a/src/map_preview_screen.c b/src/map_preview_screen.c
index da8d7eed8..6caae0bae 100644
--- a/src/map_preview_screen.c
+++ b/src/map_preview_screen.c
@@ -1,6 +1,6 @@
 #include "global.h"
 #include "gflib.h"
-#include "quest_log.h"
+
 #include "region_map.h"
 #include "menu.h"
 #include "field_fadetransition.h"
@@ -337,7 +337,7 @@ static u8 GetMapPreviewScreenIdx(u8 mapsec)
     return MPS_COUNT;
 }
 
-bool8 MapHasPreviewScreen(u8 mapsec, u8 type)
+bool32 MapHasPreviewScreen(u8 mapsec, u8 type)
 {
     u8 idx;
 
@@ -359,17 +359,7 @@ bool8 MapHasPreviewScreen(u8 mapsec, u8 type)
     }
 }
 
-bool32 MapHasPreviewScreen_HandleQLState2(u8 mapsec, u8 type)
-{
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-    {
-        return FALSE;
-    }
-    else
-    {
-        return MapHasPreviewScreen(mapsec, type);
-    }
-}
+
 
 void MapPreview_InitBgs(void)
 {
diff --git a/src/menu.c b/src/menu.c
index 5447ed366..b1fec4254 100644
--- a/src/menu.c
+++ b/src/menu.c
@@ -3,11 +3,10 @@
 #include "field_specials.h"
 #include "field_weather.h"
 #include "graphics.h"
-#include "help_message.h"
 #include "menu.h"
 #include "menu_helpers.h"
 #include "pokemon_icon.h"
-#include "quest_log.h"
+
 #include "script.h"
 #include "strings.h"
 #include "text_window.h"
@@ -140,7 +139,6 @@ void InitStandardTextBoxWindows(void)
 {
     InitWindows(sStandardTextBox_WindowTemplates);
     sStartMenuWindowId = WINDOW_NONE;;
-    MapNamePopupWindowIdSetDummy();
     InitPopupWindows();
 }
 
@@ -213,16 +211,8 @@ void AddTextPrinterWithCustomSpeedForMessage(bool8 allowSkippingDelayWithButtonP
 
 void LoadMessageBoxAndBorderGfx(void)
 {
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-    {
-        gTextFlags.autoScroll = 1;
-        LoadQuestLogWindowTiles(0, DLG_WINDOW_BASE_TILE_NUM);
-    }
-    else
-    {
-        Menu_LoadStdPal();
-        LoadMessageBoxGfx(0, DLG_WINDOW_BASE_TILE_NUM, BG_PLTT_ID(DLG_WINDOW_PALETTE_NUM));
-    }
+    Menu_LoadStdPal();
+    LoadMessageBoxGfx(0, DLG_WINDOW_BASE_TILE_NUM, BG_PLTT_ID(DLG_WINDOW_PALETTE_NUM));
     LoadUserWindowBorderGfx(0, STD_WINDOW_BASE_TILE_NUM, BG_PLTT_ID(STD_WINDOW_PALETTE_NUM));
 }
 
@@ -251,8 +241,6 @@ void ClearDialogWindowAndFrame(u8 windowId, bool8 copyToVram)
     ClearWindowTilemap(windowId);
     if (copyToVram == TRUE)
         CopyWindowToVram(windowId, COPYWIN_FULL);
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-        CommitQuestLogWindow1();
 }
 
 void ClearStdWindowAndFrame(u8 windowId, bool8 copyToVram)
@@ -283,7 +271,7 @@ static void WindowFunc_DrawStandardFrame(u8 bg, u8 tilemapLeft, u8 tilemapTop, u
 
 static void WindowFunc_DrawDialogueFrame(u8 bg, u8 tilemapLeft, u8 tilemapTop, u8 width, u8 height, u8 paletteNum)
 {
-    if (!IsMsgSignpost() || gQuestLogState == QL_STATE_PLAYBACK)
+    if (!IsMsgSignpost())
     {
         FillBgTilemapBufferRect(bg, DLG_WINDOW_BASE_TILE_NUM + 0, tilemapLeft - 2, tilemapTop - 1, 1, 1, DLG_WINDOW_PALETTE_NUM);
         FillBgTilemapBufferRect(bg, DLG_WINDOW_BASE_TILE_NUM + 1, tilemapLeft - 1, tilemapTop - 1, 1, 1, DLG_WINDOW_PALETTE_NUM);
@@ -360,15 +348,8 @@ void SetStandardWindowBorderStyle(u8 windowId, bool8 copyToVram)
 
 void LoadMessageBoxAndFrameGfx(u8 windowId, bool8 copyToVram)
 {
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-    {
-        gTextFlags.autoScroll = 1;
-        LoadQuestLogWindowTiles(0, DLG_WINDOW_BASE_TILE_NUM);
-    }
-    else
-    {
-        LoadMessageBoxGfx(windowId, DLG_WINDOW_BASE_TILE_NUM, BG_PLTT_ID(DLG_WINDOW_PALETTE_NUM));
-    }
+    LoadMessageBoxGfx(windowId, DLG_WINDOW_BASE_TILE_NUM, BG_PLTT_ID(DLG_WINDOW_PALETTE_NUM));
+
     DrawDialogFrameWithCustomTileAndPalette(windowId, copyToVram, DLG_WINDOW_BASE_TILE_NUM, DLG_WINDOW_PALETTE_NUM);
 }
 
@@ -1523,13 +1504,6 @@ void HBlankCB_DoublePopupWindow(void)
 
 void DrawHelpMessageWindowWithText(const u8 * text)
 {
-    LoadHelpMessageWindowGfx(CreateHelpMessageWindow(), DLG_WINDOW_BASE_TILE_NUM, BG_PLTT_ID(DLG_WINDOW_PALETTE_NUM));
-    PrintTextOnHelpMessageWindow(text, 2);
-}
-
-void DestroyHelpMessageWindow_(void)
-{
-    DestroyHelpMessageWindow(2);
 }
 
 void LoadSignpostWindowFrameGfx(void)
diff --git a/src/mystery_gift.c b/src/mystery_gift.c
index 7b4be4547..3348a151f 100644
--- a/src/mystery_gift.c
+++ b/src/mystery_gift.c
@@ -12,7 +12,7 @@
 #include "new_game.h"
 #include "wonder_news.h"
 #include "mystery_gift_menu.h"
-#include "help_system.h"
+
 #include "mystery_gift.h"
 #include "strings.h"
 
diff --git a/src/mystery_gift_menu.c b/src/mystery_gift_menu.c
index f880a86f2..b5ed062b6 100644
--- a/src/mystery_gift_menu.c
+++ b/src/mystery_gift_menu.c
@@ -15,7 +15,7 @@
 #include "mystery_gift_server.h"
 #include "mystery_gift_client.h"
 #include "wonder_news.h"
-#include "help_system.h"
+
 #include "strings.h"
 #include "decompress.h"
 #include "constants/cable_club.h"
@@ -1566,7 +1566,6 @@ static void Task_MysteryGift(u8 taskId)
         break;
     case MG_STATE_EXIT:
         CloseLink();
-        HelpSystem_Enable();
         Free(data->clientMsg);
         DestroyTask(taskId);
         SetMainCallback2(MainCB_FreeAllBuffersAndReturnToInitTitleScreen);
diff --git a/src/naming_screen.c b/src/naming_screen.c
index fd07b23e4..cc462c96c 100644
--- a/src/naming_screen.c
+++ b/src/naming_screen.c
@@ -9,7 +9,7 @@
 #include "field_player_avatar.h"
 #include "field_specials.h"
 #include "graphics.h"
-#include "help_system.h"
+
 #include "menu.h"
 #include "overworld.h"
 #include "naming_screen.h"
@@ -551,8 +551,6 @@ static void CreateNamingScreenTask(void)
 {
     CreateTask(Task_NamingScreen, 2);
     SetMainCallback2(CB2_NamingScreen);
-    BackupHelpContext();
-    SetHelpContext(HELPCONTEXT_NAMING_SCREEN);
 }
 
 static void Task_NamingScreen(u8 taskId)
@@ -715,7 +713,6 @@ static bool8 MainState_Exit(void)
         DestroyTask(FindTaskIdByFunc(Task_NamingScreen));
         FreeAllWindowBuffers();
         FREE_AND_SET_NULL(sNamingScreen);
-        RestoreHelpContext();
     }
     return FALSE;
 }
diff --git a/src/new_game.c b/src/new_game.c
index efa5adac8..e5227d3e8 100644
--- a/src/new_game.c
+++ b/src/new_game.c
@@ -8,7 +8,7 @@
 #include "tm_case.h"
 #include "berry_pouch.h"
 #include "clock.h"
-#include "quest_log.h"
+#include "field_specials.h"
 #include "wild_encounter.h"
 #include "event_data.h"
 #include "mail_data.h"
@@ -70,7 +70,7 @@ static void SetDefaultOptions(void)
     gSaveBlock2Ptr->optionsBattleStyle = OPTIONS_BATTLE_STYLE_SHIFT;
     gSaveBlock2Ptr->optionsBattleSceneOff = FALSE;
     gSaveBlock2Ptr->regionMapZoom = FALSE;
-    gSaveBlock2Ptr->optionsButtonMode = OPTIONS_BUTTON_MODE_HELP;
+    gSaveBlock2Ptr->optionsButtonMode = 1;
 }
 
 static void ClearPokedexFlags(void)
@@ -104,7 +104,6 @@ void ResetMenuAndMonGlobals(void)
     ResetBagCursorPositions();
     ResetTMCaseCursorPos();
     BerryPouch_CursorResetToTop();
-    ResetQuestLog();
     SeedWildEncounterRng(Random());
     ResetSpecialVars();
 }
diff --git a/src/oak_speech.c b/src/oak_speech.c
index e6d7a55ae..6f84607e9 100644
--- a/src/oak_speech.c
+++ b/src/oak_speech.c
@@ -4,7 +4,7 @@
 #include "decompress.h"
 #include "event_scripts.h"
 #include "gpu_regs.h"
-#include "help_system.h"
+
 #include "malloc.h"
 #include "math_util.h"
 #include "menu.h"
@@ -724,7 +724,6 @@ static void Task_NewGameScene(u8 taskId)
         ResetSpriteData();
         FreeAllSpritePalettes();
         ResetTempTileDataBuffers();
-        SetHelpContext(HELPCONTEXT_NEW_GAME);
         break;
     case 1:
         sOakSpeechResources = AllocZeroed(sizeof(*sOakSpeechResources));
diff --git a/src/option_menu.c b/src/option_menu.c
index a86ea22d3..5b5b49b8a 100644
--- a/src/option_menu.c
+++ b/src/option_menu.c
@@ -4,7 +4,7 @@
 #include "menu.h"
 #include "task.h"
 #include "overworld.h"
-#include "help_system.h"
+
 #include "text_window.h"
 #include "strings.h"
 #include "field_fadetransition.h"
@@ -217,7 +217,6 @@ void CB2_OptionsMenuFromStartMenu(void)
         if (sOptionMenuPtr->option[i] > (sOptionMenuItemCounts[i]) - 1)
             sOptionMenuPtr->option[i] = 0;
     }
-    SetHelpContext(HELPCONTEXT_OPTIONS);
     SetMainCallback2(CB2_OptionMenu);
 }
 
diff --git a/src/overworld.c b/src/overworld.c
index 3818d5f7c..05b32e944 100644
--- a/src/overworld.c
+++ b/src/overworld.c
@@ -22,7 +22,7 @@
 #include "fieldmap.h"
 #include "fldeff.h"
 #include "heal_location.h"
-#include "help_system.h"
+
 #include "item.h"
 #include "item_icon.h"
 #include "link.h"
@@ -37,8 +37,8 @@
 #include "new_game.h"
 #include "overworld.h"
 #include "play_time.h"
-#include "quest_log.h"
-#include "quest_log_objects.h"
+
+
 #include "random.h"
 #include "renewable_hidden_items.h"
 #include "roamer.h"
@@ -167,9 +167,6 @@ static void SetCameraToTrackGuestPlayer_2(void);
 static void OffsetCameraFocusByLinkPlayerId(void);
 static void SpawnLinkPlayers(void);
 static void CreateLinkPlayerSprites(void);
-static void CB2_LoadMapForQLPlayback(void);
-static void DoLoadMap_QLPlayback(u8 *state);
-static bool32 LoadMap_QLPlayback(u8 *state);
 static bool32 SetUpScrollSceneForCredits(u8 *state, u8 unused);
 static bool8 MapLdr_Credits(void);
 static void CameraCB_CreditsPan(struct CameraObject * camera);
@@ -302,8 +299,6 @@ void Overworld_ResetStateAfterFly(void)
     VarSet(VAR_MAP_SCENE_FUCHSIA_CITY_SAFARI_ZONE_ENTRANCE, 0);
     FlagClear(FLAG_SYS_USE_STRENGTH);
     FlagClear(FLAG_SYS_FLASH_ACTIVE);
-    FlagClear(FLAG_SYS_QL_DEPARTED);
-    VarSet(VAR_QL_ENTRANCE, 0);
 }
 
 void Overworld_ResetStateAfterTeleport(void)
@@ -316,8 +311,6 @@ void Overworld_ResetStateAfterTeleport(void)
     VarSet(VAR_MAP_SCENE_FUCHSIA_CITY_SAFARI_ZONE_ENTRANCE, 0);
     FlagClear(FLAG_SYS_USE_STRENGTH);
     FlagClear(FLAG_SYS_FLASH_ACTIVE);
-    FlagClear(FLAG_SYS_QL_DEPARTED);
-    VarSet(VAR_QL_ENTRANCE, 0);
 }
 
 void Overworld_ResetStateAfterDigEscRope(void)
@@ -330,8 +323,6 @@ void Overworld_ResetStateAfterDigEscRope(void)
     VarSet(VAR_MAP_SCENE_FUCHSIA_CITY_SAFARI_ZONE_ENTRANCE, 0);
     FlagClear(FLAG_SYS_USE_STRENGTH);
     FlagClear(FLAG_SYS_FLASH_ACTIVE);
-    FlagClear(FLAG_SYS_QL_DEPARTED);
-    VarSet(VAR_QL_ENTRANCE, 0);
 }
 
 #if B_RESET_FLAGS_VARS_AFTER_WHITEOUT  == TRUE
@@ -371,8 +362,6 @@ static void Overworld_ResetStateAfterWhitingOut(void)
     FlagClear(FLAG_SYS_FLASH_ACTIVE);
     if (B_RESET_FLAGS_VARS_AFTER_WHITEOUT == TRUE)
         Overworld_ResetBattleFlagsAndVars();
-    FlagClear(FLAG_SYS_QL_DEPARTED);
-    VarSet(VAR_QL_ENTRANCE, 0);
 }
 
 static void Overworld_ResetStateOnContinue(void)
@@ -799,7 +788,6 @@ void LoadMapFromCameraTransition(u8 mapGroup, u8 mapNum)
     InitSecondaryTilesetAnimation();
     UpdateLocationHistoryForRoamer();
     RoamerMove();
-    QL_ResetDefeatedWildMonRecord();
     DoCurrentWeather();
     ResetFieldTasksArgs();
     RunOnResumeMapScript();
@@ -834,24 +822,9 @@ static void LoadMapFromWarp(bool32 unused)
     TryRegenerateRenewableHiddenItems();
     UpdateLocationHistoryForRoamer();
     RoamerMoveToOtherLocationSet();
-    QL_ResetDefeatedWildMonRecord();
     InitMap();
 }
 
-static void QL_LoadMapNormal(void)
-{
-    LoadCurrentMapData();
-    LoadObjEventTemplatesFromHeader();
-    TrySetMapSaveWarpStatus();
-    DoTimeBasedEvents();
-    SetSavedWeatherFromCurrMapHeader();
-    ChooseAmbientCrySpecies();
-    SetDefaultFlashLevel();
-    QL_ResetDefeatedWildMonRecord();
-    QL_RestoreMapLayoutId();
-    LoadSaveblockMapHeader();
-    InitMap();
-}
 
 // Routines related to the initial player avatar state
 
@@ -1414,7 +1387,6 @@ static void DoCB1_Overworld(u16 newKeys, u16 heldKeys)
 {
     struct FieldInput fieldInput;
 
-    QL_TryRunActions();
     UpdatePlayerAvatarTransitionState();
     FieldClearPlayerInput(&fieldInput);
     FieldGetPlayerInput(&fieldInput, newKeys, heldKeys);
@@ -1423,8 +1395,6 @@ static void DoCB1_Overworld(u16 newKeys, u16 heldKeys)
     {
         if (ProcessPlayerFieldInput(&fieldInput) == TRUE)
         {
-            if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_RECORDING)
-                QL_RecordFieldInput(&gFieldInputRecord);
             LockPlayerFieldControls();
             DismissMapNamePopup();
         }
@@ -1433,47 +1403,13 @@ static void DoCB1_Overworld(u16 newKeys, u16 heldKeys)
             player_step(fieldInput.dpadDirection, newKeys, heldKeys);
         }
     }
-    RunQuestLogCB();
-}
-
-static void DoCB1_Overworld_QuestLogPlayback(void)
-{
-    struct FieldInput fieldInput;
-
-    QL_TryRunActions();
-    UpdatePlayerAvatarTransitionState();
-    QL_HandleInput();
-    FieldClearPlayerInput(&fieldInput);
-    fieldInput = gQuestLogFieldInput;
-    FieldInput_HandleCancelSignpost(&fieldInput);
-    if (!ArePlayerFieldControlsLocked())
-    {
-        if (ProcessPlayerFieldInput(&fieldInput) == TRUE)
-        {
-            LockPlayerFieldControls();
-            DismissMapNamePopup();
-        }
-        else
-        {
-            RunQuestLogCB();
-        }
-    }
-    else if (QuestLogScenePlaybackIsEnding() == TRUE)
-    {
-        RunQuestLogCB();
-    }
-    FieldClearPlayerInput(&gQuestLogFieldInput);
 }
 
 void CB1_Overworld(void)
 {
     if (gMain.callback2 == CB2_Overworld)
-    {
-        if (QL_GetPlaybackState() == QL_PLAYBACK_STATE_RUNNING || gQuestLogState == QL_STATE_PLAYBACK)
-            DoCB1_Overworld_QuestLogPlayback();
-        else
-            DoCB1_Overworld(gMain.newKeys, gMain.heldKeys);
-    }
+        DoCB1_Overworld(gMain.newKeys, gMain.heldKeys);
+    
 }
 
 #define TINT_NIGHT Q_8_8(0.456) | Q_8_8(0.456) << 8 | Q_8_8(0.615) << 16
@@ -1565,8 +1501,6 @@ void UpdateAltBgPalettes(u16 palettes)
     const struct Tileset *primary = GetPrimaryTileset(gMapHeader.mapLayout);
     const struct Tileset *secondary = GetSecondaryTileset(gMapHeader.mapLayout);
     u32 i = 1;
-    if (QL_IS_PLAYBACK_STATE)
-        return;
     if (!MapHasNaturalLight(gMapHeader.mapType))
         return;
     palettes &= ~((1 << NUM_PALS_IN_PRIMARY) - 1) | primary->swapPalettes;
@@ -1591,8 +1525,6 @@ void UpdateAltBgPalettes(u16 palettes)
 
 void UpdatePalettesWithTime(u32 palettes)
 {
-    if (QL_IS_PLAYBACK_STATE)
-        return;
     if (MapHasNaturalLight(gMapHeader.mapType))
     {
         u32 i;
@@ -1611,8 +1543,6 @@ void UpdatePalettesWithTime(u32 palettes)
 
 u8 UpdateSpritePaletteWithTime(u8 paletteNum)
 {
-    if (QL_IS_PLAYBACK_STATE)
-        return paletteNum;
     if (MapHasNaturalLight(gMapHeader.mapType))
     {
         if (IS_BLEND_IMMUNE_TAG(GetSpritePaletteTagByPaletteNum(paletteNum)))
@@ -1628,7 +1558,6 @@ static void OverworldBasic(void)
     RunTasks();
     AnimateSprites();
     CameraUpdate();
-    SetQuestLogEvent_Arrived();
     UpdateCameraPanning();
     BuildOamBuffer();
     UpdatePaletteFade();
@@ -1732,7 +1661,6 @@ void CB2_WhiteOut(void)
         gFieldCallback = FieldCB_RushInjuredPokemonToCenter;
         val = 0;
         DoMapLoadLoop(&val);
-        QuestLog_CutRecording();
         SetFieldVBlankCallback();
         SetMainCallback1(CB1_Overworld);
         SetMainCallback2(CB2_Overworld);
@@ -1752,16 +1680,9 @@ void CB2_LoadMap(void)
 static void CB2_LoadMap2(void)
 {
     DoMapLoadLoop(&gMain.state);
-    if (QuestLog_ShouldEndSceneOnMapChange() == TRUE)
-    {
-        QuestLog_AdvancePlayhead_();
-    }
-    else
-    {
-        SetFieldVBlankCallback();
-        SetMainCallback1(CB1_Overworld);
-        SetMainCallback2(CB2_Overworld);
-    }
+    SetFieldVBlankCallback();
+    SetMainCallback1(CB1_Overworld);
+    SetMainCallback2(CB2_Overworld);
 }
 
 void CB2_ReturnToFieldCableClub(void)
@@ -1967,7 +1888,6 @@ static bool32 LoadMapInStepsLink(u8 *state)
         InitObjectEventsLink();
         SpawnLinkPlayers();
         SetCameraToTrackGuestPlayer();
-        SetHelpContextForMap();
         (*state)++;
         break;
     case 4:
@@ -2033,7 +1953,6 @@ static bool32 LoadMapInStepsLocal(u8 *state, bool32 inLink)
         (*state)++;
         break;
     case 1:
-        QuestLog_InitPalettesBackup();
         (*state)++;
         break;
     case 2:
@@ -2041,19 +1960,11 @@ static bool32 LoadMapInStepsLocal(u8 *state, bool32 inLink)
         (*state)++;
         break;
     case 3:
-        if (QuestLog_ShouldEndSceneOnMapChange() == TRUE)
-            return TRUE;
         (*state)++;
         break;
     case 4:
         InitObjectEventsLocal();
         SetCameraToTrackPlayer();
-        if (gQuestLogState != QL_STATE_PLAYBACK)
-        {
-            QuestLog_CheckDepartingIndoorsMap();
-            QuestLog_TryRecordDepartedLocation();
-        }
-        SetHelpContextForMap();
         (*state)++;
         break;
     case 5:
@@ -2089,10 +2000,10 @@ static bool32 LoadMapInStepsLocal(u8 *state, bool32 inLink)
         (*state)++;
         break;
     case 12:
-        if (GetLastUsedWarpMapSectionId() != gMapHeader.regionMapSectionId && MapHasPreviewScreen_HandleQLState2(gMapHeader.regionMapSectionId, MPS_TYPE_FOREST) == TRUE)
+        if (GetLastUsedWarpMapSectionId() != gMapHeader.regionMapSectionId && MapHasPreviewScreen(gMapHeader.regionMapSectionId, MPS_TYPE_FOREST) == TRUE)
         {
-            MapPreview_LoadGfx(gMapHeader.regionMapSectionId);
-            MapPreview_StartForestTransition(gMapHeader.regionMapSectionId);
+           MapPreview_LoadGfx(gMapHeader.regionMapSectionId);
+           MapPreview_StartForestTransition(gMapHeader.regionMapSectionId);
         }
         else if (gMapHeader.showMapName == TRUE)
         {
@@ -2116,7 +2027,6 @@ static bool32 ReturnToFieldLocal(u8 *state)
     {
     case 0:
         InitOverworldBgs();
-        QuestLog_InitPalettesBackup();
         ResumeMap(FALSE);
         ReloadObjectsAndRunReturnToFieldMapScript();
         if (gFieldCallback == FieldCallback_UseFly)
@@ -2131,7 +2041,6 @@ static bool32 ReturnToFieldLocal(u8 *state)
         break;
     case 2:
         InitViewGraphics();
-        SetHelpContextForMap();
         (*state)++;
         break;
     case 3:
@@ -2154,7 +2063,6 @@ static bool32 ReturnToFieldLink(u8 *state)
         (*state)++;
         break;
     case 1:
-        QuestLog_InitPalettesBackup();
         ResumeMap(TRUE);
         (*state)++;
         break;
@@ -2162,7 +2070,6 @@ static bool32 ReturnToFieldLink(u8 *state)
         CreateLinkPlayerSprites();
         ReloadObjectsAndRunReturnToFieldMapScript();
         SetCameraToTrackGuestPlayer_2();
-        SetHelpContextForMap();
         (*state)++;
         break;
     case 3:
@@ -2384,147 +2291,7 @@ static void CreateLinkPlayerSprites(void)
         CreateLinkPlayerSprite(i, gLinkPlayers[i].version);
 }
 
-// Quest Log
-
-void CB2_SetUpOverworldForQLPlaybackWithWarpExit(void)
-{
-    FieldClearVBlankHBlankCallbacks();
-    gGlobalFieldTintMode = QL_TINT_GRAYSCALE;
-    ScriptContext_Init();
-    UnlockPlayerFieldControls();
-    SetMainCallback1(NULL);
-    SetMainCallback2(CB2_DoChangeMap);
-    gMain.savedCallback = CB2_LoadMapForQLPlayback;
-}
-
-void CB2_SetUpOverworldForQLPlayback(void)
-{
-    FieldClearVBlankHBlankCallbacks();
-    gGlobalFieldTintMode = QL_TINT_GRAYSCALE;
-    LoadSaveblockMapHeader();
-    ScriptContext_Init();
-    UnlockPlayerFieldControls();
-    SetMainCallback1(NULL);
-    SetMainCallback2(CB2_LoadMapForQLPlayback);
-}
-
-static void CB2_LoadMapForQLPlayback(void)
-{
-    DoLoadMap_QLPlayback(&gMain.state);
-    SetFieldVBlankCallback();
-    SetMainCallback1(CB1_Overworld);
-    SetMainCallback2(CB2_Overworld);
-}
 
-static void DoLoadMap_QLPlayback(u8 *state)
-{
-    while (!LoadMap_QLPlayback(state))
-        ;
-}
-
-static bool32 LoadMap_QLPlayback(u8 *state)
-{
-    switch (*state)
-    {
-    case 0:
-        InitOverworldBgs();
-        FieldClearVBlankHBlankCallbacks();
-        QuestLog_InitPalettesBackup();
-        QL_CopySaveState();
-        QL_ResetPartyAndPC();
-        if (GetQuestLogStartType() == QL_START_WARP)
-        {
-            gExitStairsMovementDisabled = FALSE;
-            LoadMapFromWarp(FALSE);
-        }
-        else
-        {
-            gExitStairsMovementDisabled = TRUE;
-            QL_LoadMapNormal();
-        }
-        (*state)++;
-        break;
-    case 1:
-        QL_InitSceneObjectsAndActions();
-        (*state)++;
-        break;
-    case 2:
-        ResumeMap(FALSE);
-        (*state)++;
-        break;
-    case 3:
-        ReloadObjectsAndRunReturnToFieldMapScript();
-        SetCameraToTrackPlayer();
-        (*state)++;
-        break;
-    case 4:
-        InitCurrentFlashLevelScanlineEffect();
-        InitOverworldGraphicsRegisters();
-        (*state)++;
-        break;
-    case 5:
-        move_tilemap_camera_to_upper_left_corner();
-        (*state)++;
-        break;
-    case 6:
-        CopyPrimaryTilesetToVram(gMapHeader.mapLayout);
-        (*state)++;
-        break;
-    case 7:
-        CopySecondaryTilesetToVram(gMapHeader.mapLayout);
-        (*state)++;
-        break;
-    case 8:
-        if (FreeTempTileDataBuffersIfPossible() != TRUE)
-        {
-            LoadMapTilesetPalettes(gMapHeader.mapLayout);
-            (*state)++;
-        }
-        break;
-    case 9:
-        DrawWholeMapView();
-        (*state)++;
-        break;
-    case 10:
-        InitTilesetAnimations();
-        QL_TryStopSurfing();
-        (*state)++;
-        break;
-    default:
-        if (RunFieldCallback())
-            return TRUE;
-        break;
-    }
-    return FALSE;
-}
-
-void CB2_EnterFieldFromQuestLog(void)
-{
-    FieldClearVBlankHBlankCallbacks();
-    StopMapMusic();
-    gGlobalFieldTintMode = QL_TINT_BACKUP_GRAYSCALE;
-    ResetSafariZoneFlag_();
-    LoadSaveblockMapHeader();
-    LoadSaveblockObjEventScripts();
-    UnfreezeObjectEvents();
-    Overworld_ResetStateOnContinue();
-    InitMapFromSavedGame();
-    PlayTimeCounter_Start();
-    ScriptContext_Init();
-    gExitStairsMovementDisabled = TRUE;
-    if (UseContinueGameWarp() == TRUE)
-    {
-        ClearContinueGameWarpStatus();
-        SetWarpDestinationToContinueGameWarp();
-        WarpIntoMap();
-        SetMainCallback2(CB2_LoadMap);
-    }
-    else
-    {
-        SetMainCallback1(CB1_Overworld);
-        CB2_ReturnToField();
-    }
-}
 
 // Credits
 
@@ -2553,10 +2320,9 @@ static bool8 FieldCB2_Credits_WaitFade(void)
         return FALSE;
 }
 
-bool32 Overworld_DoScrollSceneForCredits(u8 *state_p, const struct CreditsOverworldCmd * script, u8 tintMode)
+bool32 Overworld_DoScrollSceneForCredits(u8 *state_p, const struct CreditsOverworldCmd * script)
 {
     sCreditsOverworld_Script = script;
-    gGlobalFieldTintMode = tintMode;
     return SetUpScrollSceneForCredits(state_p, 0);
 }
 
diff --git a/src/party_menu.c b/src/party_menu.c
index b427b1f17..33d37be9f 100644
--- a/src/party_menu.c
+++ b/src/party_menu.c
@@ -20,8 +20,7 @@
 #include "fieldmap.h"
 #include "fldeff.h"
 #include "graphics.h"
-#include "help_message.h"
-#include "help_system.h"
+
 #include "item.h"
 #include "item_menu.h"
 #include "item_use.h"
@@ -45,7 +44,7 @@
 #include "pokemon_special_anim.h"
 #include "pokemon_storage_system.h"
 #include "pokemon_summary_screen.h"
-#include "quest_log.h"
+
 #include "region_map.h"
 #include "reshow_battle_screen.h"
 #include "scanline_effect.h"
@@ -71,7 +70,6 @@
 #include "constants/maps.h"
 #include "constants/moves.h"
 #include "constants/pokemon.h"
-#include "constants/quest_log.h"
 #include "constants/songs.h"
 #include "constants/sound.h"
 
@@ -270,7 +268,6 @@ static void UpdatePartySelectionDoubleLayout(s8 *slotPtr, s8 movementDir);
 static s8 GetNewSlotDoubleLayout(s8 slotId, s8 movementDir);
 static void Task_PrintAndWaitForText(u8 taskId);
 static void PartyMenuPrintText(const u8 *text);
-static void SetSwappedHeldItemQuestLogEvent(struct Pokemon *mon, u16 item, u16 item2);
 static bool16 IsMonAllowedInPokemonJump(struct Pokemon *mon);
 static bool16 IsMonAllowedInDodrioBerryPicking(struct Pokemon *mon);
 static void Task_CancelParticipationYesNo(u8 taskId);
@@ -400,8 +397,6 @@ static void PartyMenuHandlePokedudeCancel(void);
 static void PartyMenu_Oak_PrintText(u8 windowId, const u8 *str);
 static u8 FirstBattleEnterParty_CreateWindowAndMsg1Printer(void);
 static void FirstBattleEnterParty_DestroyVoiceoverWindow(u8 windowId);
-static void SetSwitchedPartyOrderQuestLogEvent(void);
-static void SetUsedFieldMoveQuestLogEvent(struct Pokemon *mon, u8 fieldMove);
 static void CB2_DoUseItemAnim(void);
 static void CB2_UseItem(void);
 static void ItemUseCB_RestorePP(u8 taskId, TaskFunc func);
@@ -428,7 +423,6 @@ EWRAM_DATA u8 gSelectedMonPartyId = 0;
 EWRAM_DATA MainCallback gPostMenuFieldCallback = NULL;
 static EWRAM_DATA u16 *sSlot1TilemapBuffer = NULL; // for switching party slots
 static EWRAM_DATA u16 *sSlot2TilemapBuffer = NULL;
-static EWRAM_DATA struct Pokemon *sSacredAshQuestLogMonBackup = NULL;
 EWRAM_DATA u8 gSelectedOrderFromParty[MAX_FRONTIER_PARTY_SIZE] = {0};
 static EWRAM_DATA u16 sPartyMenuItemId = ITEM_NONE;
 ALIGNED(4) EWRAM_DATA u8 gBattlePartyCurrentOrder[PARTY_SIZE / 2] = {0}; // bits 0-3 are the current pos of Slot 1, 4-7 are Slot 2, and so on
@@ -630,7 +624,6 @@ static bool8 ShowPartyMenu(void)
         ++gMain.state;
         break;
     case 19:
-        SetHelpContext(HELPCONTEXT_PARTY_MENU);
         ++gMain.state;
         break;
     case 20:
@@ -737,7 +730,6 @@ static bool8 ReloadPartyMenu(void)
         gMain.state++;
         break;
     case 17:
-        SetHelpContext(HELPCONTEXT_PARTY_MENU);
         ++gMain.state;
         break;
     case 18:
@@ -1802,12 +1794,6 @@ static void Task_ReturnToChooseMonAfterText(u8 taskId)
 
 static void DisplayGaveHeldItemMessage(struct Pokemon *mon, u16 item, bool8 keepOpen, bool8 fromBagMenu)
 {
-    if (!fromBagMenu) // Used Give option from party menu
-        ItemUse_SetQuestLogEvent(QL_EVENT_GAVE_HELD_ITEM, mon, item, 0xFFFF);
-    // else if (gPartyMenu.action == PARTY_ACTION_GIVE_PC_ITEM)
-    //     ItemUse_SetQuestLogEvent(QL_EVENT_GAVE_HELD_ITEM_PC, mon, item, 0xFFFF);
-    else
-        ItemUse_SetQuestLogEvent(QL_EVENT_GAVE_HELD_ITEM_BAG, mon, item, 0xFFFF);
     GetMonNickname(mon, gStringVar1);
     CopyItemName(item, gStringVar2);
     StringExpandPlaceholders(gStringVar4, gText_PkmnWasGivenItem);
@@ -1817,7 +1803,6 @@ static void DisplayGaveHeldItemMessage(struct Pokemon *mon, u16 item, bool8 keep
 
 static void DisplayTookHeldItemMessage(struct Pokemon *mon, u16 item, bool8 keepOpen)
 {
-    ItemUse_SetQuestLogEvent(QL_EVENT_TOOK_HELD_ITEM, mon, item, 0xFFFF);
     GetMonNickname(mon, gStringVar1);
     CopyItemName(item, gStringVar2);
     StringExpandPlaceholders(gStringVar4, gText_ReceivedItemFromPkmn);
@@ -1836,7 +1821,6 @@ static void DisplayAlreadyHoldingItemSwitchMessage(struct Pokemon *mon, u16 item
 
 static void DisplaySwitchedHeldItemMessage(u16 item, u16 item2, bool8 keepOpen)
 {
-    SetSwappedHeldItemQuestLogEvent(&gPlayerParty[gPartyMenu.slotId], item2, item);
     CopyItemName(item, gStringVar1);
     CopyItemName(item2, gStringVar2);
     StringExpandPlaceholders(gStringVar4, gText_SwitchedPkmnItem);
@@ -2832,7 +2816,6 @@ static void ToggleFieldMoveDescriptionWindow(u8 action)
     {
         if (ptr->windowId[2] == WINDOW_NONE)
             ptr->windowId[2] = AddWindow(&sFieldMoveDescriptionWindowTemplate);
-        DrawHelpMessageWindowTilesById(ptr->windowId[2]);
         letterSpacing = GetFontAttribute(FONT_NORMAL, FONTATTR_LETTER_SPACING);
         AddTextPrinterParameterized4(ptr->windowId[2], FONT_NORMAL, 3, 6, letterSpacing, 0, sFontColorTable[5], 0, gFieldMovesInfo[action - CURSOR_OPTION_FIELD_MOVES].description);
         PutWindowTilemap(ptr->windowId[2]);
@@ -3349,7 +3332,7 @@ static void SwitchSelectedMons(u8 taskId)
     else
     {
         // Initialize switching party mons slide animation
-        SetSwitchedPartyOrderQuestLogEvent();
+        
         windowIds[0] = sPartyMenuBoxes[gPartyMenu.slotId].windowId;
         tSlot1Left = GetWindowAttribute(windowIds[0], WINDOW_TILEMAP_LEFT);
         tSlot1Top = GetWindowAttribute(windowIds[0], WINDOW_TILEMAP_TOP);
@@ -3552,15 +3535,6 @@ static void SwitchPartyMon(void)
     SwitchMenuBoxSprites(&menuBoxes[0]->statusSpriteId, &menuBoxes[1]->statusSpriteId);
 }
 
-static void SetSwitchedPartyOrderQuestLogEvent(void)
-{
-    struct QuestLogEvent_SwitchedPartyOrder * data = Alloc(sizeof(*data));
-
-    data->species1 = GetMonData(&gPlayerParty[gPartyMenu.slotId], MON_DATA_SPECIES_OR_EGG);
-    data->species2 = GetMonData(&gPlayerParty[gPartyMenu.slotId2], MON_DATA_SPECIES_OR_EGG);
-    SetQuestLogEvent(QL_EVENT_SWITCHED_PARTY_ORDER, (const u16 *)data);
-    Free(data);
-}
 
 // Finish switching mons or using Softboiled
 static void FinishTwoMonAction(u8 taskId)
@@ -4154,7 +4128,6 @@ static void CursorCB_FieldMove(u8 taskId)
                 break;
             default:
                 gPartyMenu.exitCallback = CB2_ReturnToField;
-                SetUsedFieldMoveQuestLogEvent(&gPlayerParty[GetCursorSelectionMonId()], fieldMove);
                 Task_ClosePartyMenu(taskId);
                 break;
             }
@@ -4200,7 +4173,6 @@ static void Task_HandleFieldMoveExitAreaYesNoInput(u8 taskId)
     {
     case 0: // Yes
         gPartyMenu.exitCallback = CB2_ReturnToField;
-        SetUsedFieldMoveQuestLogEvent(&gPlayerParty[GetCursorSelectionMonId()], sPartyMenuInternal->data[0]);
         Task_ClosePartyMenu(taskId);
         break;
     case MENU_B_PRESSED:
@@ -4327,64 +4299,8 @@ bool32 FieldMove_SetUpWaterfall(void)
     return FALSE;
 }
 
-static void SetSwappedHeldItemQuestLogEvent(struct Pokemon *mon, u16 item, u16 item2)
-{
-    struct QuestLogEvent_SwappedHeldItem *data = Alloc(sizeof(*data));
-
-    data->species = GetMonData(mon, MON_DATA_SPECIES_OR_EGG);
-    data->takenItemId = item;
-    data->givenItemId = item2;
-    // if (gPartyMenu.action == PARTY_ACTION_GIVE_PC_ITEM)
-    //     SetQuestLogEvent(QL_EVENT_SWAPPED_HELD_ITEM_PC, (void *)data);
-    // else
-        SetQuestLogEvent(QL_EVENT_SWAPPED_HELD_ITEM, (void *)data);
-    Free(data);
-}
-
-static void SetUsedFieldMoveQuestLogEvent(struct Pokemon *mon, u8 fieldMove)
-{
-    struct QuestLogEvent_FieldMove *data = Alloc(sizeof(*data));
-
-    data->species = GetMonData(mon, MON_DATA_SPECIES_OR_EGG);
-    data->fieldMove = fieldMove;
-    switch (data->fieldMove)
-    {
-    case FIELD_MOVE_TELEPORT:
-        data->mapSec = Overworld_GetMapHeaderByGroupAndId(gSaveBlock1Ptr->lastHealLocation.mapGroup, gSaveBlock1Ptr->lastHealLocation.mapNum)->regionMapSectionId;
-        break;
-    case FIELD_MOVE_DIG:
-        data->mapSec = gMapHeader.regionMapSectionId;
-        break;
-    default:
-        data->mapSec = 0xFF;
-    }
-    SetQuestLogEvent(QL_EVENT_USED_FIELD_MOVE, (const u16 *)data);
-    Free(data);
-}
-
-void SetUsedFlyQuestLogEvent(const u8 *healLocCtrlData)
-{
-    const struct MapHeader *mapHeader;
-    struct QuestLogEvent_FieldMove *data;
-    struct
-    {
-        s8 group;
-        s8 num;
-        u32 unused;
-    } *map = Alloc(sizeof(*map));
 
-    map->group = healLocCtrlData[0];
-    map->num = healLocCtrlData[1];
-    mapHeader = Overworld_GetMapHeaderByGroupAndId(map->group, map->num);
-    Free(map);
 
-    data = Alloc(sizeof(*data));
-    data->species = GetMonData(&gPlayerParty[GetCursorSelectionMonId()], MON_DATA_SPECIES_OR_EGG);
-    data->fieldMove = FIELD_MOVE_FLY;
-    data->mapSec = mapHeader->regionMapSectionId;
-    SetQuestLogEvent(QL_EVENT_USED_FIELD_MOVE, (const u16 *)data);
-    Free(data);
-}
 
 void CB2_ShowPartyMenuForItemUse(void)
 {
@@ -4502,7 +4418,6 @@ static void CB2_UseTMHMAfterForgettingMove(void)
         RemoveMonPPBonus(mon, moveIdx);
         SetMonMoveSlot(mon, ItemIdToBattleMoveId(gSpecialVar_ItemId), moveIdx);
         AdjustFriendship(mon, FRIENDSHIP_EVENT_LEARN_TMHM);
-        ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, mon, gSpecialVar_ItemId, move);
         if (!ItemId_GetImportance(gSpecialVar_ItemId))
             RemoveBagItem(gSpecialVar_ItemId, 1);
         SetMainCallback2(gPartyMenu.exitCallback);
@@ -5300,7 +5215,6 @@ static void TryUseItemOnMove(u8 taskId) {
             gBattleStruct->itemPartyIndex[gBattlerInMenuId] = GetPartyIdFromBattleSlot(gPartyMenu.slotId);
             gBattleStruct->itemMoveIndex[gBattlerInMenuId] = ptr->data[0];
             gPartyMenuUseExitCallback = TRUE;
-            ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, mon, gSpecialVar_ItemId, 0xFFFF);
             RemoveBagItem(gSpecialVar_ItemId, 1);
             ScheduleBgCopyTilemapToVram(2);
             gTasks[taskId].func = Task_ClosePartyMenuAfterText;
@@ -5337,7 +5251,6 @@ static void ItemUseCB_RestorePP(u8 taskId, TaskFunc func)
     struct Pokemon *mon = &gPlayerParty[gPartyMenu.slotId];
 
     gPartyMenuUseExitCallback = TRUE;
-    ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, mon, gSpecialVar_ItemId, 0xFFFF);
     PlaySE(SE_USE_ITEM);
     RemoveBagItem(gSpecialVar_ItemId, 1);
     move = GetMonData(mon, gPartyMenu.ppMoveSlot + MON_DATA_MOVE1);
@@ -5428,7 +5341,6 @@ void ItemUseCB_TMHM(u8 taskId, TaskFunc func)
     }
     if (GiveMoveToMon(mon, learnMoveId) != MON_HAS_MAX_MOVES)
     {
-        ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, mon, item, 0xFFFF);
         Task_DoUseItemAnim(taskId);
         gItemUseCB = ItemUseCB_LearnedMove;
     }
@@ -5571,7 +5483,6 @@ static void Task_ReplaceMoveWithTMHM(u8 taskId)
     u8 moveIdx = GetMoveSlotToReplace();
     u16 move = GetMonData(mon, moveIdx + MON_DATA_MOVE1);
 
-    ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, mon, gSpecialVar_ItemId, move);
     GetMonNickname(mon, gStringVar1);
     StringCopy(gStringVar2, gMovesInfo[move].name);
     RemoveMonPPBonus(mon, moveIdx);
@@ -5732,7 +5643,6 @@ static void ItemUseCB_RareCandyStep(u8 taskId, TaskFunc func)
     }
 
     gPartyMenuUseExitCallback = TRUE;
-    ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, mon, gSpecialVar_ItemId, 0xFFFF);
     UpdateMonDisplayInfoAfterRareCandy(gPartyMenu.slotId, mon);
     RemoveBagItem(gSpecialVar_ItemId, 1);
     GetMonNickname(mon, gStringVar1);
@@ -6008,8 +5918,7 @@ static void UseSacredAsh(u8 taskId)
         return;
     }
     PlaySE(SE_USE_ITEM);
-    if (sPartyMenuInternal->tHadEffect == 0)
-        sSacredAshQuestLogMonBackup = mon;
+
     SetPartyMonAilmentGfx(mon, &sPartyMenuBoxes[gPartyMenu.slotId]);
     if (gSprites[sPartyMenuBoxes[gPartyMenu.slotId].statusSpriteId].invisible)
         DisplayPartyPokemonLevelCheck(mon, &sPartyMenuBoxes[gPartyMenu.slotId], DRAW_MENU_BOX_AND_TEXT);
@@ -6041,8 +5950,6 @@ static void Task_SacredAshLoop(u8 taskId)
             else
             {
                 gPartyMenuUseExitCallback = TRUE;
-                if (gPartyMenu.menuType != PARTY_MENU_TYPE_IN_BATTLE)
-                    ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, sSacredAshQuestLogMonBackup, gSpecialVar_ItemId, 0xFFFF);
                 RemoveBagItem(gSpecialVar_ItemId, 1);
             }
             gTasks[taskId].func = Task_ClosePartyMenuAfterText;
@@ -6090,7 +5997,6 @@ static void CB2_UseEvolutionStone(void)
     gCB2_AfterEvolution = gPartyMenu.exitCallback;
     targetSpecies = GetEvolutionTargetSpecies(&gPlayerParty[gPartyMenu.slotId], EVO_MODE_ITEM_USE, gSpecialVar_ItemId, NULL);
     BeginEvolutionScene(&gPlayerParty[gPartyMenu.slotId], targetSpecies, FALSE, gPartyMenu.slotId);
-    ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, &gPlayerParty[gPartyMenu.slotId], gSpecialVar_ItemId, 0xFFFF);
     RemoveBagItem(gSpecialVar_ItemId, 1);
 }
 
diff --git a/src/player_pc.c b/src/player_pc.c
index aa3bd00b3..09069be90 100644
--- a/src/player_pc.c
+++ b/src/player_pc.c
@@ -7,7 +7,7 @@
 #include "menu.h"
 #include "mail.h"
 #include "mail_data.h"
-#include "help_system.h"
+
 #include "overworld.h"
 #include "script.h"
 #include "mailbox_pc.h"
@@ -153,7 +153,6 @@ void BedroomPC(void)
     u8 taskId;
 
     gPlayerPcMenuManager.notInRoom = FALSE;
-    BackupHelpContext();
     sItemOrder = sItemOrder_BedroomPC;
     sTopMenuItemCount = 3;
     taskId = CreateTask(TaskDummy, 0);
@@ -165,7 +164,6 @@ void PlayerPC(void)
     u8 taskId;
 
     gPlayerPcMenuManager.notInRoom = TRUE;
-    BackupHelpContext();
     sItemOrder = sItemOrder_PlayerPC;
     sTopMenuItemCount = 3;
     taskId = CreateTask(TaskDummy, 0);
@@ -214,7 +212,6 @@ static void Task_TopMenuHandleInput(u8 taskId)
 
 static void Task_ReturnToTopMenu(u8 taskId)
 {
-    RestoreHelpContext();
     DisplayItemMessageOnField(taskId, FONT_NORMAL, gText_WhatWouldYouLikeToDo, Task_DrawPlayerPcTopMenu);
 }
 
@@ -237,10 +234,6 @@ static void Task_PlayerPcMailbox(u8 taskId)
         gPlayerPcMenuManager.cursorPos = 0;
         PCMailCompaction();
         Task_SetPageItemVars(taskId);
-        if (gPlayerPcMenuManager.notInRoom == FALSE)
-            SetHelpContext(HELPCONTEXT_BEDROOM_PC_MAILBOX);
-        else
-            SetHelpContext(HELPCONTEXT_PLAYERS_PC_MAILBOX);
         if (MailboxPC_InitBuffers(gPlayerPcMenuManager.count) == TRUE)
         {
             ClearDialogWindowAndFrame(0, FALSE);
@@ -266,10 +259,6 @@ static void Task_PlayerPcTurnOff(u8 taskId)
 static void Task_CreateItemStorageSubmenu(u8 taskId, u8 cursorPos)
 {
     s16 *data = gTasks[taskId].data;
-    if (gPlayerPcMenuManager.notInRoom == FALSE)
-        SetHelpContext(HELPCONTEXT_BEDROOM_PC_ITEMS);
-    else
-        SetHelpContext(HELPCONTEXT_PLAYERS_PC_ITEMS);
     tWindowId = AddWindow(&sWindowTemplate_ItemStorageSubmenu);
     SetStandardWindowBorderStyle(tWindowId, FALSE);
     PrintMenuActionTextsAtPos(tWindowId, FONT_NORMAL, GetMenuCursorDimensionByFont(FONT_NORMAL, 0), 2, 16, 3, sMenuActions_ItemPc);
@@ -578,10 +567,6 @@ static void Task_WaitFadeAndReturnToMailboxPcInputHandler(u8 taskId)
 static void CB2_ReturnToMailbox(void)
 {
     u8 taskId;
-    if (gPlayerPcMenuManager.notInRoom == FALSE)
-        SetHelpContext(HELPCONTEXT_BEDROOM_PC_MAILBOX);
-    else
-        SetHelpContext(HELPCONTEXT_PLAYERS_PC_MAILBOX);
     LoadMessageBoxAndBorderGfx();
     taskId = CreateTask(Task_WaitFadeAndReturnToMailboxPcInputHandler, 0);
     if (MailboxPC_InitBuffers(gPlayerPcMenuManager.count) == TRUE)
@@ -681,10 +666,6 @@ static void CB2_ReturnToMailboxPc_UpdateScrollVariables(void)
 {
     u8 taskId;
     u8 count;
-    if (gPlayerPcMenuManager.notInRoom == FALSE)
-        SetHelpContext(HELPCONTEXT_BEDROOM_PC_MAILBOX);
-    else
-        SetHelpContext(HELPCONTEXT_PLAYERS_PC_MAILBOX);
     taskId = CreateTask(Task_WaitFadeAndReturnToMailboxPcInputHandler, 0);
     count = gPlayerPcMenuManager.count;
     gPlayerPcMenuManager.count = CountPCMail();
diff --git a/src/pokedex_screen.c b/src/pokedex_screen.c
index 58ac38f70..08e31f37e 100644
--- a/src/pokedex_screen.c
+++ b/src/pokedex_screen.c
@@ -5,7 +5,7 @@
 #include "scanline_effect.h"
 #include "task.h"
 #include "event_data.h"
-#include "help_system.h"
+#include "list_menu.h"
 #include "menu_indicators.h"
 #include "overworld.h"
 #include "strings.h"
@@ -931,7 +931,6 @@ void DexScreen_LoadResources(void)
     sPokedexScreenData->numOwnedNational = DexScreen_GetDexCount(FLAG_GET_CAUGHT, 1);
     sPokedexScreenData->numSeenKanto = DexScreen_GetDexCount(FLAG_GET_SEEN, 0);
     sPokedexScreenData->numOwnedKanto = DexScreen_GetDexCount(FLAG_GET_CAUGHT, 0);
-    SetBGMVolume_SuppressHelpSystemReduction(0x80);
     ChangeBgX(0, 0, 0);
     ChangeBgY(0, 0, 0);
     ChangeBgX(1, 0, 0);
@@ -961,7 +960,6 @@ void CB2_OpenPokedexFromStartMenu(void)
     SetGpuReg(REG_OFFSET_BLDALPHA, 0);
     SetGpuReg(REG_OFFSET_BLDY, 0);
     SetMainCallback2(CB2_PokedexScreen);
-    SetHelpContext(HELPCONTEXT_POKEDEX);
 }
 
 #define FREE_IF_NOT_NULL(ptr0) ({ void *ptr = (ptr0); if (ptr) Free(ptr); })
@@ -988,7 +986,6 @@ bool8 DoClosePokedex(void)
         FREE_IF_NOT_NULL(GetBgTilemapBuffer(1));
         FREE_IF_NOT_NULL(GetBgTilemapBuffer(2));
         FREE_IF_NOT_NULL(GetBgTilemapBuffer(3));
-        BGMVolumeMax_EnableHelpSystemReduction();
         break;
     }
     return TRUE;
@@ -1918,27 +1915,12 @@ static u8 DexScreen_CreateCategoryMenuScrollArrows(void)
  */
 static int DexScreen_InputHandler_GetShoulderInput(void)
 {
-    switch (gSaveBlock2Ptr->optionsButtonMode)
-    {
-    case OPTIONS_BUTTON_MODE_L_EQUALS_A:
-        // Using the JOY_HELD and JOY_NEW macros here does not match!
-        if ((gMain.heldKeys & R_BUTTON) && (gMain.newKeys & DPAD_LEFT))
-            return 1;
-        else if ((gMain.heldKeys & R_BUTTON) && (gMain.newKeys & DPAD_RIGHT))
-            return 2;
-        else
-            return 0;
-    case OPTIONS_BUTTON_MODE_LR:
-        if (gMain.newKeys & L_BUTTON)
-            return 1;
-        else if (gMain.newKeys & R_BUTTON)
-            return 2;
-        else
-            return 0;
-    case OPTIONS_BUTTON_MODE_HELP:
-    default:
+    if (gMain.newKeys & L_BUTTON)
+        return 1;
+    else if (gMain.newKeys & R_BUTTON)
+        return 2;
+    else
         return 0;
-    }
 }
 
 static void Task_DexScreen_ShowMonPage(u8 taskId)
diff --git a/src/pokemon_storage_system.c b/src/pokemon_storage_system.c
index 43ef5ada3..03f6c5720 100644
--- a/src/pokemon_storage_system.c
+++ b/src/pokemon_storage_system.c
@@ -7,7 +7,7 @@
 #include "field_fadetransition.h"
 #include "field_weather.h"
 #include "graphics.h"
-#include "help_system.h"
+
 #include "item.h"
 #include "item_icon.h"
 #include "item_menu.h"
@@ -20,7 +20,7 @@
 #include "pokemon_icon.h"
 #include "pokemon_storage_system.h"
 #include "pokemon_summary_screen.h"
-#include "quest_log.h"
+
 #include "strings.h"
 #include "task.h"
 #include "text_window.h"
@@ -532,7 +532,6 @@ struct PokemonStorageSystemData
     struct PokeStorageItemIcon itemIcons[MAX_ITEM_ICONS];
     u16 movingItemId;
     u16 itemInfoWindowOffset;
-    struct QuestLogEvent_MovedBoxMon questLogData;
     u16 unusedField2;
     u16 displayMonPalOffset;
     u16 *displayMonTilePtr;
@@ -645,7 +644,6 @@ static void ClearBottomWindow(void);
 static void AddWallpaperSetsMenu(void);
 static void AddWallpapersMenu(u8 wallpaperSet);
 static void InitCursorItemIcon(void);
-static void SetPokeStorageQuestLogEvent(u8 species);
 static void UpdateBoxToSendMons(void);
 
 // Options menus
@@ -1444,7 +1442,6 @@ static void Task_PCMainMenu(u8 taskId)
     switch (task->tState)
     {
     case STATE_LOAD:
-        SetHelpContext(HELPCONTEXT_BILLS_PC);
         CreatePCMainMenu(task->tSelectedOption, &task->tWindowId);
         LoadMessageBoxAndBorderGfx();
         DrawDialogueFrame(0, FALSE);
@@ -1839,7 +1836,6 @@ void EnterPokeStorage(u8 boxOption)
         sMovingItemId = 0;
         gStorage->state = 0;
         gStorage->taskId = CreateTask(Task_InitPokeStorage, 3);
-        SetHelpContext(HELPCONTEXT_BILLS_PC);
         sLastUsedBox = StorageGetCurrentBox();
         SetMainCallback2(CB2_PokeStorage);
     }
@@ -1857,7 +1853,6 @@ void CB2_ReturnToPokeStorage(void)
         gStorage->isReopening = TRUE;
         gStorage->state = 0;
         gStorage->taskId = CreateTask(Task_InitPokeStorage, 3);
-        SetHelpContext(HELPCONTEXT_BILLS_PC);
         SetMainCallback2(CB2_PokeStorage);
     }
 }
@@ -2211,7 +2206,6 @@ static void Task_PokeStorageMain(u8 taskId)
             break;
         case INPUT_MULTIMOVE_PLACE_MONS:
             PlaySE(SE_SELECT);
-            SetPokeStorageQuestLogEvent(3);
             MultiMove_SetFunction(MULTIMOVE_PLACE_MONS);
             gStorage->state = 7;
             break;
@@ -2514,7 +2508,6 @@ static void Task_PlaceMon(u8 taskId)
     switch (gStorage->state)
     {
     case 0:
-        SetPokeStorageQuestLogEvent(1);
         InitMonPlaceChange(CHANGE_PLACE);
         gStorage->state++;
         break;
@@ -2535,7 +2528,6 @@ static void Task_ShiftMon(u8 taskId)
     switch (gStorage->state)
     {
     case 0:
-        SetPokeStorageQuestLogEvent(0);
         InitMonPlaceChange(CHANGE_SHIFT);
         gStorage->state++;
         break;
@@ -2584,7 +2576,6 @@ static void Task_WithdrawMon(u8 taskId)
     case 3:
         if (!DoShowPartyMenu())
         {
-            SetPokeStorageQuestLogEvent(1);
             InitMonPlaceChange(CHANGE_PLACE);
             gStorage->state++;
         }
@@ -2630,7 +2621,6 @@ static void Task_DepositMenu(u8 taskId)
             if (TryStorePartyMonInBox(boxId))
             {
                 sDepositBoxId = boxId;
-                SetPokeStorageQuestLogEvent(2);
                 ClearBottomWindow();
                 DestroyChooseBoxMenuSprites();
                 FreeBoxSelectionPopupSpriteGfx();
@@ -4097,96 +4087,6 @@ static void InitCursorItemIcon(void)
     }
 }
 
-static void SetPokeStorageQuestLogEvent(u8 action)
-{
-    u16 event;
-    struct QuestLogEvent_MovedBoxMon *questLogData;
-    u8 box1 = GetMovingMonOriginalBoxId();
-    u16 species1 = gStorage->displayMonSpecies;
-    u16 species2;
-    u8 box2;
-    if (sInPartyMenu)
-    {
-        box2 = TOTAL_BOXES_COUNT;
-        species2 = GetMonData(&gPlayerParty[GetBoxCursorPosition()], MON_DATA_SPECIES_OR_EGG);
-    }
-    else
-    {
-        box2 = StorageGetCurrentBox();
-        species2 = GetCurrentBoxMonData(GetBoxCursorPosition(), MON_DATA_SPECIES_OR_EGG);
-    }
-    questLogData = &gStorage->questLogData;
-
-    switch (action)
-    {
-    default:
-        return;
-    case 0:
-        if (sInPartyMenu)
-        {
-            if (box1 == TOTAL_BOXES_COUNT)
-                return;
-            else
-                event = QL_EVENT_SWITCHED_PARTY_MON_FOR_PC_MON;
-        }
-        else
-        {
-            if (box1 == TOTAL_BOXES_COUNT)
-                // Should upmerge but doesn't
-                event = QL_EVENT_SWITCHED_PARTY_MON_FOR_PC_MON;
-            else
-                event = box1 != box2 ? QL_EVENT_SWITCHED_MONS_BETWEEN_BOXES : QL_EVENT_SWITCHED_MONS_WITHIN_BOX;
-        }
-        questLogData->species1 = species1;
-        questLogData->species2 = species2;
-        questLogData->box1 = box1;
-        questLogData->box2 = box2;
-        break;
-    case 1:
-        questLogData->species1 = species1;
-        questLogData->species2 = SPECIES_NONE;
-        questLogData->box1 = box1;
-        questLogData->box2 = 0xFF;
-        if (sInPartyMenu)
-        {
-            if (box1 == TOTAL_BOXES_COUNT)
-                return;
-            else
-                event = QL_EVENT_WITHDREW_MON_PC;
-        }
-        else
-        {
-            if (box1 == TOTAL_BOXES_COUNT)
-            {
-                event = QL_EVENT_DEPOSITED_MON_PC;
-                questLogData->box1 = box2;
-            }
-            else if (box1 != box2)
-            {
-                event = QL_EVENT_MOVED_MON_BETWEEN_BOXES;
-                questLogData->box2 = box2;
-            }
-            else
-                event = QL_EVENT_MOVED_MON_WITHIN_BOX;
-        }
-        break;
-    case 2:
-        event = QL_EVENT_DEPOSITED_MON_PC;
-        questLogData->species1 = species1;
-        questLogData->species2 = SPECIES_NONE;
-        questLogData->box1 = sDepositBoxId;
-        questLogData->box2 = 0xFF;
-        break;
-    case 3:
-        event = QL_EVENT_SWITCHED_MULTIPLE_MONS;
-        questLogData->species1 = SPECIES_NONE;
-        questLogData->species2 = SPECIES_NONE;
-        questLogData->box1 = box1;
-        questLogData->box2 = box2;
-        break;
-    }
-    SetQuestLogEvent(event, (const u16 *)questLogData);
-}
 
 static void UpdateBoxToSendMons(void)
 {
diff --git a/src/pokemon_summary_screen.c b/src/pokemon_summary_screen.c
index 7a230821f..e1b2ebf45 100644
--- a/src/pokemon_summary_screen.c
+++ b/src/pokemon_summary_screen.c
@@ -4,7 +4,7 @@
 #include "decompress.h"
 #include "pokemon.h"
 #include "pokemon_summary_screen.h"
-#include "help_system.h"
+
 #include "task.h"
 #include "menu_helpers.h"
 #include "link.h"
@@ -60,7 +60,6 @@ static void PokeSum_AddWindows(u8 curPageIndex);
 static void PokeSum_PrintPageHeaderText(u8 curPageIndex);
 static void PokeSum_InitBgCoordsBeforePageFlips(void);
 static u8 PokeSum_IsPageFlipFinished(u8);
-static void PokeSum_SetHelpContext(void);
 static void Task_HandleInput_SelectMove(u8 id);
 static void PokeSum_CopyNewBgTilemapBeforePageFlip_2(void);
 static void PokeSum_CopyNewBgTilemapBeforePageFlip(void);
@@ -1230,20 +1229,17 @@ void ShowPokemonSummaryScreen(struct Pokemon * party, u8 cursorPos, u8 lastIdx,
     {
     case PSS_MODE_NORMAL:
     default:
-        SetHelpContext(HELPCONTEXT_POKEMON_INFO);
         sMonSummaryScreen->curPageIndex = PSS_PAGE_INFO;
         sMonSummaryScreen->isBoxMon = FALSE;
         sMonSummaryScreen->lockMovesFlag = FALSE;
         break;
     case PSS_MODE_BOX:
-        SetHelpContext(HELPCONTEXT_POKEMON_INFO);
         sMonSummaryScreen->curPageIndex = PSS_PAGE_INFO;
         sMonSummaryScreen->isBoxMon = TRUE;
         sMonSummaryScreen->lockMovesFlag = FALSE;
         break;
     case PSS_MODE_SELECT_MOVE:
     case PSS_MODE_FORGET_MOVE:
-        SetHelpContext(HELPCONTEXT_POKEMON_MOVES);
         sMonSummaryScreen->curPageIndex = PSS_PAGE_MOVES_INFO;
         sMonSummaryScreen->isBoxMon = FALSE;
         sMonSummaryScreen->lockMovesFlag = TRUE;
@@ -1559,7 +1555,6 @@ static void Task_PokeSum_FlipPages(u8 taskId)
 
         break;
     default:
-        PokeSum_SetHelpContext();
 
         if (sMonSummaryScreen->curPageIndex == PSS_PAGE_MOVES_INFO)
             gTasks[sMonSummaryScreen->inputHandlerTaskId].func = Task_HandleInput_SelectMove;
@@ -1673,7 +1668,6 @@ static void Task_FlipPages_FromInfo(u8 taskId)
 
         break;
     default:
-        PokeSum_SetHelpContext();
         gTasks[sMonSummaryScreen->inputHandlerTaskId].func = Task_HandleInput_SelectMove;
         sMonSummaryScreen->state3284 = 0;
         sMonSummaryScreen->lockMovesFlag = FALSE;
@@ -1759,7 +1753,6 @@ static void Task_BackOutOfSelectMove(u8 taskId)
         PokeSum_ShowSpritesBeforePageFlip();
         break;
     default:
-        PokeSum_SetHelpContext();
         gTasks[sMonSummaryScreen->inputHandlerTaskId].func = Task_InputHandler_Info;
         sMonSummaryScreen->state3284 = 0;
         sMonSummaryScreen->lockMovesFlag = FALSE;
@@ -3687,22 +3680,6 @@ static void PokeSum_RemoveWindows(u8 curPageIndex)
 
 }
 
-static void PokeSum_SetHelpContext(void)
-{
-    switch (sMonSummaryScreen->curPageIndex)
-    {
-    case PSS_PAGE_INFO:
-        SetHelpContext(HELPCONTEXT_POKEMON_INFO);
-        break;
-    case PSS_PAGE_SKILLS:
-        SetHelpContext(HELPCONTEXT_POKEMON_SKILLS);
-        break;
-    case PSS_PAGE_MOVES:
-    case PSS_PAGE_MOVES_INFO:
-        SetHelpContext(HELPCONTEXT_POKEMON_MOVES);
-        break;
-    }
-}
 
 static u8 PokeSum_BufferOtName_IsEqualToCurrentOwner(struct Pokemon * mon)
 {
diff --git a/src/quest_log.c b/src/quest_log.c
deleted file mode 100644
index 726cd3de5..000000000
--- a/src/quest_log.c
+++ /dev/null
@@ -1,1773 +0,0 @@
-#include "global.h"
-#include "gflib.h"
-#include "task.h"
-#include "menu.h"
-#include "menu_helpers.h"
-#include "text_window.h"
-#include "event_data.h"
-#include "script.h"
-#include "overworld.h"
-#include "field_fadetransition.h"
-#include "field_weather.h"
-#include "event_object_movement.h"
-#include "event_object_lock.h"
-#include "field_player_avatar.h"
-#include "item.h"
-#include "region_map.h"
-#include "map_name_popup.h"
-#include "wild_encounter.h"
-#include "help_system.h"
-#include "pokemon_storage_system.h"
-#include "save.h"
-#include "quest_log_objects.h"
-#include "quest_log_player.h"
-#include "quest_log.h"
-#include "rtc.h"
-#include "strings.h"
-#include "constants/event_objects.h"
-#include "constants/maps.h"
-#include "constants/quest_log.h"
-#include "constants/field_weather.h"
-#include "constants/event_object_movement.h"
-
-enum {
-    WIN_TOP_BAR,      // Contains the "Previously on..." text
-    WIN_BOTTOM_BAR,   // Empty, only briefly visible at the end or when the description window isn't covering it.
-    WIN_DESCRIPTION,
-    WIN_COUNT
-};
-
-#define DESC_WIN_WIDTH (DISPLAY_WIDTH / 8)
-#define DESC_WIN_HEIGHT 6
-#define DESC_WIN_SIZE (DESC_WIN_WIDTH * DESC_WIN_HEIGHT * TILE_SIZE_4BPP)
-
-// sQuestLogActionRecordBuffer should be large enough to fill a scene's script with the maximum number of actions
-#define SCRIPT_BUFFER_SIZE (sizeof(gSaveBlock1Ptr->questLog[0].script) / sizeof(struct QuestLogAction))
-
-enum {
-    END_MODE_NONE,
-    END_MODE_FINISH,
-    END_MODE_SCENE,
-};
-
-struct PlaybackControl
-{
-    u8 state:4;
-    u8 playingEvent:2;
-    u8 endMode:2;
-    u8 cursor;
-    u8 timer;
-    u8 overlapTimer;
-};
-
-struct FlagOrVarRecord
-{
-    u16 idx:15;
-    u16 isFlag:1;
-    u16 value;
-};
-
-COMMON_DATA u8 gQuestLogPlaybackState = 0;
-COMMON_DATA u16 sMaxActionsInScene = 0;
-COMMON_DATA struct FieldInput gQuestLogFieldInput = {0};
-COMMON_DATA struct QuestLogAction * sCurSceneActions = NULL;
-
-static struct FlagOrVarRecord * sFlagOrVarRecords;
-static u16 sNumFlagsOrVars;
-
-static EWRAM_DATA u8 sCurrentSceneNum = 0;
-static EWRAM_DATA u8 sNumScenes = 0;
-EWRAM_DATA u8 gQuestLogState = 0;
-static EWRAM_DATA u16 sRecordSequenceStartIdx = 0;
-static EWRAM_DATA u8 sWindowIds[WIN_COUNT] = {0};
-EWRAM_DATA u16 *gQuestLogDefeatedWildMonRecord = NULL;
-EWRAM_DATA u16 *gQuestLogRecordingPointer = NULL;
-static EWRAM_DATA u16 *sEventData[32] = {NULL};
-static EWRAM_DATA void (* sQuestLogCB)(void) = NULL;
-static EWRAM_DATA u16 *sPalettesBackup = NULL;
-static EWRAM_DATA struct PlaybackControl sPlaybackControl = {0};
-static EWRAM_DATA struct QuestLogAction sQuestLogActionRecordBuffer[SCRIPT_BUFFER_SIZE] = {0};
-EWRAM_DATA u16 gQuestLogCurActionIdx = 0;
-static EWRAM_DATA u8 sMovementScripts[OBJECT_EVENT_TEMPLATES_COUNT][2] = {{0}};
-static EWRAM_DATA u16 sNextActionDelay = 0;
-static EWRAM_DATA u16 sLastQuestLogCursor = 0;
-static EWRAM_DATA u16 sFlagOrVarPlayhead = 0;
-
-static void QLogCB_Recording(void);
-static void QLogCB_Playback(void);
-static void SetPlayerInitialCoordsAtScene(u8);
-static void SetNPCInitialCoordsAtScene(u8);
-static void RecordSceneEnd(void);
-static void BackUpTrainerRematches(void);
-static void BackUpMapLayout(void);
-static void SetGameStateAtScene(u8);
-static u8 TryRecordActionSequence(struct QuestLogAction *);
-static void Task_BeginQuestLogPlayback(u8);
-static void QL_LoadObjectsAndTemplates(u8);
-static void QLPlayback_InitOverworldState(void);
-static void SetPokemonCounts(void);
-static u16 QuestLog_GetPartyCount(void);
-static u16 QuestLog_GetBoxMonCount(void);
-static void RestoreTrainerRematches(void);
-static void ReadQuestLogScriptFromSav1(u8, struct QuestLogAction *);
-static void DoSceneEndTransition(s8 delay);
-static void DoSkipToEndTransition(s8 delay);
-static void QuestLog_AdvancePlayhead(void);
-static void QuestLog_StartFinalScene(void);
-static void Task_AvoidDisplay(u8);
-static void QuestLog_PlayCurrentEvent(void);
-static void HandleShowQuestLogMessage(void);
-static u8 GetQuestLogTextDisplayDuration(void);
-static void DrawSceneDescription(void);
-static void CopyDescriptionWindowTiles(u8);
-static void QuestLog_CloseTextWindow(void);
-static void QuestLog_WaitFadeAndCancelPlayback(void);
-static bool8 FieldCB2_FinalScene(void);
-static void Task_FinalScene_WaitFade(u8);
-static void Task_QuestLogScene_SavedGame(u8);
-static void Task_WaitAtEndOfQuestLog(u8);
-static void Task_EndQuestLog(u8);
-static bool8 RestoreScreenAfterPlayback(u8);
-static void QL_SlightlyDarkenSomePals(void);
-static void TogglePlaybackStateForOverworldLock(u8);
-static void ResetActions(u8, struct QuestLogAction *, u16);
-static bool8 RecordHeadAtEndOfEntryOrScriptContext2Enabled(void);
-static bool8 RecordHeadAtEndOfEntry(void);
-
-static const struct WindowTemplate sWindowTemplates[WIN_COUNT] = {
-    [WIN_TOP_BAR] = {
-        .bg = 0,
-        .tilemapLeft = 0, 
-        .tilemapTop = 0,
-        .width = 30,
-        .height = 2,
-        .paletteNum = 15,
-        .baseBlock = 0x0e9
-    },
-    [WIN_BOTTOM_BAR] = {
-        .bg = 0,
-        .tilemapLeft = 0,
-        .tilemapTop = 18,
-        .width = 30,
-        .height = 2,
-        .paletteNum = 15,
-        .baseBlock = 0x0ad
-    },
-    [WIN_DESCRIPTION] = {
-        .bg = 0,
-        .tilemapLeft = 0,
-        .tilemapTop = 14,
-        .width = DESC_WIN_WIDTH,
-        .height = DESC_WIN_HEIGHT,
-        .paletteNum = 15,
-        .baseBlock = 0x14c
-    }
-};
-
-static const u8 sTextColors[3] = {TEXT_DYNAMIC_COLOR_6, TEXT_COLOR_WHITE, TEXT_DYNAMIC_COLOR_3};
-
-static const u16 sDescriptionWindow_Gfx[] = INCBIN_U16("graphics/quest_log/description_window.4bpp");
-
-static const u8 sQuestLogTextLineYCoords[] = {17, 10, 3};
-
-void QL_AddASLROffset(void *oldSaveBlockPtr)
-{
-    // For some reason the caller passes the original pointer and the
-    // amount the save moved is recalculated, instead of just passing
-    // the offset to begin with.
-    ptrdiff_t offset = (void *)gSaveBlock1Ptr - oldSaveBlockPtr;
-    if (gQuestLogDefeatedWildMonRecord)
-        gQuestLogDefeatedWildMonRecord = (void *)gQuestLogDefeatedWildMonRecord + offset;
-
-    if (gQuestLogState == 0)
-        return;
-
-    if (gQuestLogRecordingPointer)
-        gQuestLogRecordingPointer = (void *)gQuestLogRecordingPointer + offset;
-
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-    {
-        int i;
-        for (i = 0; i < (int)ARRAY_COUNT(sEventData); i++)
-            if (sEventData[i])
-                sEventData[i] = (void *)sEventData[i] + offset;
-    }
-}
-
-void ResetQuestLog(void)
-{
-    memset(gSaveBlock1Ptr->questLog, 0, sizeof(gSaveBlock1Ptr->questLog));
-    sCurrentSceneNum = 0;
-    gQuestLogState = 0;
-    sQuestLogCB = NULL;
-    gQuestLogRecordingPointer = NULL;
-    gQuestLogDefeatedWildMonRecord = NULL;
-    QL_ResetEventStates();
-    ResetDeferredLinkEvent();
-}
-
-static void ClearSavedScene(u8 sceneNum)
-{
-    memset(&gSaveBlock1Ptr->questLog[sceneNum], 0, sizeof(gSaveBlock1Ptr->questLog[sceneNum]));
-    gQuestLogDefeatedWildMonRecord = NULL;
-}
-
-void QL_ResetDefeatedWildMonRecord(void)
-{
-    gQuestLogDefeatedWildMonRecord = NULL;
-}
-
-void RunQuestLogCB(void)
-{
-    if (sQuestLogCB != NULL)
-        sQuestLogCB();
-}
-
-bool8 QL_IsRoomToSaveEvent(const void * cursor, size_t size)
-{
-    const void *start = gSaveBlock1Ptr->questLog[sCurrentSceneNum].script;
-    const void *end = gSaveBlock1Ptr->questLog[sCurrentSceneNum].end;
-    end -= size;
-    if (cursor < start || cursor > end)
-        return FALSE;
-    return TRUE;
-}
-
-// Identical to QL_IsRoomToSaveEvent
-bool8 QL_IsRoomToSaveAction(const void * cursor, size_t size)
-{
-    const void *start = gSaveBlock1Ptr->questLog[sCurrentSceneNum].script;
-    const void *end = gSaveBlock1Ptr->questLog[sCurrentSceneNum].end;
-    end -= size;
-    if (cursor < start || cursor > end)
-        return FALSE;
-    return TRUE;
-}
-
-static void SetQuestLogState(u8 state)
-{
-    gQuestLogState = state;
-    if (state == QL_STATE_RECORDING)
-        sQuestLogCB = QLogCB_Recording;
-    else
-        sQuestLogCB = QLogCB_Playback;
-}
-
-static void QLogCB_Recording(void)
-{
-    if (TryRecordActionSequence(sQuestLogActionRecordBuffer) != 1)
-    {
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-        RecordSceneEnd();
-        gQuestLogState = 0;
-        sQuestLogCB = NULL;
-    }
-}
-
-static void QLogCB_Playback(void)
-{
-    if (sPlaybackControl.state == 2)
-        sPlaybackControl.state = 0;
-
-    if (sPlaybackControl.endMode == END_MODE_NONE)
-    {
-        if (gQuestLogPlaybackState != QL_PLAYBACK_STATE_STOPPED 
-         || sPlaybackControl.state == 1 
-         || (sPlaybackControl.cursor < ARRAY_COUNT(sEventData) 
-          && sEventData[sPlaybackControl.cursor] != NULL))
-            QuestLog_PlayCurrentEvent();
-        else
-        {
-            sPlaybackControl.endMode = END_MODE_SCENE;
-            LockPlayerFieldControls();
-            DoSceneEndTransition(0);
-        }
-    }
-}
-
-void GetQuestLogState(void)
-{
-    gSpecialVar_Result = gQuestLogState;
-}
-
-u8 GetQuestLogStartType(void)
-{
-    return gSaveBlock1Ptr->questLog[sCurrentSceneNum].startType;
-}
-
-void QL_StartRecordingAction(u16 eventId)
-{
-    if (sCurrentSceneNum >= QUEST_LOG_SCENE_COUNT)
-        sCurrentSceneNum = 0;
-
-    ClearSavedScene(sCurrentSceneNum);
-    QL_ResetRepeatEventTracker();
-    gQuestLogRecordingPointer = gSaveBlock1Ptr->questLog[sCurrentSceneNum].script;
-    if (IS_LINK_QL_EVENT(eventId) || eventId == QL_EVENT_DEPARTED)
-        gSaveBlock1Ptr->questLog[sCurrentSceneNum].startType = QL_START_WARP;
-    else
-        gSaveBlock1Ptr->questLog[sCurrentSceneNum].startType = QL_START_NORMAL;
-    SetPokemonCounts();
-    SetPlayerInitialCoordsAtScene(sCurrentSceneNum);
-    SetNPCInitialCoordsAtScene(sCurrentSceneNum);
-    BackUpTrainerRematches();
-    BackUpMapLayout();
-    SetGameStateAtScene(sCurrentSceneNum);
-    sRecordSequenceStartIdx = 0;
-    ResetActions(QL_PLAYBACK_STATE_RECORDING, sQuestLogActionRecordBuffer, sizeof(sQuestLogActionRecordBuffer));
-    TryRecordActionSequence(sQuestLogActionRecordBuffer);
-    SetQuestLogState(QL_STATE_RECORDING);
-}
-
-static void SetPlayerInitialCoordsAtScene(u8 sceneNum)
-{
-    struct QuestLogScene * questLog = &gSaveBlock1Ptr->questLog[sceneNum];
-    questLog->mapGroup = gSaveBlock1Ptr->location.mapGroup;
-    questLog->mapNum = gSaveBlock1Ptr->location.mapNum;
-    questLog->warpId = gSaveBlock1Ptr->location.warpId;
-    questLog->x = gSaveBlock1Ptr->pos.x;
-    questLog->y = gSaveBlock1Ptr->pos.y;
-}
-
-static void SetNPCInitialCoordsAtScene(u8 sceneNum)
-{
-    struct QuestLogScene * questLog = &gSaveBlock1Ptr->questLog[sceneNum];
-    u16 i;
-
-    QL_RecordObjects(questLog);
-
-    for (i = 0; i < OBJECT_EVENT_TEMPLATES_COUNT; i++)
-    {
-        if (gSaveBlock1Ptr->objectEventTemplates[i].x < 0)
-        {
-            questLog->objectEventTemplates[i].x = -1 * gSaveBlock1Ptr->objectEventTemplates[i].x;
-            questLog->objectEventTemplates[i].negx = TRUE;
-        }
-        else
-        {
-            questLog->objectEventTemplates[i].x = (u8)gSaveBlock1Ptr->objectEventTemplates[i].x;
-            questLog->objectEventTemplates[i].negx = FALSE;
-        }
-        if (gSaveBlock1Ptr->objectEventTemplates[i].y < 0)
-        {
-            questLog->objectEventTemplates[i].y = (-gSaveBlock1Ptr->objectEventTemplates[i].y << 24) >> 24;
-            questLog->objectEventTemplates[i].negy = TRUE;
-        }
-        else
-        {
-            questLog->objectEventTemplates[i].y = (u8)gSaveBlock1Ptr->objectEventTemplates[i].y;
-            questLog->objectEventTemplates[i].negy = FALSE;
-        }
-        questLog->objectEventTemplates[i].elevation = gSaveBlock1Ptr->objectEventTemplates[i].elevation;
-        questLog->objectEventTemplates[i].movementType = gSaveBlock1Ptr->objectEventTemplates[i].movementType;
-    }
-}
-
-static void SetGameStateAtScene(u8 sceneNum)
-{
-    struct QuestLogScene * questLog = &gSaveBlock1Ptr->questLog[sceneNum];
-
-    CpuCopy16(gSaveBlock1Ptr->flags, questLog->flags, sizeof(gSaveBlock1Ptr->flags));
-    CpuCopy16(gSaveBlock1Ptr->vars, questLog->vars, sizeof(gSaveBlock1Ptr->vars));
-}
-
-static void BackUpTrainerRematches(void)
-{
-    u16 i, j;
-    u16 vars[4];
-
-    // Save the contents of gSaveBlock1Ptr->trainerRematches to the 4 saveblock
-    // vars starting at VAR_QLBAK_TRAINER_REMATCHES. The rematch array is 100 bytes
-    // long, but each byte is only ever 0 or 1 to indicate that a rematch is available.
-    // They're compressed into single bits across 4 u16 save vars, which is only enough
-    // to save 64 elements of gSaveBlock1Ptr->trainerRematches. 64 however is the maximum
-    // that could ever be used, as its the maximum number of NPCs per map (OBJECT_EVENT_TEMPLATES_COUNT).
-    for (i = 0; i < ARRAY_COUNT(vars); i++)
-    {
-        vars[i] = 0;
-
-        // 16 bits per var
-        for (j = 0; j < 16; j++)
-        {
-#if FREE_MATCH_CALL == FALSE
-            if (gSaveBlock1Ptr->trainerRematches[16 * i + j])
-                vars[i] += (1 << j);
-#endif //FREE_MATCH_CALL
-        }
-        VarSet(VAR_QLBAK_TRAINER_REMATCHES + i, vars[i]);
-    }
-}
-
-static void BackUpMapLayout(void)
-{
-    VarSet(VAR_QLBAK_MAP_LAYOUT, gSaveBlock1Ptr->mapLayoutId);
-}
-
-static void RecordSceneEnd(void)
-{
-    QL_RecordAction_SceneEnd(gQuestLogRecordingPointer);
-    if (++sCurrentSceneNum >= QUEST_LOG_SCENE_COUNT)
-        sCurrentSceneNum = 0;
-}
-
-static bool8 TryRecordActionSequence(struct QuestLogAction * actions)
-{
-    u16 i;
-
-    for (i = sRecordSequenceStartIdx; i < gQuestLogCurActionIdx; i++)
-    {
-        if (gQuestLogRecordingPointer == NULL)
-            return FALSE;
-        switch (actions[i].type)
-        {
-        case QL_ACTION_MOVEMENT:
-        case QL_ACTION_GFX_CHANGE:
-            gQuestLogRecordingPointer = QL_RecordAction_MovementOrGfxChange(gQuestLogRecordingPointer, &actions[i]);
-            break;
-        default:
-            gQuestLogRecordingPointer = QL_RecordAction_Input(gQuestLogRecordingPointer, &actions[i]);
-            break;
-        }
-        if (gQuestLogRecordingPointer == NULL)
-        {
-            gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-            return FALSE;
-        }
-    }
-
-    if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_STOPPED)
-    {
-        gQuestLogRecordingPointer = QL_RecordAction_SceneEnd(gQuestLogRecordingPointer);
-        return FALSE;
-    }
-    sRecordSequenceStartIdx = gQuestLogCurActionIdx;
-    return TRUE;
-}
-
-void TryStartQuestLogPlayback(u8 taskId)
-{
-    u8 i;
-
-    UpdateLoadedSeason();
-    QL_EnableRecordingSteps();
-    sNumScenes = 0;
-    for (i = 0; i < QUEST_LOG_SCENE_COUNT; i++)
-    {
-        if (gSaveBlock1Ptr->questLog[i].startType != 0)
-            sNumScenes++;
-    }
-
-    if (sNumScenes != 0)
-    {
-        gHelpSystemEnabled = FALSE;
-        Task_BeginQuestLogPlayback(taskId);
-        DestroyTask(taskId);
-    }
-    else
-    {
-        SetMainCallback2(CB2_ContinueSavedGame);
-        DestroyTask(taskId);
-    }
-}
-
-static void Task_BeginQuestLogPlayback(u8 taskId)
-{
-    gSaveBlock1Ptr->location.mapGroup = MAP_GROUP(ROUTE1);
-    gSaveBlock1Ptr->location.mapNum =  MAP_NUM(ROUTE1);
-    gSaveBlock1Ptr->location.warpId = WARP_ID_NONE;
-    sCurrentSceneNum = 0;
-    gDisableMapMusicChangeOnMapLoad = 1;
-    DisableWildEncounters(TRUE);
-    QLPlayback_InitOverworldState();
-}
-
-void QL_InitSceneObjectsAndActions(void)
-{
-    ReadQuestLogScriptFromSav1(sCurrentSceneNum, sQuestLogActionRecordBuffer);
-    QL_ResetRepeatEventTracker();
-    ResetActions(QL_PLAYBACK_STATE_RUNNING, sQuestLogActionRecordBuffer, sizeof(sQuestLogActionRecordBuffer));
-    QL_LoadObjectsAndTemplates(sCurrentSceneNum);
-}
-
-static bool8 FieldCB2_QuestLogStartPlaybackWithWarpExit(void)
-{
-    LoadPalette(GetTextWindowPalette(4), BG_PLTT_ID(15), PLTT_SIZE_4BPP);
-    SetQuestLogState(QL_STATE_PLAYBACK);
-    FieldCB_DefaultWarpExit();
-    sPlaybackControl = (struct PlaybackControl){};
-    sPlaybackControl.state = 2;
-    return 1;
-}
-
-static bool8 FieldCB2_QuestLogStartPlaybackStandingInPlace(void)
-{
-    LoadPalette(GetTextWindowPalette(4), BG_PLTT_ID(15), PLTT_SIZE_4BPP);
-    SetQuestLogState(QL_STATE_PLAYBACK);
-    FieldCB_WarpExitFadeFromBlack();
-    sPlaybackControl = (struct PlaybackControl){};
-    sPlaybackControl.state = 2;
-    return 1;
-}
-
-void DrawPreviouslyOnQuestHeader(u8 sceneNum)
-{
-    u8 i;
-
-    for (i = 0; i < WIN_COUNT; i++)
-    {
-        sWindowIds[i] = AddWindow(&sWindowTemplates[i]);
-        FillWindowPixelRect(sWindowIds[i], 15, 0, 0, sWindowTemplates[i].width * 8, sWindowTemplates[i].height * 8);
-    }
-
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_PreviouslyOnYourQuest);
-
-    // Scene numbers count from 4 to 0, 0 being where the player saved
-    if (sceneNum != 0)
-    {
-        ConvertIntToDecimalStringN(gStringVar1, sceneNum, STR_CONV_MODE_LEFT_ALIGN, 1);
-        StringAppend(gStringVar4, gStringVar1);
-    }
-
-    AddTextPrinterParameterized4(sWindowIds[WIN_TOP_BAR], FONT_NORMAL, 2, 2, 1, 2, sTextColors, 0, gStringVar4);
-    PutWindowTilemap(sWindowIds[WIN_TOP_BAR]);
-    PutWindowTilemap(sWindowIds[WIN_BOTTOM_BAR]);
-    CopyWindowToVram(sWindowIds[WIN_TOP_BAR], COPYWIN_GFX);
-    CopyWindowToVram(sWindowIds[WIN_DESCRIPTION], COPYWIN_GFX);
-    CopyWindowToVram(sWindowIds[WIN_BOTTOM_BAR], COPYWIN_FULL);
-}
-
-void CommitQuestLogWindow1(void)
-{
-    PutWindowTilemap(sWindowIds[WIN_BOTTOM_BAR]);
-    CopyWindowToVram(sWindowIds[WIN_BOTTOM_BAR], COPYWIN_MAP);
-}
-
-static void QL_LoadObjectsAndTemplates(u8 sceneNum)
-{
-    struct QuestLogScene *questLog = &gSaveBlock1Ptr->questLog[sceneNum];
-    u16 i;
-    
-    for (i = 0; i < OBJECT_EVENT_TEMPLATES_COUNT; i++)
-    {
-        if (questLog->objectEventTemplates[i].negx)
-            gSaveBlock1Ptr->objectEventTemplates[i].x = -questLog->objectEventTemplates[i].x;
-        else
-            gSaveBlock1Ptr->objectEventTemplates[i].x = questLog->objectEventTemplates[i].x;
-        if (questLog->objectEventTemplates[i].negy)
-            gSaveBlock1Ptr->objectEventTemplates[i].y = -(u8)questLog->objectEventTemplates[i].y;
-        else
-            gSaveBlock1Ptr->objectEventTemplates[i].y = questLog->objectEventTemplates[i].y;
-        gSaveBlock1Ptr->objectEventTemplates[i].elevation = questLog->objectEventTemplates[i].elevation;
-        gSaveBlock1Ptr->objectEventTemplates[i].movementType = questLog->objectEventTemplates[i].movementType;
-    }
-
-    QL_LoadObjects(questLog, gSaveBlock1Ptr->objectEventTemplates);
-}
-
-static void QLPlayback_SetInitialPlayerPosition(u8 sceneNum, bool8 isWarp)
-{
-    if (!isWarp)
-    {
-        gSaveBlock1Ptr->location.mapGroup = gSaveBlock1Ptr->questLog[sceneNum].mapGroup;
-        gSaveBlock1Ptr->location.mapNum = gSaveBlock1Ptr->questLog[sceneNum].mapNum;
-        gSaveBlock1Ptr->location.warpId = gSaveBlock1Ptr->questLog[sceneNum].warpId;
-        gSaveBlock1Ptr->pos.x = gSaveBlock1Ptr->questLog[sceneNum].x;
-        gSaveBlock1Ptr->pos.y = gSaveBlock1Ptr->questLog[sceneNum].y;
-    }
-    else
-    {
-        struct WarpData warp;
-        warp.mapGroup = gSaveBlock1Ptr->questLog[sceneNum].mapGroup;
-        warp.mapNum = gSaveBlock1Ptr->questLog[sceneNum].mapNum;
-        warp.warpId = gSaveBlock1Ptr->questLog[sceneNum].warpId;
-        warp.x = gSaveBlock1Ptr->questLog[sceneNum].x;
-        warp.y = gSaveBlock1Ptr->questLog[sceneNum].y;
-        Overworld_SetWarpDestinationFromWarp(&warp);
-    }
-}
-
-static void QLPlayback_InitOverworldState(void)
-{
-    gQuestLogState = QL_STATE_PLAYBACK;
-    ResetSpecialVars();
-    ClearBag();
-    ClearPCItemSlots();
-    if (GetQuestLogStartType() == QL_START_NORMAL)
-    {
-        QLPlayback_SetInitialPlayerPosition(sCurrentSceneNum, FALSE);
-        gFieldCallback2 = FieldCB2_QuestLogStartPlaybackStandingInPlace;
-        SetMainCallback2(CB2_SetUpOverworldForQLPlayback);
-    }
-    else
-    {
-        QLPlayback_SetInitialPlayerPosition(sCurrentSceneNum, TRUE);
-        WarpIntoMap();
-        gFieldCallback2 = FieldCB2_QuestLogStartPlaybackWithWarpExit;
-        SetMainCallback2(CB2_SetUpOverworldForQLPlaybackWithWarpExit);
-    }
-}
-
-void QL_CopySaveState(void)
-{
-    struct QuestLogScene * questLog = &gSaveBlock1Ptr->questLog[sCurrentSceneNum];
-
-    CpuCopy16(questLog->flags, gSaveBlock1Ptr->flags, sizeof(gSaveBlock1Ptr->flags));
-    CpuCopy16(questLog->vars, gSaveBlock1Ptr->vars, sizeof(gSaveBlock1Ptr->vars));
-    RestoreTrainerRematches();
-}
-
-// The number of bits allocated to store the number of pokemon in the PC
-#define NUM_PC_COUNT_BITS  12
-
-void QL_ResetPartyAndPC(void)
-{
-    struct {
-        struct Pokemon mon;
-        u16 partyCount;
-        u16 boxMonCount;
-    } *prev = AllocZeroed(sizeof(*prev));
-    u16 packedCounts, i, count, j;
-
-    CreateMon(&prev->mon, SPECIES_RATTATA, 1, USE_RANDOM_IVS, FALSE, 0, OT_ID_PLAYER_ID, 0);
-    packedCounts = VarGet(VAR_QUEST_LOG_MON_COUNTS);
-    prev->partyCount = packedCounts >> NUM_PC_COUNT_BITS;
-    prev->boxMonCount = packedCounts % (1 << NUM_PC_COUNT_BITS);
-
-    count = QuestLog_GetPartyCount();
-    if (count > prev->partyCount)
-    {
-        for (i = 0; i < count - prev->partyCount; i++)
-            ZeroMonData(&gPlayerParty[PARTY_SIZE - 1 - i]);
-    }
-    else if (count < prev->partyCount)
-    {
-        // Clear 5 slots in the PC?
-        for (i = 0; i < PARTY_SIZE - 1; i++)
-            ZeroBoxMonAt(0, i);
-
-        // Replace the additional slots with placeholder Pokémon.
-        for (i = count; i < prev->partyCount; i++)
-            CopyMon(&gPlayerParty[i], &prev->mon, sizeof(struct Pokemon));
-    }
-
-    count = QuestLog_GetBoxMonCount();
-    if (count > prev->boxMonCount)
-    {
-        for (i = 0; i < TOTAL_BOXES_COUNT; i++)
-        {
-            for (j = 0; j < IN_BOX_COUNT; j++)
-            {
-                if (GetBoxMonDataAt(i, j, MON_DATA_SANITY_HAS_SPECIES))
-                {
-                    ZeroBoxMonAt(i, j);
-                    if (--count == prev->boxMonCount)
-                        break;
-                }
-            }
-            if (count == prev->boxMonCount)
-                break;
-        }
-    }
-    else if (count < prev->boxMonCount)
-    {
-        for (i = 0; i < TOTAL_BOXES_COUNT; i++)
-        {
-            for (j = 0; j < IN_BOX_COUNT; j++)
-            {
-                struct BoxPokemon * boxMon = GetBoxedMonPtr(i, j);
-                if (!GetBoxMonData(boxMon, MON_DATA_SANITY_HAS_SPECIES))
-                {
-                    // Replace the additional slots with placeholder Pokémon.
-                    CopyMon(boxMon, &prev->mon.box, sizeof(struct BoxPokemon));
-                    if (++count == prev->boxMonCount)
-                        break;
-                }
-            }
-            if (count == prev->boxMonCount)
-                break;
-        }
-    }
-    Free(prev);
-}
-
-static void SetPokemonCounts(void)
-{
-    u16 partyCount = QuestLog_GetPartyCount();
-    u16 boxesCount = QuestLog_GetBoxMonCount();
-    VarSet(VAR_QUEST_LOG_MON_COUNTS, (partyCount << NUM_PC_COUNT_BITS) + boxesCount);
-}
-
-static u16 QuestLog_GetPartyCount(void)
-{
-    u16 count = 0;
-    u16 i;
-
-    for (i = 0; i < PARTY_SIZE; i++)
-    {
-        if (GetMonData(&gPlayerParty[i], MON_DATA_SANITY_HAS_SPECIES))
-            count++;
-    }
-
-    return count;
-}
-
-static u16 QuestLog_GetBoxMonCount(void)
-{
-    u16 count = 0;
-    u16 i, j;
-
-    for (i = 0; i < TOTAL_BOXES_COUNT; i++)
-    {
-        for (j = 0; j < IN_BOX_COUNT; j++)
-        {
-            if (GetBoxMonDataAt(i, j, MON_DATA_SANITY_HAS_SPECIES))
-                count++;
-        }
-    }
-
-    return count;
-}
-
-// Inverse of BackUpTrainerRematches
-static void RestoreTrainerRematches(void)
-{
-    u16 i, j;
-    u16 vars[4];
-
-    for (i = 0; i < ARRAY_COUNT(vars); i++)
-    {
-        vars[i] = VarGet(VAR_QLBAK_TRAINER_REMATCHES + i);
-
-        // 16 bits per var
-        for (j = 0; j < 16; j++)
-        {
-#if FREE_MATCH_CALL == FALSE
-            if (vars[i] & 1)
-                gSaveBlock1Ptr->trainerRematches[16 * i + j] = 30;
-            else
-                gSaveBlock1Ptr->trainerRematches[16 * i + j] = 0;
-#endif //FREE_MATCH_CALL
-            vars[i] >>= 1;
-        }
-    }
-}
-
-// Inverse of BackUpMapLayout
-void QL_RestoreMapLayoutId(void)
-{
-    gSaveBlock1Ptr->mapLayoutId = VarGet(VAR_QLBAK_MAP_LAYOUT);
-    if (gSaveBlock1Ptr->mapLayoutId == 0)
-    {
-        struct MapHeader header = *Overworld_GetMapHeaderByGroupAndId(gSaveBlock1Ptr->location.mapGroup, gSaveBlock1Ptr->location.mapNum);
-        gSaveBlock1Ptr->mapLayoutId = header.mapLayoutId;
-    }
-}
-
-static void ReadQuestLogScriptFromSav1(u8 sceneNum, struct QuestLogAction * actions)
-{
-    u16 i;
-    u16 *script;
-    u16 actionNum = 0;
-    u16 eventNum = 0;
-
-    memset(actions, 0, ARRAY_COUNT(sEventData) * sizeof(struct QuestLogAction));
-    for (i = 0; i < ARRAY_COUNT(sEventData); i++)
-        sEventData[i] = NULL;
-
-    script = gSaveBlock1Ptr->questLog[sceneNum].script;
-    for (i = 0; i < ARRAY_COUNT(sEventData); i++)
-    {
-        switch (script[0] & QL_CMD_EVENT_MASK)
-        {
-        case QL_EVENT_INPUT:
-            script = QL_LoadAction_Input(script, &actions[actionNum]);
-            actionNum++;
-            break;
-        case QL_EVENT_GFX_CHANGE:
-        case QL_EVENT_MOVEMENT:
-            script = QL_LoadAction_MovementOrGfxChange(script, &actions[actionNum]);
-            actionNum++;
-            break;
-        case QL_EVENT_SCENE_END:
-            script = QL_LoadAction_SceneEnd(script, &actions[actionNum]);
-            actionNum++;
-            break;
-        case QL_EVENT_WAIT:
-            script = QL_LoadAction_Wait(script, &actions[actionNum]);
-            actionNum++;
-            break;
-        default: // Normal event
-            script = QL_SkipCommand(script, &sEventData[eventNum]);
-            if (eventNum == 0)
-                QL_UpdateLastDepartedLocation(sEventData[0]);
-            eventNum++;
-            break;
-        }
-        if (script == NULL)
-            break;
-    }
-}
-
-static void DoSceneEndTransition(s8 delay)
-{
-    FadeScreen(FADE_TO_BLACK, delay);
-    sQuestLogCB = QuestLog_AdvancePlayhead;
-}
-
-static void QuestLog_AdvancePlayhead(void)
-{
-    if (gPaletteFade.active)
-        return;
-
-    LockPlayerFieldControls();
-    if (++sCurrentSceneNum < QUEST_LOG_SCENE_COUNT && gSaveBlock1Ptr->questLog[sCurrentSceneNum].startType != 0)
-    {
-        sNumScenes--;
-        QLPlayback_InitOverworldState();
-    }
-    else
-    {
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-        QuestLog_StartFinalScene();
-    }
-}
-
-static void QuestLog_StartFinalScene(void)
-{
-    ResetSpecialVars();
-    Save_ResetSaveCounters();
-    LoadGameSave(SAVE_NORMAL);
-    SetMainCallback2(CB2_EnterFieldFromQuestLog);
-    gFieldCallback2 = FieldCB2_FinalScene;
-    FreeAllWindowBuffers();
-    gQuestLogState = QL_STATE_PLAYBACK_LAST;
-    sQuestLogCB = NULL;
-}
-
-void QuestLog_AdvancePlayhead_(void)
-{
-    QuestLog_AdvancePlayhead();
-}
-
-#define tTimer data[0]
-#define tState data[1]
-#define DATA_IDX_CALLBACK 14 // data[14] and data[15]
-
-// This is used to avoid recording or displaying certain windows or images, like a shop menu.
-// During playback it returns TRUE (meaning the action should be avoided) and calls the
-// provided callback, which would be used to e.g. destroy any resources that were set up to do
-// whatever is being avoided. In all cases the provided callback will be QL_DestroyAbortedDisplay.
-// If we are not currently in playback return FALSE (meaning allow the action to occur) and
-// stop recording (if we are currently).
-bool8 QL_AvoidDisplay(void (*callback)(void))
-{
-    u8 taskId;
-
-    switch (gQuestLogState)
-    {
-    case QL_STATE_RECORDING:
-        QuestLog_CutRecording();
-        break;
-    case QL_STATE_PLAYBACK:
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_ACTION_END;
-        taskId = CreateTask(Task_AvoidDisplay, 80);
-        gTasks[taskId].tTimer = 0;
-        gTasks[taskId].tState = 0;
-        SetWordTaskArg(taskId, DATA_IDX_CALLBACK, (uintptr_t)callback);
-        return TRUE;
-    }
-    return FALSE;
-}
-
-static void Task_AvoidDisplay(u8 taskId)
-{
-    void (*routine)(void);
-    s16 *data = gTasks[taskId].data;
-
-    switch (tState)
-    {
-    case 0:
-        // Instead of displaying anything, wait and then end the scene.
-        if (++tTimer == 127)
-        {
-            BeginNormalPaletteFade(PALETTES_ALL, 0, 0, 16, 0);
-            sPlaybackControl.endMode = END_MODE_SCENE;
-            tState++;
-        }
-        break;
-    case 1:
-        if (!gPaletteFade.active)
-        {
-            gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-            
-            // Call the provided function (if any). In practice this is always QL_DestroyAbortedDisplay
-            routine = (void (*)(void)) GetWordTaskArg(taskId, DATA_IDX_CALLBACK);
-            if (routine != NULL)
-                routine();
-
-            DestroyTask(taskId);
-            sQuestLogCB = QuestLog_AdvancePlayhead;
-        }
-        break;
-    }
-}
-
-#undef tTimer
-#undef tState
-
-static void QuestLog_PlayCurrentEvent(void)
-{
-    if (sPlaybackControl.state == 1)
-    {
-        if (--sPlaybackControl.timer != 0)
-            return;
-        sPlaybackControl.state = 0;
-        sPlaybackControl.playingEvent = TRUE;
-        TogglePlaybackStateForOverworldLock(2);
-    }
-
-    if (sPlaybackControl.playingEvent == TRUE)
-    {
-        if (++sPlaybackControl.overlapTimer > 15)
-        {
-            QuestLog_CloseTextWindow();
-            sPlaybackControl.playingEvent = FALSE;
-            sPlaybackControl.overlapTimer = 0;
-        }
-    }
-    if (sPlaybackControl.cursor < ARRAY_COUNT(sEventData))
-    {
-        if (QL_TryRepeatEvent(sEventData[sPlaybackControl.cursor]) == TRUE)
-            HandleShowQuestLogMessage();
-        else if (QL_LoadEvent(sEventData[sPlaybackControl.cursor]) == TRUE)
-            HandleShowQuestLogMessage();
-    }
-}
-
-static void HandleShowQuestLogMessage(void)
-{
-    if (sPlaybackControl.state == 0)
-    {
-        sPlaybackControl.state = 1;
-        sPlaybackControl.playingEvent = FALSE;
-        sPlaybackControl.overlapTimer = 0;
-        sPlaybackControl.timer = GetQuestLogTextDisplayDuration();
-        if (gQuestLogRepeatEventTracker.counter == 0)
-            sPlaybackControl.cursor++;
-        if (sPlaybackControl.cursor > ARRAY_COUNT(sEventData))
-            return;
-        DrawSceneDescription();
-    }
-    TogglePlaybackStateForOverworldLock(1); // lock
-}
-
-static u8 GetQuestLogTextDisplayDuration(void)
-{
-    u16 i;
-    u16 count = 0;
-
-    for (i = 0; i < 0x400 && gStringVar4[i] != EOS; i++)
-    {
-        if (gStringVar4[i] != CHAR_NEWLINE)
-            count++;
-    }
-
-    if (count < 20)
-        return 0x5F;
-    if (count < 36)
-        return 0x7F;
-    if (count < 46)
-        return 0xBF;
-    return 0xFF;
-}
-
-bool8 QL_IsTrainerSightDisabled(void)
-{
-    if (gQuestLogState != QL_STATE_PLAYBACK)
-        return FALSE;
-    if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_STOPPED || sPlaybackControl.state == 1 || sPlaybackControl.state == 2)
-        return TRUE;
-    return FALSE;
-}
-
-void QL_HandleInput(void)
-{
-    // Ignore input if we're currently ending a scene/playback
-    if (sPlaybackControl.endMode != END_MODE_NONE)
-        return;
-
-    if (JOY_NEW(A_BUTTON))
-    {
-        // Pressed A, skip to next scene
-        sPlaybackControl.endMode = END_MODE_SCENE;
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-        DoSceneEndTransition(-3);
-    }
-    else if (JOY_NEW(B_BUTTON))
-    {
-        // Pressed B, end playback
-        sPlaybackControl.endMode = END_MODE_FINISH;
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-        DoSkipToEndTransition(-3);
-    }
-}
-
-bool8 QuestLogScenePlaybackIsEnding(void)
-{
-    if (sPlaybackControl.endMode != END_MODE_NONE)
-        return TRUE;
-    return FALSE;
-}
-
-void QuestLog_DrawPreviouslyOnQuestHeaderIfInPlaybackMode(void)
-{
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-        DrawPreviouslyOnQuestHeader(sNumScenes);
-}
-
-static void DrawSceneDescription(void)
-{
-    u16 i;
-    u8 numLines = 0;
-
-    for (i = 0; i < 0x100 && gStringVar4[i] != EOS; i++)
-    {
-        if (gStringVar4[i] == CHAR_NEWLINE)
-            numLines++;
-    }
-
-    PutWindowTilemap(sWindowIds[WIN_DESCRIPTION]);
-    CopyDescriptionWindowTiles(sWindowIds[WIN_DESCRIPTION]);
-    AddTextPrinterParameterized4(sWindowIds[WIN_DESCRIPTION], FONT_NORMAL, 2, sQuestLogTextLineYCoords[numLines], 1, 0, sTextColors, 0, gStringVar4);
-    ScheduleBgCopyTilemapToVram(0);
-}
-
-static void CopyDescriptionWindowTiles(u8 windowId)
-{
-    const u16 *src = sDescriptionWindow_Gfx;
-    u16 *buffer = Alloc(DESC_WIN_SIZE);
-    u8 i, j, y;
-
-    if (buffer)
-    {
-        for (i = 0; i < DESC_WIN_HEIGHT; i++)
-        {
-            switch (i)
-            {
-            default:
-                // Middle tile
-                y = 1;
-                break;
-            case 0:
-                // Top edge tile
-                y = 0;
-                break;
-            case DESC_WIN_HEIGHT - 1:
-                // Bottom edge tile
-                y = 2;
-                break;
-            }
-
-            for (j = 0; j < DESC_WIN_WIDTH; j++)
-                CpuCopy32(src + 16 * y, buffer + 16 * (2 * (15 * i) + j), TILE_SIZE_4BPP);
-        }
-
-        CopyToWindowPixelBuffer(windowId, (const u8 *)buffer, DESC_WIN_SIZE, 0);
-        Free(buffer);
-    }
-}
-
-static void QuestLog_CloseTextWindow(void)
-{
-    ClearWindowTilemap(sWindowIds[WIN_DESCRIPTION]);
-    FillWindowPixelRect(sWindowIds[WIN_DESCRIPTION], 15, 0, 0, 0xf0, 0x30);
-    CopyWindowToVram(sWindowIds[WIN_DESCRIPTION], COPYWIN_GFX);
-    PutWindowTilemap(sWindowIds[WIN_BOTTOM_BAR]);
-    CopyWindowToVram(sWindowIds[WIN_BOTTOM_BAR], COPYWIN_MAP);
-}
-
-static void DoSkipToEndTransition(s8 delay)
-{
-    FadeScreen(FADE_TO_BLACK, delay);
-    sQuestLogCB = QuestLog_WaitFadeAndCancelPlayback;
-}
-
-static void QuestLog_WaitFadeAndCancelPlayback(void)
-{
-    if (!gPaletteFade.active)
-    {
-        LockPlayerFieldControls();
-        for (sCurrentSceneNum = sCurrentSceneNum; sCurrentSceneNum < QUEST_LOG_SCENE_COUNT; sCurrentSceneNum++)
-        {
-            if (gSaveBlock1Ptr->questLog[sCurrentSceneNum].startType == 0)
-                break;
-            ReadQuestLogScriptFromSav1(sCurrentSceneNum, sQuestLogActionRecordBuffer);
-        }
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-        QuestLog_StartFinalScene();
-    }
-}
-
-void QuestLog_InitPalettesBackup(void)
-{
-    if (gQuestLogState == QL_STATE_PLAYBACK_LAST)
-        sPalettesBackup = AllocZeroed(PLTT_SIZE);
-}
-
-void QuestLog_BackUpPalette(u16 offset, u16 size)
-{
-    CpuCopy16(&gPlttBufferUnfaded[offset], &sPalettesBackup[offset], PLTT_SIZEOF(size));
-}
-
-static bool8 FieldCB2_FinalScene(void)
-{
-    LoadPalette(GetTextWindowPalette(4), BG_PLTT_ID(15), PLTT_SIZE_4BPP);
-    DrawPreviouslyOnQuestHeader(0);
-    FieldCB_WarpExitFadeFromBlack();
-    CreateTask(Task_FinalScene_WaitFade, 0xFF);
-    return TRUE;
-}
-
-static void Task_FinalScene_WaitFade(u8 taskId)
-{
-    struct Task *task = &gTasks[taskId];
-
-    if (ArePlayerFieldControlsLocked() != TRUE)
-    {
-        FreezeObjectEvents();
-        HandleEnforcedLookDirectionOnPlayerStopMoving();
-        StopPlayerAvatar();
-        LockPlayerFieldControls();
-        task->func = Task_QuestLogScene_SavedGame;
-    }
-}
-
-static void Task_QuestLogScene_SavedGame(u8 taskId)
-{
-    struct Task *task = &gTasks[taskId];
-
-    if (!gPaletteFade.active)
-    {
-        if (sPlaybackControl.endMode != END_MODE_FINISH)
-        {
-            GetMapNameGeneric(gStringVar1, gMapHeader.regionMapSectionId);
-            StringExpandPlaceholders(gStringVar4, gText_QuestLog_SavedGameAtLocation);
-            DrawSceneDescription();
-        }
-        task->data[0] = 0;
-        task->data[1] = 0;
-        task->func = Task_WaitAtEndOfQuestLog;
-        FreezeObjectEvents();
-        LockPlayerFieldControls();
-    }
-}
-
-#define tTimer data[0]
-
-static void Task_WaitAtEndOfQuestLog(u8 taskId)
-{
-    struct Task *task = &gTasks[taskId];
-
-    if (JOY_NEW(A_BUTTON | B_BUTTON) || task->tTimer >= 127 || sPlaybackControl.endMode == END_MODE_FINISH)
-    {
-        QuestLog_CloseTextWindow();
-        task->tTimer = 0;
-        task->func = Task_EndQuestLog;
-        gQuestLogState = 0;
-    }
-    else
-        task->tTimer++;
-}
-
-#undef tTimer
-
-#define tState data[0]
-#define tTimer data[1]
-
-static void Task_EndQuestLog(u8 taskId)
-{
-    s16 *data = gTasks[taskId].data;
-    u8 i;
-
-    switch (tState)
-    {
-    case 0:
-        gDisableMapMusicChangeOnMapLoad = 0;
-        Overworld_PlaySpecialMapMusic();
-        QL_SlightlyDarkenSomePals();
-        FillWindowPixelRect(sWindowIds[WIN_TOP_BAR],
-                            0xF, 0, 0,
-                            sWindowTemplates[WIN_TOP_BAR].width * 8,
-                            sWindowTemplates[WIN_TOP_BAR].height * 8);
-        tState++;
-        break;
-    case 1:
-        if (RestoreScreenAfterPlayback(taskId))
-        {
-            for (i = 0; i < WIN_COUNT; i++)
-            {
-                ClearWindowTilemap(sWindowIds[i]);
-                CopyWindowToVram(sWindowIds[i], COPYWIN_MAP);
-                RemoveWindow(sWindowIds[i]);
-            }
-            tTimer = 0;
-            tState++;
-        }
-        break;
-    case 2:
-        if (tTimer < 32)
-            tTimer++;
-        else
-            tState++;
-        break;
-    default:
-        if (sPlaybackControl.endMode == END_MODE_FINISH)
-            ShowMapNamePopup(TRUE);
-        CpuCopy16(sPalettesBackup, gPlttBufferUnfaded, PLTT_SIZE);
-        Free(sPalettesBackup);
-        sPlaybackControl = (struct PlaybackControl){};
-        ClearPlayerHeldMovementAndUnfreezeObjectEvents();
-        UnlockPlayerFieldControls();
-        gTextFlags.autoScroll = FALSE;
-        gGlobalFieldTintMode = QL_TINT_NONE;
-        DisableWildEncounters(FALSE);
-        gHelpSystemEnabled = TRUE;
-        DestroyTask(taskId);
-        break;
-    }
-}
-
-#undef tState
-#undef tTimer
-
-#define tTimer data[1]
-
-// Scroll the top and bottom windows offscreen and restore the screen tint to the original color.
-static bool8 RestoreScreenAfterPlayback(u8 taskId)
-{
-    s16 *data = gTasks[taskId].data;
-
-    if (tTimer > 15)
-        return TRUE;
-
-    CopyPaletteInvertedTint(&gPlttBufferUnfaded[BG_PLTT_ID(0) + 1], &gPlttBufferFaded[BG_PLTT_ID(0) + 1], 0xDF, 15 - tTimer);
-    CopyPaletteInvertedTint(&gPlttBufferUnfaded[OBJ_PLTT_ID(0)], &gPlttBufferFaded[OBJ_PLTT_ID(0)], 0x100, 15 - tTimer);
-                            
-    gTimeUpdateCounter = 0;
-    UpdateTimeOfDay();
-    
-    if (MapHasNaturalLight(gMapHeader.mapType))
-    {
-        UpdateAltBgPalettes(PALETTES_BG);
-        UpdatePalettesWithTime(PALETTES_ALL);
-    }
-    FillWindowPixelRect(sWindowIds[WIN_TOP_BAR],
-                        0x00, 0,
-                        sWindowTemplates[WIN_TOP_BAR].height * 8 - 1 - tTimer,
-                        sWindowTemplates[WIN_TOP_BAR].width * 8, 1);
-    FillWindowPixelRect(sWindowIds[WIN_BOTTOM_BAR],
-                        0x00, 0,
-                        data[1],
-                        sWindowTemplates[WIN_BOTTOM_BAR].width * 8, 1);
-    CopyWindowToVram(sWindowIds[WIN_TOP_BAR], COPYWIN_GFX);
-    CopyWindowToVram(sWindowIds[WIN_BOTTOM_BAR], COPYWIN_GFX);
-    tTimer++;
-    return FALSE;
-}
-
-static void QL_SlightlyDarkenSomePals(void)
-{
-    u16 *buffer = Alloc(PLTT_SIZE);
-    CpuCopy16(sPalettesBackup, buffer, PLTT_SIZE);
-    SlightlyDarkenPalsInWeather(sPalettesBackup, sPalettesBackup, 13 * 16);
-    SlightlyDarkenPalsInWeather(&sPalettesBackup[OBJ_PLTT_ID(1)], &sPalettesBackup[OBJ_PLTT_ID(1)], 1 * 16);
-    SlightlyDarkenPalsInWeather(&sPalettesBackup[OBJ_PLTT_ID(6)], &sPalettesBackup[OBJ_PLTT_ID(6)], 4 * 16);
-    SlightlyDarkenPalsInWeather(&sPalettesBackup[OBJ_PLTT_ID(11)], &sPalettesBackup[OBJ_PLTT_ID(11)], 5 * 16);
-    CpuCopy16(sPalettesBackup, gPlttBufferUnfaded, PLTT_SIZE);
-    CpuCopy16(buffer, sPalettesBackup, PLTT_SIZE);
-    Free(buffer);
-}
-
-void QL_FinishRecordingScene(void)
-{
-    if (gQuestLogState == QL_STATE_RECORDING)
-    {
-        TryRecordActionSequence(sQuestLogActionRecordBuffer);
-        RecordSceneEnd();
-        gQuestLogState = 0;
-        sQuestLogCB = NULL;
-        gQuestLogDefeatedWildMonRecord = NULL;
-        gQuestLogRecordingPointer = NULL;
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-    }
-}
-
-void QuestLog_CutRecording(void)
-{
-    if (gQuestLogPlaybackState != QL_PLAYBACK_STATE_STOPPED && gQuestLogState == QL_STATE_RECORDING)
-    {
-        TryRecordActionSequence(sQuestLogActionRecordBuffer);
-        QL_RecordWait(1);
-        RecordSceneEnd();
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-        gQuestLogState = 0;
-        sQuestLogCB = NULL;
-    }
-    gQuestLogDefeatedWildMonRecord = NULL;
-    gQuestLogRecordingPointer = NULL;
-}
-
-static void SortQuestLogInSav1(void)
-{
-    struct QuestLogScene * buffer = AllocZeroed(sizeof(gSaveBlock1Ptr->questLog));
-    u8 i;
-    u8 sceneNum = sCurrentSceneNum;
-    u8 count = 0;
-    for (i = 0; i < QUEST_LOG_SCENE_COUNT; i++)
-    {
-        if (sceneNum >= QUEST_LOG_SCENE_COUNT)
-            sceneNum = 0;
-        if (gSaveBlock1Ptr->questLog[sceneNum].startType != 0)
-        {
-            buffer[count] = gSaveBlock1Ptr->questLog[sceneNum];
-            count++;
-        }
-        sceneNum++;
-    }
-    sCurrentSceneNum = count % QUEST_LOG_SCENE_COUNT;
-    CpuCopy16(buffer, gSaveBlock1Ptr->questLog, sizeof(gSaveBlock1Ptr->questLog));
-    Free(buffer);
-}
-
-void SaveQuestLogData(void)
-{
-    if (MenuHelpers_IsLinkActive() != TRUE)
-    {
-        QuestLog_CutRecording();
-        SortQuestLogInSav1();
-    }
-}
-
-void QL_UpdateObject(struct Sprite *sprite)
-{
-    // index 0 is reserved for player, index 1 is reserved for follower
-    // other ObjectsEvents are at index localId + 1
-    struct ObjectEvent *objectEvent = &gObjectEvents[sprite->data[0]];
-    if (objectEvent->localId == LOCALID_PLAYER)
-    {
-        if (sMovementScripts[0][0] != MOVEMENT_ACTION_NONE)
-        {
-            ObjectEventSetHeldMovement(objectEvent, sMovementScripts[0][0]);
-            sMovementScripts[0][0] = MOVEMENT_ACTION_NONE;
-        }
-        if (sMovementScripts[0][1] != QL_PLAYER_GFX_NONE)
-        {
-            QuestLogUpdatePlayerSprite(sMovementScripts[0][1]);
-            sMovementScripts[0][1] = QL_PLAYER_GFX_NONE;
-        }
-        QL_UpdateObjectEventCurrentMovement(objectEvent, sprite);
-    }
-    else if (objectEvent->localId == OBJ_EVENT_ID_FOLLOWER)
-    {
-        if (sMovementScripts[1][0] != MOVEMENT_ACTION_NONE)
-        {
-            ObjectEventSetHeldMovement(objectEvent, sMovementScripts[1][0]);
-            sMovementScripts[1][0] = MOVEMENT_ACTION_NONE;
-        }
-        QL_UpdateObjectEventCurrentMovement(objectEvent, sprite);
-    }
-    else
-    {
-        if (sMovementScripts[objectEvent->localId][0] != MOVEMENT_ACTION_NONE)
-        {
-            ObjectEventSetHeldMovement(objectEvent, sMovementScripts[objectEvent->localId + 1][0]);
-            sMovementScripts[objectEvent->localId + 1][0] = MOVEMENT_ACTION_NONE;
-        }
-        QL_UpdateObjectEventCurrentMovement(objectEvent, sprite);
-    }
-}
-
-void QuestLogRecordNPCStep(u8 localId, u8 mapNum, u8 mapGroup, u8 movementActionId)
-{
-    if (!RecordHeadAtEndOfEntryOrScriptContext2Enabled())
-    {
-        sCurSceneActions[gQuestLogCurActionIdx].duration = sNextActionDelay;
-        sCurSceneActions[gQuestLogCurActionIdx].type = QL_ACTION_MOVEMENT;
-        if (localId == OBJ_EVENT_ID_FOLLOWER)
-            sCurSceneActions[gQuestLogCurActionIdx].data.a.localId = 1;
-        else
-            sCurSceneActions[gQuestLogCurActionIdx].data.a.localId = localId + 1;
-        sCurSceneActions[gQuestLogCurActionIdx].data.a.mapNum = mapNum;
-        sCurSceneActions[gQuestLogCurActionIdx].data.a.mapGroup = mapGroup;
-        sCurSceneActions[gQuestLogCurActionIdx].data.a.movementActionId = movementActionId;
-        gQuestLogCurActionIdx++;
-        sNextActionDelay = 0;
-    }
-}
-
-void QuestLogRecordNPCStepWithDuration(u8 localId, u8 mapNum, u8 mapGroup, u8 movementActionId, u8 duration)
-{
-    if (!RecordHeadAtEndOfEntry())
-    {
-        sCurSceneActions[gQuestLogCurActionIdx].duration = sNextActionDelay;
-        sCurSceneActions[gQuestLogCurActionIdx].type = QL_ACTION_MOVEMENT;
-        if (localId == OBJ_EVENT_ID_FOLLOWER)
-            sCurSceneActions[gQuestLogCurActionIdx].data.a.localId = 1;
-        else
-            sCurSceneActions[gQuestLogCurActionIdx].data.a.localId = localId + 1;
-        sCurSceneActions[gQuestLogCurActionIdx].data.a.mapNum = mapNum;
-        sCurSceneActions[gQuestLogCurActionIdx].data.a.mapGroup = mapGroup;
-        sCurSceneActions[gQuestLogCurActionIdx].data.a.movementActionId = movementActionId;
-        gQuestLogCurActionIdx++;
-        sNextActionDelay = duration;
-    }
-}
-
-void QuestLogRecordPlayerStep(u8 movementActionId)
-{
-    if (!RecordHeadAtEndOfEntryOrScriptContext2Enabled())
-    {
-        if (movementActionId != sCurSceneActions[sLastQuestLogCursor].data.a.movementActionId || movementActionId > MOVEMENT_ACTION_FACE_RIGHT)
-        {
-            sCurSceneActions[gQuestLogCurActionIdx].duration = sNextActionDelay;
-            sCurSceneActions[gQuestLogCurActionIdx].type = QL_ACTION_MOVEMENT;
-            sCurSceneActions[gQuestLogCurActionIdx].data.a.localId = 0;
-            sCurSceneActions[gQuestLogCurActionIdx].data.a.movementActionId = movementActionId;
-            sLastQuestLogCursor = gQuestLogCurActionIdx;
-            gQuestLogCurActionIdx++;
-            sNextActionDelay = 0;
-        }
-    }
-}
-
-void QuestLogRecordPlayerStepWithDuration(u8 movementActionId, u8 duration)
-{
-    if (!RecordHeadAtEndOfEntry())
-    {
-        sCurSceneActions[gQuestLogCurActionIdx].duration = sNextActionDelay;
-        sCurSceneActions[gQuestLogCurActionIdx].type = QL_ACTION_MOVEMENT;
-        sCurSceneActions[gQuestLogCurActionIdx].data.a.localId = 0;
-        sCurSceneActions[gQuestLogCurActionIdx].data.a.movementActionId = movementActionId;
-        sLastQuestLogCursor = gQuestLogCurActionIdx;
-        gQuestLogCurActionIdx++;
-        sNextActionDelay = duration;
-    }
-}
-
-void QuestLogRecordPlayerAvatarGfxTransition(u8 gfxState)
-{
-    if (!RecordHeadAtEndOfEntry())
-    {
-        sCurSceneActions[gQuestLogCurActionIdx].duration = sNextActionDelay;
-        sCurSceneActions[gQuestLogCurActionIdx].type = QL_ACTION_GFX_CHANGE;
-        sCurSceneActions[gQuestLogCurActionIdx].data.b.localId = 0;
-        sCurSceneActions[gQuestLogCurActionIdx].data.b.gfxState = gfxState;
-        gQuestLogCurActionIdx++;
-        sNextActionDelay = 0;
-    }
-}
-
-void QuestLogRecordPlayerAvatarGfxTransitionWithDuration(u8 gfxState, u8 duration)
-{
-    if (!RecordHeadAtEndOfEntry())
-    {
-        sCurSceneActions[gQuestLogCurActionIdx].duration = sNextActionDelay;
-        sCurSceneActions[gQuestLogCurActionIdx].type = QL_ACTION_GFX_CHANGE;
-        sCurSceneActions[gQuestLogCurActionIdx].data.b.localId = 0;
-        sCurSceneActions[gQuestLogCurActionIdx].data.b.gfxState = gfxState;
-        gQuestLogCurActionIdx++;
-        sNextActionDelay = duration;
-    }
-}
-
-void QL_RecordFieldInput(struct FieldInput * fieldInput)
-{
-    if (gQuestLogCurActionIdx < sMaxActionsInScene)
-    {
-        // Retain only the following fields:
-        // - pressedAButton
-        // - checkStandardWildEncounter
-        // - heldDirection
-        // - heldDirection2
-        // - tookStep
-        // - pressedBButton
-        // - dpadDirection
-        u32 data = *(u32 *)fieldInput & 0x00FF00F3;
-        sCurSceneActions[gQuestLogCurActionIdx].duration = sNextActionDelay;
-        sCurSceneActions[gQuestLogCurActionIdx].type = QL_ACTION_INPUT;
-        sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[0] = data;
-        sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[1] = data >> 8; // always 0
-        sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[2] = data >> 16;
-        sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[3] = data >> 24; // always 0
-        gQuestLogCurActionIdx++;
-        if (ArePlayerFieldControlsLocked())
-            sNextActionDelay = 1;
-        else
-            sNextActionDelay = 0;
-    }
-}
-
-static void TogglePlaybackStateForOverworldLock(u8 a0)
-{
-    switch (a0)
-    {
-    case 1:
-        if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_RUNNING)
-            gQuestLogPlaybackState = QL_PLAYBACK_STATE_ACTION_END; // Message visible, overworld locked
-        break;
-    case 2:
-        if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_ACTION_END)
-            gQuestLogPlaybackState = QL_PLAYBACK_STATE_RUNNING; // Overworld unlocked
-        break;
-    }
-}
-
-void QuestLog_OnEscalatorWarp(u8 direction)
-{
-    u8 state = QL_GetPlaybackState();
-
-    switch (direction)
-    {
-    case QL_ESCALATOR_OUT: // warp out
-        if (state == QL_PLAYBACK_STATE_RUNNING)
-            gQuestLogPlaybackState = QL_PLAYBACK_STATE_ACTION_END;
-        else if (state == QL_PLAYBACK_STATE_RECORDING)
-        {
-            sCurSceneActions[gQuestLogCurActionIdx].duration = sNextActionDelay;
-            sCurSceneActions[gQuestLogCurActionIdx].type = QL_ACTION_EMPTY;
-            gQuestLogCurActionIdx++;
-            sNextActionDelay = 0;
-            gQuestLogPlaybackState = QL_PLAYBACK_STATE_RECORDING_NO_DELAY;
-        }
-        break;
-    case QL_ESCALATOR_IN: // warp in
-        if (state == QL_PLAYBACK_STATE_RUNNING)
-            gQuestLogPlaybackState = QL_PLAYBACK_STATE_RUNNING;
-        else if (state == QL_PLAYBACK_STATE_RECORDING)
-            gQuestLogPlaybackState = QL_PLAYBACK_STATE_RECORDING;
-        break;
-    }
-}
-
-static void ResetActions(u8 kind, struct QuestLogAction *actions, u16 size)
-{
-    int i;
-
-    switch (kind)
-    {
-    default:
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-        break;
-    case QL_PLAYBACK_STATE_RUNNING:
-        sCurSceneActions = actions;
-        sMaxActionsInScene = size / sizeof(*sCurSceneActions);
-        for (i = 0; i < (s32)ARRAY_COUNT(sMovementScripts); i++)
-        {
-            sMovementScripts[i][0] |= MOVEMENT_ACTION_NONE;
-            sMovementScripts[i][1] |= QL_PLAYER_GFX_NONE;
-        }
-        gQuestLogCurActionIdx = 0;
-        sLastQuestLogCursor = 0;
-        gQuestLogFieldInput = (struct FieldInput){};
-        sNextActionDelay = sCurSceneActions[gQuestLogCurActionIdx].duration;
-        sMovementScripts[0][0] = sCurSceneActions[gQuestLogCurActionIdx].data.a.movementActionId;
-        sMovementScripts[0][1] = QL_PLAYER_GFX_NONE;
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_RUNNING;
-        break;
-    case QL_PLAYBACK_STATE_RECORDING:
-        sCurSceneActions = actions;
-        sMaxActionsInScene = size / sizeof(*sCurSceneActions);
-        for (i = 0; i < sMaxActionsInScene; i++)
-        {
-            sCurSceneActions[i] = (struct QuestLogAction){
-                .duration = 0xFFFF,
-                .type = QL_ACTION_SCENE_END
-            };
-        }
-        gQuestLogCurActionIdx = 0;
-        sNextActionDelay = 0;
-        sCurSceneActions[gQuestLogCurActionIdx].duration = 0;
-        sCurSceneActions[gQuestLogCurActionIdx].type = QL_ACTION_MOVEMENT;
-        sCurSceneActions[gQuestLogCurActionIdx].data.a.localId = 0;
-        switch (GetPlayerFacingDirection())
-        {
-        case DIR_NONE:
-        case DIR_SOUTH:
-            sCurSceneActions[gQuestLogCurActionIdx].data.a.movementActionId = MOVEMENT_ACTION_FACE_DOWN;
-            break;
-        case DIR_EAST:
-            sCurSceneActions[gQuestLogCurActionIdx].data.a.movementActionId = MOVEMENT_ACTION_FACE_RIGHT;
-            break;
-        case DIR_NORTH:
-            sCurSceneActions[gQuestLogCurActionIdx].data.a.movementActionId = MOVEMENT_ACTION_FACE_UP;
-            break;
-        case DIR_WEST:
-            sCurSceneActions[gQuestLogCurActionIdx].data.a.movementActionId = MOVEMENT_ACTION_FACE_LEFT;
-            break;
-        }
-        sLastQuestLogCursor = 0;
-        gQuestLogCurActionIdx++;
-        sCurSceneActions[gQuestLogCurActionIdx].duration = 0;
-        sCurSceneActions[gQuestLogCurActionIdx].type = QL_ACTION_INPUT;
-        sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[0] = 0;
-        sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[1] = 0;
-        sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[2] = 0;
-        sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[3] = 0;
-        gQuestLogCurActionIdx++;
-        gQuestLogPlaybackState = QL_PLAYBACK_STATE_RECORDING;
-        break;
-    }
-}
-
-void QL_TryRunActions(void)
-{
-    switch (gQuestLogPlaybackState)
-    {
-    case QL_PLAYBACK_STATE_STOPPED:
-    case QL_PLAYBACK_STATE_ACTION_END:
-    case QL_PLAYBACK_STATE_RECORDING_NO_DELAY:
-        break;
-    case QL_PLAYBACK_STATE_RUNNING:
-        if (!RecordHeadAtEndOfEntryOrScriptContext2Enabled())
-        {
-            if (sNextActionDelay != 0)
-            {
-                sNextActionDelay--;
-            }
-            else
-            {
-                do
-                {
-                    switch (sCurSceneActions[gQuestLogCurActionIdx].type)
-                    {
-                    case QL_ACTION_MOVEMENT:
-                        // NPC movement action
-                        sMovementScripts[sCurSceneActions[gQuestLogCurActionIdx].data.a.localId][0] = sCurSceneActions[gQuestLogCurActionIdx].data.a.movementActionId;
-                        break;
-                    case QL_ACTION_GFX_CHANGE:
-                        // State transition
-                        sMovementScripts[sCurSceneActions[gQuestLogCurActionIdx].data.b.localId][1] = sCurSceneActions[gQuestLogCurActionIdx].data.b.gfxState;
-                        break;
-                    case QL_ACTION_INPUT:
-                        // Player input
-                        *(u32 *)&gQuestLogFieldInput = ((sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[3] << 24)
-                                                      | (sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[2] << 16)
-                                                      | (sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[1] << 8)
-                                                      | (sCurSceneActions[gQuestLogCurActionIdx].data.fieldInput[0] << 0));
-                        break;
-                    case QL_ACTION_EMPTY:
-                        // End
-                        gQuestLogPlaybackState = QL_PLAYBACK_STATE_ACTION_END;
-                        break;
-                    case QL_ACTION_WAIT:
-                        // Nothing. The wait action uses sNextActionDelay to add a pause to playback.
-                        // When the counter is finished and this is reached there's nothing else that needs to be done.
-                        break;
-                    case QL_ACTION_SCENE_END:
-                        gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-                        break;
-                    }
-
-                    if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_STOPPED)
-                        break;
-                    if (++gQuestLogCurActionIdx >= sMaxActionsInScene)
-                    {
-                        gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-                        break;
-                    }
-                    sNextActionDelay = sCurSceneActions[gQuestLogCurActionIdx].duration;
-
-                } while (gQuestLogPlaybackState != QL_PLAYBACK_STATE_ACTION_END && (sNextActionDelay == 0 || sNextActionDelay == 0xFFFF));
-            }
-        }
-        else if (gQuestLogCurActionIdx >= sMaxActionsInScene)
-        {
-            gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-        }
-        break;
-    case QL_PLAYBACK_STATE_RECORDING:
-        if (ArePlayerFieldControlsLocked() != TRUE)
-        {
-            sNextActionDelay++;
-            if (gQuestLogCurActionIdx >= sMaxActionsInScene)
-                gQuestLogPlaybackState = QL_PLAYBACK_STATE_STOPPED;
-        }
-        break;
-    }
-}
-
-void QL_AfterRecordFishActionSuccessful(void)
-{
-    sNextActionDelay++;
-}
-
-u8 QL_GetPlaybackState(void)
-{
-    switch (gQuestLogPlaybackState)
-    {
-    case QL_PLAYBACK_STATE_STOPPED:
-    default:
-        return QL_PLAYBACK_STATE_STOPPED;
-
-    case QL_PLAYBACK_STATE_RUNNING:
-    case QL_PLAYBACK_STATE_ACTION_END:
-        return QL_PLAYBACK_STATE_RUNNING;
-
-    case QL_PLAYBACK_STATE_RECORDING:
-    case QL_PLAYBACK_STATE_RECORDING_NO_DELAY:
-        return QL_PLAYBACK_STATE_RECORDING;
-    }
-}
-
-static bool8 RecordHeadAtEndOfEntryOrScriptContext2Enabled(void)
-{
-    if (gQuestLogCurActionIdx >= sMaxActionsInScene || ArePlayerFieldControlsLocked() == TRUE)
-        return TRUE;
-    return FALSE;
-}
-
-static bool8 RecordHeadAtEndOfEntry(void)
-{
-    if (gQuestLogCurActionIdx >= sMaxActionsInScene)
-        return TRUE;
-    return FALSE;
-}
-
-static const struct FlagOrVarRecord sDummyFlagOrVarRecord = {
-    .idx = 0,
-    .isFlag = FALSE,
-    .value = 0x7FFF
-};
-
-void *QuestLogGetFlagOrVarPtr(bool8 isFlag, u16 idx)
-{
-    void *response;
-    if (gQuestLogCurActionIdx == 0)
-        return NULL;
-    if (gQuestLogCurActionIdx >= sMaxActionsInScene)
-        return NULL;
-    if (sFlagOrVarPlayhead >= sNumFlagsOrVars)
-        return NULL;
-    if (sFlagOrVarRecords[sFlagOrVarPlayhead].idx == idx && sFlagOrVarRecords[sFlagOrVarPlayhead].isFlag == isFlag)
-    {
-        response = &sFlagOrVarRecords[sFlagOrVarPlayhead].value;
-        sFlagOrVarPlayhead++;
-    }
-    else
-        response = NULL;
-    return response;
-}
-
-void QuestLogSetFlagOrVar(bool8 isFlag, u16 idx, u16 value)
-{
-    if (gQuestLogCurActionIdx == 0)
-        return;
-    if (gQuestLogCurActionIdx >= sMaxActionsInScene)
-        return;
-    if (sFlagOrVarPlayhead >= sNumFlagsOrVars)
-        return;
-    sFlagOrVarRecords[sFlagOrVarPlayhead].idx = idx;
-    sFlagOrVarRecords[sFlagOrVarPlayhead].isFlag = isFlag;
-    sFlagOrVarRecords[sFlagOrVarPlayhead].value = value;
-    sFlagOrVarPlayhead++;
-}
diff --git a/src/quest_log_battle.c b/src/quest_log_battle.c
deleted file mode 100644
index a00fe23c5..000000000
--- a/src/quest_log_battle.c
+++ /dev/null
@@ -1,152 +0,0 @@
-#include "global.h"
-#include "gflib.h"
-#include "battle.h"
-#include "battle_anim.h"
-#include "battle_setup.h"
-#include "link.h"
-#include "overworld.h"
-#include "quest_log.h"
-#include "constants/trainers.h"
-
-static void GetLinkMultiBattlePlayerIndexes(s32 *, s32 *);
-
-void TrySetQuestLogBattleEvent(void)
-{
-    if (!(gBattleTypeFlags & (BATTLE_TYPE_LINK | BATTLE_TYPE_OLD_MAN_TUTORIAL | BATTLE_TYPE_POKEDUDE)) && (gBattleOutcome == B_OUTCOME_WON || gBattleOutcome == B_OUTCOME_CAUGHT))
-    {
-        // Why allocate both of these? Only one will ever be used at a time
-        struct QuestLogEvent_TrainerBattle * trainerData = Alloc(sizeof(*trainerData));
-        struct QuestLogEvent_WildBattle * wildData = Alloc(sizeof(*wildData));
-        u16 eventId;
-        u16 playerEndingHP;
-        u16 playerMaxHP;
-
-        if (gBattleTypeFlags & BATTLE_TYPE_TRAINER)
-        {
-            u32 trainerClass = GetTrainerClassFromId(TRAINER_BATTLE_PARAM.opponentA);
-            switch (trainerClass)
-            {
-            case TRAINER_CLASS_LEADER:
-                eventId = QL_EVENT_DEFEATED_GYM_LEADER;
-                break;
-            case TRAINER_CLASS_CHAMPION:
-                eventId = QL_EVENT_DEFEATED_CHAMPION;
-                break;
-            case TRAINER_CLASS_ELITE_FOUR:
-                eventId = QL_EVENT_DEFEATED_E4_MEMBER;
-                break;
-            default:
-                eventId = QL_EVENT_DEFEATED_TRAINER;
-                break;
-            }
-            trainerData->trainerId = TRAINER_BATTLE_PARAM.opponentA;
-            if (gBattleTypeFlags & BATTLE_TYPE_DOUBLE)
-            {
-                trainerData->speciesOpponent = gBattleResults.lastOpponentSpecies;
-                
-                // Decide which of the pokemon on the player's side to mention as the victor
-                if (GetBattlerSide(gBattleStruct->lastAttackerToFaintOpponent) == B_SIDE_PLAYER)
-                    trainerData->speciesPlayer = gBattleMons[gBattleStruct->lastAttackerToFaintOpponent].species;
-                else if (gBattleMons[GetBattlerAtPosition(0)].hp != 0)
-                    trainerData->speciesPlayer = gBattleMons[GetBattlerAtPosition(0)].species;
-                else
-                    trainerData->speciesPlayer = gBattleMons[GetBattlerAtPosition(2)].species;
-
-                playerEndingHP = gBattleMons[GetBattlerAtPosition(0)].hp + gBattleMons[GetBattlerAtPosition(2)].hp;
-                playerMaxHP = gBattleMons[GetBattlerAtPosition(0)].maxHP + gBattleMons[GetBattlerAtPosition(2)].maxHP;
-            }
-            else
-            {
-                trainerData->speciesOpponent = gBattleResults.lastOpponentSpecies;
-                trainerData->speciesPlayer = gBattleMons[GetBattlerAtPosition(0)].species;
-                playerEndingHP = gBattleMons[GetBattlerAtPosition(0)].hp;
-                playerMaxHP = gBattleMons[GetBattlerAtPosition(0)].maxHP;
-            }
-            trainerData->mapSec = GetCurrentRegionMapSectionId();
-
-            // Calculate fractional HP loss (determines flavor text, e.g. "handily" vs "somehow" defeated trainer)
-            trainerData->hpFractionId = 0;
-            if (playerEndingHP < playerMaxHP / 3 * 2)
-                trainerData->hpFractionId++;
-            if (playerEndingHP < playerMaxHP / 3)
-                trainerData->hpFractionId++;
-
-            SetQuestLogEvent(eventId, (const u16 *)trainerData);
-        }
-        else
-        {
-            if (gBattleOutcome == B_OUTCOME_WON)
-            {
-                wildData->defeatedSpecies = GetMonData(gEnemyParty, MON_DATA_SPECIES);
-                wildData->caughtSpecies = SPECIES_NONE;
-            }
-            else // gBattleOutcome == B_OUTCOME_CAUGHT
-            {
-                wildData->defeatedSpecies = SPECIES_NONE;
-                wildData->caughtSpecies = GetMonData(gEnemyParty, MON_DATA_SPECIES);
-            }
-            wildData->mapSec = GetCurrentRegionMapSectionId();
-            SetQuestLogEvent(QL_EVENT_DEFEATED_WILD_MON, (const u16 *)wildData);
-        }
-        Free(trainerData);
-        Free(wildData);
-    }
-}
-
-void TrySetQuestLogLinkBattleEvent(void)
-{
-    s32 partnerIdx = 0;
-    s32 opponentIdxs[2];
-    u16 eventId;
-    s32 i;
-    bool32 inUnionRoom;
-
-    if (gBattleTypeFlags & BATTLE_TYPE_LINK)
-    {
-        struct QuestLogEvent_LinkBattle * data = Alloc(sizeof(*data));
-        data->outcome = gBattleOutcome - 1; // 0 = won, 1 = lost, 2 = drew
-        if (gBattleTypeFlags & BATTLE_TYPE_MULTI)
-        {
-            eventId = QL_EVENT_LINK_BATTLED_MULTI;
-            GetLinkMultiBattlePlayerIndexes(&partnerIdx, opponentIdxs);
-            for (i = 0; i < PLAYER_NAME_LENGTH; i++)
-            {
-                data->playerNames[0][i] = gLinkPlayers[partnerIdx].name[i];
-                data->playerNames[1][i] = gLinkPlayers[opponentIdxs[0]].name[i];
-                data->playerNames[2][i] = gLinkPlayers[opponentIdxs[1]].name[i];
-            }
-        }
-        else
-        {
-            if (gBattleTypeFlags & BATTLE_TYPE_DOUBLE)
-                eventId = QL_EVENT_LINK_BATTLED_DOUBLE;
-            else
-            {
-                inUnionRoom = InUnionRoom();
-                eventId = QL_EVENT_LINK_BATTLED_SINGLE;
-                
-                if (inUnionRoom == TRUE)
-                    eventId = QL_EVENT_LINK_BATTLED_UNION;
-            }
-
-            for (i = 0; i < PLAYER_NAME_LENGTH; i++)
-                data->playerNames[0][i] = gLinkPlayers[gBattleScripting.multiplayerId ^ 1].name[i];
-        }
-        SetQuestLogEvent(eventId, (const u16 *)data);
-        Free(data);
-    }
-}
-
-static void GetLinkMultiBattlePlayerIndexes(s32 * partnerIdx, s32 * opponentIdxs)
-{
-    s32 i;
-    s32 numOpponentsFound = 0;
-    u8 partnerId = gLinkPlayers[gBattleScripting.multiplayerId].id ^ 2;
-    for (i = 0; i < MAX_BATTLERS_COUNT; i++)
-    {
-        if (partnerId == gLinkPlayers[i].id)
-            *partnerIdx = i;
-        else if (i != gBattleScripting.multiplayerId)
-            opponentIdxs[numOpponentsFound++] = i;
-    }
-}
diff --git a/src/quest_log_events.c b/src/quest_log_events.c
deleted file mode 100644
index 0b61eb0e5..000000000
--- a/src/quest_log_events.c
+++ /dev/null
@@ -1,2238 +0,0 @@
-#include "global.h"
-#include "gflib.h"
-#include "battle.h"
-#include "data.h"
-#include "dynamic_placeholder_text_util.h"
-#include "event_data.h"
-#include "event_scripts.h"
-#include "field_move.h"
-#include "menu_helpers.h"
-#include "item.h"
-#include "link.h"
-#include "quest_log.h"
-#include "party_menu.h"
-#include "pokemon_storage_system.h"
-#include "region_map.h"
-#include "strings.h"
-#include "constants/field_move.h"
-#include "constants/maps.h"
-#include "constants/trainers.h"
-#include "constants/items.h"
-#include "constants/region_map_sections.h"
-
-enum {
-    STEP_RECORDING_MODE_ENABLED,
-    STEP_RECORDING_MODE_DISABLED,
-    STEP_RECORDING_MODE_DISABLED_UNTIL_DEPART,
-};
-
-struct DeferredLinkEvent
-{
-    u16 id;
-    u16 ALIGNED(4) data[14];
-};
-
-#define CMD_HEADER_SIZE 4
-#define MAX_CMD_REPEAT  4
-
-static EWRAM_DATA struct DeferredLinkEvent sDeferredEvent = {0};
-EWRAM_DATA struct QuestLogRepeatEventTracker gQuestLogRepeatEventTracker = {0};
-static EWRAM_DATA u8 sStepRecordingMode = 0;
-static EWRAM_DATA bool8 sNewlyEnteredMap = FALSE;
-static EWRAM_DATA u8 sLastDepartedLocation = 0;
-static EWRAM_DATA bool8 sPlayedTheSlots = FALSE;
-
-static bool8 InQuestLogDisabledLocation(void);
-static bool8 ShouldRegisterEvent_HandlePartyActions(u16, const u16 *);
-static bool8 ShouldRegisterEvent_HandleBeatStoryTrainer(u16, const u16 *);
-static u16 *ShouldRegisterEvent(u16, const u16 *);
-static bool8 TryDeferLinkEvent(u16, const u16 *);
-static bool8 TryDeferTrainerBattleEvent(u16, const u16 *);
-static bool8 IsEventWithSpecialEncounterSpecies(u16, const u16 *);
-static void UpdateRepeatEventCounter(u16);
-static u16 *QL_RecordAction_Wait(u16 *, u16);
-static u16 *RecordEvent_SwitchedPartyOrder(u16 *, const struct QuestLogEvent_SwitchedPartyOrder *);
-static u16 *RecordEvent_UsedItem(u16 *, const struct QuestLogEvent_Item *);
-static u16 *RecordEvent_GaveHeldItemFromPartyMenu(u16 *, const struct QuestLogEvent_Item *);
-static u16 *RecordEvent_GaveHeldItemFromBagMenu(u16 *, const struct QuestLogEvent_Item *);
-static u16 *RecordEvent_GaveHeldItemFromPC(u16 *, const struct QuestLogEvent_Item *);
-static u16 *RecordEvent_TookHeldItem(u16 *, const struct QuestLogEvent_Item *);
-static u16 *RecordEvent_SwappedHeldItemFromBag(u16 *, const struct QuestLogEvent_SwappedHeldItem *);
-static u16 *RecordEvent_SwappedHeldItemFromPC(u16 *, const struct QuestLogEvent_SwappedHeldItem *);
-static u16 *RecordEvent_UsedPkmnCenter(u16 *, const u16 *);
-static u16 *RecordEvent_LinkTraded(u16 *, const struct QuestLogEvent_Traded *);
-static u16 *RecordEvent_LinkBattledSingle(u16 *, const struct QuestLogEvent_LinkBattle *);
-static u16 *RecordEvent_LinkBattledDouble(u16 *, const struct QuestLogEvent_LinkBattle *);
-static u16 *RecordEvent_LinkBattledMulti(u16 *, const struct QuestLogEvent_LinkBattle *);
-static u16 *RecordEvent_UsedUnionRoom(u16 *, const u16 *);
-static u16 *RecordEvent_UsedUnionRoomChat(u16 *, const u16 *);
-static u16 *RecordEvent_LinkTradedUnionRoom(u16 *, const struct QuestLogEvent_Traded *);
-static u16 *RecordEvent_LinkBattledUnionRoom(u16 *, const struct QuestLogEvent_LinkBattle *);
-static u16 *RecordEvent_SwitchedMonsBetweenBoxes(u16 *, const struct QuestLogEvent_MovedBoxMon *);
-static u16 *RecordEvent_SwitchedMonsWithinBox(u16 *, const u16 *);
-static u16 *RecordEvent_SwitchedPartyMonForPCMon(u16 *, const u16 *);
-static u16 *RecordEvent_MovedMonBetweenBoxes(u16 *, const u16 *);
-static u16 *RecordEvent_MovedMonWithinBox(u16 *, const u16 *);
-static u16 *RecordEvent_WithdrewMonFromPC(u16 *, const u16 *);
-static u16 *RecordEvent_DepositedMonInPC(u16 *, const u16 *);
-static u16 *RecordEvent_SwitchedMultipleMons(u16 *, const u16 *);
-static u16 *RecordEvent_DepositedItemInPC(u16 *, const struct QuestLogEvent_Item *);
-static u16 *RecordEvent_WithdrewItemFromPC(u16 *, const struct QuestLogEvent_Item *);
-static u16 *RecordEvent_DefeatedGymLeader(u16 *, const struct QuestLogEvent_TrainerBattle *);
-static u16 *RecordEvent_DefeatedWildMon(u16 *, const struct QuestLogEvent_WildBattle *);
-static u16 *RecordEvent_DefeatedEliteFourMember(u16 *, const struct QuestLogEvent_TrainerBattle *);
-static u16 *RecordEvent_DefeatedChampion(u16 *, const struct QuestLogEvent_TrainerBattle *);
-static u16 *RecordEvent_DefeatedNormalTrainer(u16 *, const struct QuestLogEvent_TrainerBattle *);
-static u16 *RecordEvent_DepartedLocation(u16 *, const struct QuestLogEvent_Departed *);
-static u16 *RecordEvent_UsedFieldMove(u16 *, const struct QuestLogEvent_FieldMove *);
-static u16 *RecordEvent_BoughtItem(u16 *, const struct QuestLogEvent_Shop *);
-static u16 *RecordEvent_SoldItem(u16 *, const struct QuestLogEvent_Shop *);
-static u16 *RecordEvent_ObtainedStoryItem(u16 *, const struct QuestLogEvent_StoryItem *);
-static u16 *RecordEvent_ArrivedInLocation(u16 *, const u16 *);
-static const u16 *LoadEvent_SwitchedPartyOrder(const u16 *);
-static const u16 *LoadEvent_UsedItem(const u16 *);
-static const u16 *LoadEvent_GaveHeldItemFromPartyMenu(const u16 *);
-static const u16 *LoadEvent_GaveHeldItemFromBagMenu(const u16 *);
-static const u16 *LoadEvent_GaveHeldItemFromPC(const u16 *);
-static const u16 *LoadEvent_TookHeldItem(const u16 *);
-static const u16 *LoadEvent_SwappedHeldItem(const u16 *);
-static const u16 *LoadEvent_SwappedHeldItemFromPC(const u16 *);
-static const u16 *LoadEvent_UsedPkmnCenter(const u16 *);
-static const u16 *LoadEvent_LinkTraded(const u16 *);
-static const u16 *LoadEvent_LinkBattledSingle(const u16 *);
-static const u16 *LoadEvent_LinkBattledDouble(const u16 *);
-static const u16 *LoadEvent_LinkBattledMulti(const u16 *);
-static const u16 *LoadEvent_UsedUnionRoom(const u16 *);
-static const u16 *LoadEvent_UsedUnionRoomChat(const u16 *);
-static const u16 *LoadEvent_LinkTradedUnionRoom(const u16 *);
-static const u16 *LoadEvent_LinkBattledUnionRoom(const u16 *);
-static const u16 *LoadEvent_SwitchedMonsBetweenBoxes(const u16 *);
-static const u16 *LoadEvent_SwitchedMonsWithinBox(const u16 *);
-static const u16 *LoadEvent_SwitchedPartyMonForPCMon(const u16 *);
-static const u16 *LoadEvent_MovedMonBetweenBoxes(const u16 *);
-static const u16 *LoadEvent_MovedMonWithinBox(const u16 *);
-static const u16 *LoadEvent_WithdrewMonFromPC(const u16 *);
-static const u16 *LoadEvent_DepositedMonInPC(const u16 *);
-static const u16 *LoadEvent_SwitchedMultipleMons(const u16 *);
-static const u16 *LoadEvent_DepositedItemInPC(const u16 *);
-static const u16 *LoadEvent_WithdrewItemFromPC(const u16 *);
-static const u16 *LoadEvent_DefeatedGymLeader(const u16 *);
-static const u16 *LoadEvent_DefeatedWildMon(const u16 *);
-static const u16 *LoadEvent_DefeatedEliteFourMember(const u16 *);
-static const u16 *LoadEvent_DefeatedChampion(const u16 *);
-static const u16 *LoadEvent_DefeatedTrainer(const u16 *);
-static const u16 *LoadEvent_DepartedLocation(const u16 *);
-static const u16 *LoadEvent_UsedFieldMove(const u16 *);
-static const u16 *LoadEvent_BoughtItem(const u16 *);
-static const u16 *LoadEvent_SoldItem(const u16 *);
-static const u16 *LoadEvent_ObtainedStoryItem(const u16 *);
-static const u16 *LoadEvent_ArrivedInLocation(const u16 *);
-static bool8 IsSpeciesFromSpecialEncounter(u16);
-static bool8 ShouldRegisterEvent_HandleDeparted(u16, const u16 *);
-static bool8 ShouldRegisterEvent_DepartedGameCorner(u16, const u16 *);
-static void TranslateLinkPartnersName(u8 *);
-
-typedef u16 *(*RecordEventFunc)(u16 *, const u16 *);
-
-static const RecordEventFunc sRecordEventFuncs[] = {
-    [QL_EVENT_INPUT]                         = NULL,
-    [QL_EVENT_GFX_CHANGE]                    = NULL,
-    [QL_EVENT_MOVEMENT]                      = NULL,
-    [QL_EVENT_SWITCHED_PARTY_ORDER]          = (RecordEventFunc) RecordEvent_SwitchedPartyOrder,
-    [QL_EVENT_USED_ITEM]                     = (RecordEventFunc) RecordEvent_UsedItem,
-    [QL_EVENT_GAVE_HELD_ITEM]                = (RecordEventFunc) RecordEvent_GaveHeldItemFromPartyMenu,
-    [QL_EVENT_GAVE_HELD_ITEM_BAG]            = (RecordEventFunc) RecordEvent_GaveHeldItemFromBagMenu,
-    [QL_EVENT_GAVE_HELD_ITEM_PC]             = (RecordEventFunc) RecordEvent_GaveHeldItemFromPC,
-    [QL_EVENT_TOOK_HELD_ITEM]                = (RecordEventFunc) RecordEvent_TookHeldItem,
-    [QL_EVENT_SWAPPED_HELD_ITEM]             = (RecordEventFunc) RecordEvent_SwappedHeldItemFromBag,
-    [QL_EVENT_SWAPPED_HELD_ITEM_PC]          = (RecordEventFunc) RecordEvent_SwappedHeldItemFromPC,
-    [QL_EVENT_USED_PKMN_CENTER]              = (RecordEventFunc) RecordEvent_UsedPkmnCenter,
-    [QL_EVENT_LINK_TRADED]                   = (RecordEventFunc) RecordEvent_LinkTraded,
-    [QL_EVENT_LINK_BATTLED_SINGLE]           = (RecordEventFunc) RecordEvent_LinkBattledSingle,
-    [QL_EVENT_LINK_BATTLED_DOUBLE]           = (RecordEventFunc) RecordEvent_LinkBattledDouble,
-    [QL_EVENT_LINK_BATTLED_MULTI]            = (RecordEventFunc) RecordEvent_LinkBattledMulti,
-    [QL_EVENT_USED_UNION_ROOM]               = (RecordEventFunc) RecordEvent_UsedUnionRoom,
-    [QL_EVENT_USED_UNION_ROOM_CHAT]          = (RecordEventFunc) RecordEvent_UsedUnionRoomChat,
-    [QL_EVENT_LINK_TRADED_UNION]             = (RecordEventFunc) RecordEvent_LinkTradedUnionRoom,
-    [QL_EVENT_LINK_BATTLED_UNION]            = (RecordEventFunc) RecordEvent_LinkBattledUnionRoom,
-    [QL_EVENT_SWITCHED_MONS_BETWEEN_BOXES]   = (RecordEventFunc) RecordEvent_SwitchedMonsBetweenBoxes,
-    [QL_EVENT_SWITCHED_MONS_WITHIN_BOX]      = (RecordEventFunc) RecordEvent_SwitchedMonsWithinBox,
-    [QL_EVENT_SWITCHED_PARTY_MON_FOR_PC_MON] = (RecordEventFunc) RecordEvent_SwitchedPartyMonForPCMon,
-    [QL_EVENT_MOVED_MON_BETWEEN_BOXES]       = (RecordEventFunc) RecordEvent_MovedMonBetweenBoxes,
-    [QL_EVENT_MOVED_MON_WITHIN_BOX]          = (RecordEventFunc) RecordEvent_MovedMonWithinBox,
-    [QL_EVENT_WITHDREW_MON_PC]               = (RecordEventFunc) RecordEvent_WithdrewMonFromPC,
-    [QL_EVENT_DEPOSITED_MON_PC]              = (RecordEventFunc) RecordEvent_DepositedMonInPC,
-    [QL_EVENT_SWITCHED_MULTIPLE_MONS]        = (RecordEventFunc) RecordEvent_SwitchedMultipleMons,
-    [QL_EVENT_DEPOSITED_ITEM_PC]             = (RecordEventFunc) RecordEvent_DepositedItemInPC,
-    [QL_EVENT_WITHDREW_ITEM_PC]              = (RecordEventFunc) RecordEvent_WithdrewItemFromPC,
-    [QL_EVENT_DEFEATED_GYM_LEADER]           = (RecordEventFunc) RecordEvent_DefeatedGymLeader,
-    [QL_EVENT_DEFEATED_WILD_MON]             = (RecordEventFunc) RecordEvent_DefeatedWildMon,
-    [QL_EVENT_DEFEATED_E4_MEMBER]            = (RecordEventFunc) RecordEvent_DefeatedEliteFourMember,
-    [QL_EVENT_DEFEATED_CHAMPION]             = (RecordEventFunc) RecordEvent_DefeatedChampion,
-    [QL_EVENT_DEFEATED_TRAINER]              = (RecordEventFunc) RecordEvent_DefeatedNormalTrainer,
-    [QL_EVENT_DEPARTED]                      = (RecordEventFunc) RecordEvent_DepartedLocation,
-    [QL_EVENT_USED_FIELD_MOVE]               = (RecordEventFunc) RecordEvent_UsedFieldMove,
-    [QL_EVENT_BOUGHT_ITEM]                   = (RecordEventFunc) RecordEvent_BoughtItem,
-    [QL_EVENT_SOLD_ITEM]                     = (RecordEventFunc) RecordEvent_SoldItem,
-    [QL_EVENT_SCENE_END]                     = NULL,
-    [QL_EVENT_OBTAINED_STORY_ITEM]           = (RecordEventFunc) RecordEvent_ObtainedStoryItem,
-    [QL_EVENT_WAIT]                          = NULL,
-    [QL_EVENT_ARRIVED]                       = (RecordEventFunc) RecordEvent_ArrivedInLocation
-};
-
-static const u16 *(*const sLoadEventFuncs[])(const u16 *) = {
-    [QL_EVENT_INPUT]                         = NULL,
-    [QL_EVENT_GFX_CHANGE]                    = NULL,
-    [QL_EVENT_MOVEMENT]                      = NULL,
-    [QL_EVENT_SWITCHED_PARTY_ORDER]          = LoadEvent_SwitchedPartyOrder,
-    [QL_EVENT_USED_ITEM]                     = LoadEvent_UsedItem,
-    [QL_EVENT_GAVE_HELD_ITEM]                = LoadEvent_GaveHeldItemFromPartyMenu,
-    [QL_EVENT_GAVE_HELD_ITEM_BAG]            = LoadEvent_GaveHeldItemFromBagMenu,
-    [QL_EVENT_GAVE_HELD_ITEM_PC]             = LoadEvent_GaveHeldItemFromPC,
-    [QL_EVENT_TOOK_HELD_ITEM]                = LoadEvent_TookHeldItem,
-    [QL_EVENT_SWAPPED_HELD_ITEM]             = LoadEvent_SwappedHeldItem,
-    [QL_EVENT_SWAPPED_HELD_ITEM_PC]          = LoadEvent_SwappedHeldItemFromPC,
-    [QL_EVENT_USED_PKMN_CENTER]              = LoadEvent_UsedPkmnCenter,
-    [QL_EVENT_LINK_TRADED]                   = LoadEvent_LinkTraded,
-    [QL_EVENT_LINK_BATTLED_SINGLE]           = LoadEvent_LinkBattledSingle,
-    [QL_EVENT_LINK_BATTLED_DOUBLE]           = LoadEvent_LinkBattledDouble,
-    [QL_EVENT_LINK_BATTLED_MULTI]            = LoadEvent_LinkBattledMulti,
-    [QL_EVENT_USED_UNION_ROOM]               = LoadEvent_UsedUnionRoom,
-    [QL_EVENT_USED_UNION_ROOM_CHAT]          = LoadEvent_UsedUnionRoomChat,
-    [QL_EVENT_LINK_TRADED_UNION]             = LoadEvent_LinkTradedUnionRoom,
-    [QL_EVENT_LINK_BATTLED_UNION]            = LoadEvent_LinkBattledUnionRoom,
-    [QL_EVENT_SWITCHED_MONS_BETWEEN_BOXES]   = LoadEvent_SwitchedMonsBetweenBoxes,
-    [QL_EVENT_SWITCHED_MONS_WITHIN_BOX]      = LoadEvent_SwitchedMonsWithinBox,
-    [QL_EVENT_SWITCHED_PARTY_MON_FOR_PC_MON] = LoadEvent_SwitchedPartyMonForPCMon,
-    [QL_EVENT_MOVED_MON_BETWEEN_BOXES]       = LoadEvent_MovedMonBetweenBoxes,
-    [QL_EVENT_MOVED_MON_WITHIN_BOX]          = LoadEvent_MovedMonWithinBox,
-    [QL_EVENT_WITHDREW_MON_PC]               = LoadEvent_WithdrewMonFromPC,
-    [QL_EVENT_DEPOSITED_MON_PC]              = LoadEvent_DepositedMonInPC,
-    [QL_EVENT_SWITCHED_MULTIPLE_MONS]        = LoadEvent_SwitchedMultipleMons,
-    [QL_EVENT_DEPOSITED_ITEM_PC]             = LoadEvent_DepositedItemInPC,
-    [QL_EVENT_WITHDREW_ITEM_PC]              = LoadEvent_WithdrewItemFromPC,
-    [QL_EVENT_DEFEATED_GYM_LEADER]           = LoadEvent_DefeatedGymLeader,
-    [QL_EVENT_DEFEATED_WILD_MON]             = LoadEvent_DefeatedWildMon,
-    [QL_EVENT_DEFEATED_E4_MEMBER]            = LoadEvent_DefeatedEliteFourMember,
-    [QL_EVENT_DEFEATED_CHAMPION]             = LoadEvent_DefeatedChampion,
-    [QL_EVENT_DEFEATED_TRAINER]              = LoadEvent_DefeatedTrainer,
-    [QL_EVENT_DEPARTED]                      = LoadEvent_DepartedLocation,
-    [QL_EVENT_USED_FIELD_MOVE]               = LoadEvent_UsedFieldMove,
-    [QL_EVENT_BOUGHT_ITEM]                   = LoadEvent_BoughtItem,
-    [QL_EVENT_SOLD_ITEM]                     = LoadEvent_SoldItem,
-    [QL_EVENT_SCENE_END]                     = NULL,
-    [QL_EVENT_OBTAINED_STORY_ITEM]           = LoadEvent_ObtainedStoryItem,
-    [QL_EVENT_WAIT]                          = NULL,
-    [QL_EVENT_ARRIVED]                       = LoadEvent_ArrivedInLocation
-};
-
-static const u8 sQuestLogEventCmdSizes[] = {
-    [QL_EVENT_INPUT]                         = 8,
-    [QL_EVENT_GFX_CHANGE]                    = 8,
-    [QL_EVENT_MOVEMENT]                      = 8,
-    [QL_EVENT_SWITCHED_PARTY_ORDER]          = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_USED_ITEM]                     = CMD_HEADER_SIZE + 6,
-    [QL_EVENT_GAVE_HELD_ITEM]                = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_GAVE_HELD_ITEM_BAG]            = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_GAVE_HELD_ITEM_PC]             = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_TOOK_HELD_ITEM]                = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_SWAPPED_HELD_ITEM]             = CMD_HEADER_SIZE + 6,
-    [QL_EVENT_SWAPPED_HELD_ITEM_PC]          = CMD_HEADER_SIZE + 6,
-    [QL_EVENT_USED_PKMN_CENTER]              = CMD_HEADER_SIZE + 0,
-    [QL_EVENT_LINK_TRADED]                   = CMD_HEADER_SIZE + 12,
-    [QL_EVENT_LINK_BATTLED_SINGLE]           = CMD_HEADER_SIZE + 8,
-    [QL_EVENT_LINK_BATTLED_DOUBLE]           = CMD_HEADER_SIZE + 8,
-    [QL_EVENT_LINK_BATTLED_MULTI]            = CMD_HEADER_SIZE + 22,
-    [QL_EVENT_USED_UNION_ROOM]               = CMD_HEADER_SIZE + 0,
-    [QL_EVENT_USED_UNION_ROOM_CHAT]          = CMD_HEADER_SIZE + 0,
-    [QL_EVENT_LINK_TRADED_UNION]             = CMD_HEADER_SIZE + 12,
-    [QL_EVENT_LINK_BATTLED_UNION]            = CMD_HEADER_SIZE + 8,
-    [QL_EVENT_SWITCHED_MONS_BETWEEN_BOXES]   = CMD_HEADER_SIZE + 6,
-    [QL_EVENT_SWITCHED_MONS_WITHIN_BOX]      = CMD_HEADER_SIZE + 6,
-    [QL_EVENT_SWITCHED_PARTY_MON_FOR_PC_MON] = CMD_HEADER_SIZE + 6,
-    [QL_EVENT_MOVED_MON_BETWEEN_BOXES]       = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_MOVED_MON_WITHIN_BOX]          = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_WITHDREW_MON_PC]               = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_DEPOSITED_MON_PC]              = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_SWITCHED_MULTIPLE_MONS]        = CMD_HEADER_SIZE + 2,
-    [QL_EVENT_DEPOSITED_ITEM_PC]             = CMD_HEADER_SIZE + 2,
-    [QL_EVENT_WITHDREW_ITEM_PC]              = CMD_HEADER_SIZE + 2,
-    [QL_EVENT_DEFEATED_GYM_LEADER]           = CMD_HEADER_SIZE + 8,
-    [QL_EVENT_DEFEATED_WILD_MON]             = CMD_HEADER_SIZE + 8,
-    [QL_EVENT_DEFEATED_E4_MEMBER]            = CMD_HEADER_SIZE + 8,
-    [QL_EVENT_DEFEATED_CHAMPION]             = CMD_HEADER_SIZE + 6,
-    [QL_EVENT_DEFEATED_TRAINER]              = CMD_HEADER_SIZE + 8,
-    [QL_EVENT_DEPARTED]                      = CMD_HEADER_SIZE + 2,
-    [QL_EVENT_USED_FIELD_MOVE]               = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_BOUGHT_ITEM]                   = CMD_HEADER_SIZE + 10,
-    [QL_EVENT_SOLD_ITEM]                     = CMD_HEADER_SIZE + 10,
-    [QL_EVENT_SCENE_END]                     = 2,
-    [QL_EVENT_OBTAINED_STORY_ITEM]           = CMD_HEADER_SIZE + 4,
-    [QL_EVENT_WAIT]                          = 4,
-    [QL_EVENT_ARRIVED]                       = CMD_HEADER_SIZE + 2
-};
-
-static const u8 *const sDefeatedOpponentFlavorTexts[] = {
-    gText_QuestLog_Handily,
-    gText_QuestLog_Tenaciously,
-    gText_QuestLog_Somehow
-};
-
-static const u8 *const sDefeatedChampionFlavorTexts[] = {
-    gText_QuestLog_Coolly,
-    gText_QuestLog_Somehow,
-    gText_QuestLog_Barely
-};
-
-static const u8 *const sBattleOutcomeTexts[] = {
-    [B_OUTCOME_WON - 1]  = gText_QuestLog_Win,
-    [B_OUTCOME_LOST - 1] = gText_QuestLog_Loss,
-    [B_OUTCOME_DREW - 1] = gText_QuestLog_Draw,
-};
-
-static const u8 *const sLocationNameTexts[] =
-{
-    [QL_LOCATION_HOME]               = gText_QuestLog_Home,
-    [QL_LOCATION_OAKS_LAB]           = gText_QuestLog_OakResearchLab,
-    [QL_LOCATION_VIRIDIAN_GYM]       = gText_QuestLog_Gym,
-    [QL_LOCATION_LEAGUE_GATE_1]      = gText_QuestLog_PokemonLeagueGate,
-    [QL_LOCATION_LEAGUE_GATE_2]      = gText_QuestLog_PokemonLeagueGate,
-    [QL_LOCATION_VIRIDIAN_FOREST_1]  = gText_QuestLog_ViridianForest,
-    [QL_LOCATION_VIRIDIAN_FOREST_2]  = gText_QuestLog_ViridianForest,
-    [QL_LOCATION_PEWTER_MUSEUM]      = gText_QuestLog_PewterMuseumOfScience,
-    [QL_LOCATION_PEWTER_GYM]         = gText_QuestLog_Gym,
-    [QL_LOCATION_MT_MOON_1]          = gText_QuestLog_MtMoon,
-    [QL_LOCATION_MT_MOON_2]          = gText_QuestLog_MtMoon,
-    [QL_LOCATION_CERULEAN_GYM]       = gText_QuestLog_Gym,
-    [QL_LOCATION_BIKE_SHOP]          = gText_QuestLog_BikeShop,
-    [QL_LOCATION_BILLS_HOUSE]        = gText_QuestLog_BillsHouse,
-    [QL_LOCATION_DAY_CARE]           = gText_QuestLog_DayCare,
-    [QL_LOCATION_UNDERGROUND_PATH_1] = gText_QuestLog_UndergroundPath,
-    [QL_LOCATION_UNDERGROUND_PATH_2] = gText_QuestLog_UndergroundPath,
-    [QL_LOCATION_PKMN_FAN_CLUB]      = gText_QuestLog_PokemonFanClub,
-    [QL_LOCATION_VERMILION_GYM]      = gText_QuestLog_Gym,
-    [QL_LOCATION_SS_ANNE]            = gText_QuestLog_SSAnne,
-    [QL_LOCATION_DIGLETTS_CAVE_1]    = gText_QuestLog_DiglettsCave,
-    [QL_LOCATION_DIGLETTS_CAVE_2]    = gText_QuestLog_DiglettsCave,
-    [QL_LOCATION_ROCK_TUNNEL_1]      = gText_QuestLog_RockTunnel,
-    [QL_LOCATION_ROCK_TUNNEL_2]      = gText_QuestLog_RockTunnel,
-    [QL_LOCATION_POWER_PLANT]        = gText_QuestLog_PowerPlant,
-    [QL_LOCATION_PKMN_TOWER]         = gText_QuestLog_PokemonTower,
-    [QL_LOCATION_VOLUNTEER_HOUSE]    = gText_QuestLog_VolunteerHouse,
-    [QL_LOCATION_NAME_RATERS_HOUSE]  = gText_QuestLog_NameRatersHouse,
-    [QL_LOCATION_UNDERGROUND_PATH_3] = gText_QuestLog_UndergroundPath,
-    [QL_LOCATION_UNDERGROUND_PATH_4] = gText_QuestLog_UndergroundPath,
-    [QL_LOCATION_CELADON_DEPT_STORE] = gText_QuestLog_CeladonDeptStore,
-    [QL_LOCATION_CELADON_MANSION]    = gText_QuestLog_CeladonMansion,
-    [QL_LOCATION_GAME_CORNER]        = gText_QuestLog_RocketGameCorner,
-    [QL_LOCATION_CELADON_GYM]        = gText_QuestLog_Gym,
-    [QL_LOCATION_CELADON_RESTAURANT] = gText_QuestLog_Restaurant,
-    [QL_LOCATION_ROCKET_HIDEOUT]     = gText_QuestLog_RocketHideout,
-    [QL_LOCATION_SAFARI_ZONE]        = gText_QuestLog_SafariZone,
-    [QL_LOCATION_FUCHSIA_GYM]        = gText_QuestLog_Gym,
-    [QL_LOCATION_WARDENS_HOME]       = gText_QuestLog_WardensHome,
-    [QL_LOCATION_FIGHTING_DOJO]      = gText_QuestLog_FightingDojo,
-    [QL_LOCATION_SAFFRON_GYM]        = gText_QuestLog_Gym,
-    [QL_LOCATION_SILPH_CO]           = gText_QuestLog_SilphCo,
-    [QL_LOCATION_SEAFOAM_ISLANDS_1]  = gText_QuestLog_SeafoamIslands,
-    [QL_LOCATION_SEAFOAM_ISLANDS_2]  = gText_QuestLog_SeafoamIslands,
-    [QL_LOCATION_PKMN_MANSION]       = gText_QuestLog_PokemonMansion,
-    [QL_LOCATION_CINNABAR_GYM]       = gText_QuestLog_Gym,
-    [QL_LOCATION_CINNABAR_LAB]       = gText_QuestLog_PokemonResearchLab,
-    [QL_LOCATION_VICTORY_ROAD_1]     = gText_QuestLog_VictoryRoad,
-    [QL_LOCATION_VICTORY_ROAD_2]     = gText_QuestLog_VictoryRoad,
-    [QL_LOCATION_PKMN_LEAGUE]        = gText_QuestLog_PokemonLeague,
-    [QL_LOCATION_CERULEAN_CAVE]      = gText_QuestLog_CeruleanCave
-};
-
-static const u8 *const sDepartedLocationTexts[] =
-{
-    [QL_DEPARTED_TOWN_BUILDING]   = gText_QuestLog_DepartedPlaceInTownForNextDestination,
-    [QL_DEPARTED_MUSEUM]          = gText_QuestLog_LeftTownsLocationForNextDestination,
-    [QL_DEPARTED_GAME_CORNER]     = gText_QuestLog_PlayedGamesAtGameCorner,
-    [QL_DEPARTED_HOME]            = gText_QuestLog_RestedAtHome,
-    [QL_DEPARTED_OAKS_LAB]        = gText_QuestLog_LeftOaksLab,
-    [QL_DEPARTED_GYM]             = gText_QuestLog_GymWasFullOfToughTrainers,
-    [QL_DEPARTED_SAFARI_ZONE]     = gText_QuestLog_HadGreatTimeInSafariZone,
-    [QL_DEPARTED_CAVE]            = gText_QuestLog_ManagedToGetOutOfLocation,
-    [QL_DEPARTED_MISC_BUILDING_1] = gText_QuestLog_DepartedTheLocationForNextDestination,
-    [QL_DEPARTED_MISC_BUILDING_2] = gText_QuestLog_DepartedFromLocationToNextDestination
-};
-
-static const u8 sLocationToDepartedTextId[] =
-{
-    [QL_LOCATION_HOME]               = QL_DEPARTED_HOME,
-    [QL_LOCATION_OAKS_LAB]           = QL_DEPARTED_OAKS_LAB,
-    [QL_LOCATION_VIRIDIAN_GYM]       = QL_DEPARTED_GYM,
-    [QL_LOCATION_LEAGUE_GATE_1]      = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_LEAGUE_GATE_2]      = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_VIRIDIAN_FOREST_1]  = QL_DEPARTED_CAVE,
-    [QL_LOCATION_VIRIDIAN_FOREST_2]  = QL_DEPARTED_CAVE,
-    [QL_LOCATION_PEWTER_MUSEUM]      = QL_DEPARTED_MUSEUM,
-    [QL_LOCATION_PEWTER_GYM]         = QL_DEPARTED_GYM,
-    [QL_LOCATION_MT_MOON_1]          = QL_DEPARTED_CAVE,
-    [QL_LOCATION_MT_MOON_2]          = QL_DEPARTED_CAVE,
-    [QL_LOCATION_CERULEAN_GYM]       = QL_DEPARTED_GYM,
-    [QL_LOCATION_BIKE_SHOP]          = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_BILLS_HOUSE]        = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_DAY_CARE]           = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_UNDERGROUND_PATH_1] = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_UNDERGROUND_PATH_2] = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_PKMN_FAN_CLUB]      = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_VERMILION_GYM]      = QL_DEPARTED_GYM,
-    [QL_LOCATION_SS_ANNE]            = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_DIGLETTS_CAVE_1]    = QL_DEPARTED_CAVE,
-    [QL_LOCATION_DIGLETTS_CAVE_2]    = QL_DEPARTED_CAVE,
-    [QL_LOCATION_ROCK_TUNNEL_1]      = QL_DEPARTED_CAVE,
-    [QL_LOCATION_ROCK_TUNNEL_2]      = QL_DEPARTED_CAVE,
-    [QL_LOCATION_POWER_PLANT]        = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_PKMN_TOWER]         = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_VOLUNTEER_HOUSE]    = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_NAME_RATERS_HOUSE]  = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_UNDERGROUND_PATH_3] = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_UNDERGROUND_PATH_4] = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_CELADON_DEPT_STORE] = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_CELADON_MANSION]    = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_GAME_CORNER]        = QL_DEPARTED_GAME_CORNER,
-    [QL_LOCATION_CELADON_GYM]        = QL_DEPARTED_GYM,
-    [QL_LOCATION_CELADON_RESTAURANT] = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_ROCKET_HIDEOUT]     = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_SAFARI_ZONE]        = QL_DEPARTED_SAFARI_ZONE,
-    [QL_LOCATION_FUCHSIA_GYM]        = QL_DEPARTED_GYM,
-    [QL_LOCATION_WARDENS_HOME]       = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_FIGHTING_DOJO]      = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_SAFFRON_GYM]        = QL_DEPARTED_GYM,
-    [QL_LOCATION_SILPH_CO]           = QL_DEPARTED_MISC_BUILDING_2,
-    [QL_LOCATION_SEAFOAM_ISLANDS_1]  = QL_DEPARTED_CAVE,
-    [QL_LOCATION_SEAFOAM_ISLANDS_2]  = QL_DEPARTED_CAVE,
-    [QL_LOCATION_PKMN_MANSION]       = QL_DEPARTED_MISC_BUILDING_2,
-    [QL_LOCATION_CINNABAR_GYM]       = QL_DEPARTED_GYM,
-    [QL_LOCATION_CINNABAR_LAB]       = QL_DEPARTED_TOWN_BUILDING,
-    [QL_LOCATION_VICTORY_ROAD_1]     = QL_DEPARTED_CAVE,
-    [QL_LOCATION_VICTORY_ROAD_2]     = QL_DEPARTED_CAVE,
-    [QL_LOCATION_PKMN_LEAGUE]        = QL_DEPARTED_MISC_BUILDING_1,
-    [QL_LOCATION_CERULEAN_CAVE]      = QL_DEPARTED_CAVE
-};
-
-static const u8 sGymCityMapSecs[NUM_BADGES] = {
-    MAPSEC_PEWTER_CITY,
-    MAPSEC_CERULEAN_CITY,
-    MAPSEC_VERMILION_CITY,
-    MAPSEC_CELADON_CITY,
-    MAPSEC_FUCHSIA_CITY,
-    MAPSEC_SAFFRON_CITY,
-    MAPSEC_CINNABAR_ISLAND,
-    MAPSEC_VIRIDIAN_CITY,
-};
-
-static const u16 sWorldMapFlags[] =
-{
-    FLAG_WORLD_MAP_VIRIDIAN_CITY,
-    FLAG_WORLD_MAP_PEWTER_CITY,
-    FLAG_WORLD_MAP_CERULEAN_CITY,
-    FLAG_WORLD_MAP_LAVENDER_TOWN,
-    FLAG_WORLD_MAP_VERMILION_CITY,
-    FLAG_WORLD_MAP_CELADON_CITY,
-    FLAG_WORLD_MAP_FUCHSIA_CITY,
-    FLAG_WORLD_MAP_CINNABAR_ISLAND,
-    FLAG_WORLD_MAP_INDIGO_PLATEAU_EXTERIOR,
-    FLAG_WORLD_MAP_SAFFRON_CITY,
-    FLAG_WORLD_MAP_ONE_ISLAND,
-    FLAG_WORLD_MAP_TWO_ISLAND,
-    FLAG_WORLD_MAP_THREE_ISLAND,
-    FLAG_WORLD_MAP_FOUR_ISLAND,
-    FLAG_WORLD_MAP_FIVE_ISLAND,
-    FLAG_WORLD_MAP_SEVEN_ISLAND,
-    FLAG_WORLD_MAP_SIX_ISLAND
-};
-
-void SetQuestLogEvent(u16 eventId, const u16 * data)
-{
-    u16 *r1;
-
-    if (eventId == QL_EVENT_DEPARTED && sStepRecordingMode == STEP_RECORDING_MODE_DISABLED_UNTIL_DEPART)
-    {
-        QL_EnableRecordingSteps();
-        return;
-    }
-    QL_EnableRecordingSteps();
-
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-        return;
-
-    if (!IS_VALID_QL_EVENT(eventId))
-        return;
-
-    // Certain locations like Trainer Tower do not allow Quest Log events to be recorded
-    if (InQuestLogDisabledLocation() == TRUE)
-        return;
-
-    if (TryDeferLinkEvent(eventId, data) == TRUE)
-        return;
-
-    // Link events handled above. If we're in an active link, don't record any other events.
-    if (MenuHelpers_IsLinkActive() == TRUE || InUnionRoom() == TRUE)
-        return;
-
-    if (TryDeferTrainerBattleEvent(eventId, data) == TRUE)
-        return;
-
-    // Wild battles with static encounter species (Snorlax, Mewtwo, etc.) are not recorded.
-    if (IsEventWithSpecialEncounterSpecies(eventId, data) == TRUE)
-        return;
-
-    // If player departed Game Corner without using the slots, don't record it
-    if (ShouldRegisterEvent_DepartedGameCorner(eventId, data) == FALSE)
-        return;
-
-    if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_STOPPED)
-    {
-        if (ShouldRegisterEvent_HandlePartyActions(eventId, data) == TRUE)
-            return;
-
-        if (eventId != QL_EVENT_DEFEATED_WILD_MON || gQuestLogDefeatedWildMonRecord == NULL)
-        {
-            if (ShouldRegisterEvent_HandleDeparted(eventId, data) == FALSE)
-                return;
-            QL_StartRecordingAction(eventId);
-        }
-    }
-    else if (eventId == QL_EVENT_OBTAINED_STORY_ITEM)
-        return;
-
-    UpdateRepeatEventCounter(eventId);
-    if (eventId == QL_EVENT_DEFEATED_WILD_MON)
-    {
-        if (gQuestLogDefeatedWildMonRecord == NULL)
-        {
-            gQuestLogDefeatedWildMonRecord = gQuestLogRecordingPointer;
-            r1 = sRecordEventFuncs[eventId](gQuestLogDefeatedWildMonRecord, data);
-        }
-        else
-        {
-            sRecordEventFuncs[eventId](gQuestLogDefeatedWildMonRecord, data);
-            return;
-        }
-    }
-    else
-    {
-        gQuestLogDefeatedWildMonRecord = NULL;
-        r1 = sRecordEventFuncs[eventId](gQuestLogRecordingPointer, data);
-    }
-
-    if (r1 == NULL)
-    {
-        QL_FinishRecordingScene();
-        r1 = ShouldRegisterEvent(eventId, data);
-        if (!r1)
-            return;
-    }
-
-    gQuestLogRecordingPointer = r1;
-    if (sStepRecordingMode == STEP_RECORDING_MODE_ENABLED)
-        return;
-    QL_FinishRecordingScene();
-}
-
-static bool8 InQuestLogDisabledLocation(void)
-{
-    // In Trainer Tower
-    if (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(TRAINER_TOWER_1F)
-        && (gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_1F)
-         || gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_2F)
-         || gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_3F)
-         || gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_4F)
-         || gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_5F)
-         || gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_6F)
-         || gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_7F)
-         || gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_8F)
-         || gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_ROOF)
-         || gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_LOBBY)
-         || gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_ELEVATOR)))
-        return TRUE;
-
-    // In pokemon trainer fan club
-    if (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(SAFFRON_CITY_POKEMON_TRAINER_FAN_CLUB)
-      && gSaveBlock1Ptr->location.mapNum == MAP_NUM(SAFFRON_CITY_POKEMON_TRAINER_FAN_CLUB))
-        return TRUE;
-
-    // In E-Reader house
-    if (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(SEVEN_ISLAND_HOUSE_ROOM1) &&
-        (gSaveBlock1Ptr->location.mapNum == MAP_NUM(SEVEN_ISLAND_HOUSE_ROOM1)
-      || gSaveBlock1Ptr->location.mapNum == MAP_NUM(SEVEN_ISLAND_HOUSE_ROOM2)))
-        return TRUE;
-
-    // In elevator
-    if ((gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(ROCKET_HIDEOUT_ELEVATOR) && gSaveBlock1Ptr->location.mapNum == MAP_NUM(ROCKET_HIDEOUT_ELEVATOR))
-     || (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(SILPH_CO_ELEVATOR) && gSaveBlock1Ptr->location.mapNum == MAP_NUM(SILPH_CO_ELEVATOR))
-     || (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(TRAINER_TOWER_ELEVATOR) && gSaveBlock1Ptr->location.mapNum == MAP_NUM(TRAINER_TOWER_ELEVATOR))
-     || (gSaveBlock1Ptr->location.mapGroup == MAP_GROUP(CELADON_CITY_DEPARTMENT_STORE_ELEVATOR) && gSaveBlock1Ptr->location.mapNum == MAP_NUM(CELADON_CITY_DEPARTMENT_STORE_ELEVATOR)))
-        return TRUE;
-
-    return FALSE;
-}
-
-bool8 QuestLog_ShouldEndSceneOnMapChange(void)
-{
-    if (InQuestLogDisabledLocation() != TRUE)
-        return FALSE;
-
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-        return TRUE;
-
-    if (gQuestLogState == QL_STATE_RECORDING)
-        QuestLog_CutRecording();
-
-    return FALSE;
-}
-
-static bool8 ShouldRegisterEvent_HandlePartyActions(u16 eventId, const u16 * data)
-{
-    if (eventId == QL_EVENT_USED_FIELD_MOVE || eventId == QL_EVENT_USED_PKMN_CENTER)
-        return TRUE;
-
-    if (!FlagGet(FLAG_SYS_GAME_CLEAR))
-    {
-        if (eventId == QL_EVENT_SWITCHED_PARTY_ORDER
-         || eventId == QL_EVENT_DEFEATED_WILD_MON
-         || ShouldRegisterEvent_HandleBeatStoryTrainer(eventId, data) == TRUE)
-            return TRUE;
-    }
-
-    if (!FlagGet(FLAG_SYS_CAN_LINK_WITH_RS))
-    {
-        if (eventId == QL_EVENT_USED_ITEM
-         || eventId == QL_EVENT_GAVE_HELD_ITEM
-         || eventId == QL_EVENT_GAVE_HELD_ITEM_BAG
-         || eventId == QL_EVENT_GAVE_HELD_ITEM_PC
-         || eventId == QL_EVENT_TOOK_HELD_ITEM
-         || eventId == QL_EVENT_SWAPPED_HELD_ITEM
-         || eventId == QL_EVENT_SWAPPED_HELD_ITEM_PC
-         || eventId == QL_EVENT_SWITCHED_PARTY_MON_FOR_PC_MON
-         || eventId == QL_EVENT_WITHDREW_MON_PC
-         || eventId == QL_EVENT_DEPOSITED_MON_PC)
-            return TRUE;
-    }
-
-    return FALSE;
-}
-
-static bool8 ShouldRegisterEvent_HandleBeatStoryTrainer(u16 eventId, const u16 * genericData)
-{
-    if (eventId == QL_EVENT_DEFEATED_TRAINER)
-    {
-        const struct QuestLogEvent_TrainerBattle * data = (struct QuestLogEvent_TrainerBattle *)genericData;
-        u32 trainerClass =  GetTrainerClassFromId(data->trainerId);
-        if (trainerClass == TRAINER_CLASS_RIVAL_EARLY
-         || trainerClass == TRAINER_CLASS_RIVAL_LATE
-         || trainerClass == TRAINER_CLASS_CHAMPION
-         || trainerClass == TRAINER_CLASS_BOSS)
-            return FALSE;
-        return TRUE;
-    }
-    return FALSE;
-}
-
-void QL_EnableRecordingSteps(void)
-{
-    sStepRecordingMode = STEP_RECORDING_MODE_ENABLED;
-}
-
-static u16 *ShouldRegisterEvent(u16 eventId, const u16 * data)
-{
-    if (ShouldRegisterEvent_HandlePartyActions(eventId, data) == TRUE)
-        return NULL;
-
-    if (ShouldRegisterEvent_HandleDeparted(eventId, data) == FALSE)
-        return NULL;
-
-    QL_StartRecordingAction(eventId);
-    UpdateRepeatEventCounter(eventId);
-
-    if (eventId == QL_EVENT_DEFEATED_WILD_MON)
-        gQuestLogDefeatedWildMonRecord = gQuestLogRecordingPointer;
-    else
-        gQuestLogDefeatedWildMonRecord = NULL;
-
-    return sRecordEventFuncs[eventId](gQuestLogRecordingPointer, data);
-}
-
-static bool8 TryDeferLinkEvent(u16 eventId, const u16 * data)
-{
-    if (!IS_LINK_QL_EVENT(eventId))
-        return FALSE;
-
-    ResetDeferredLinkEvent();
-    sDeferredEvent.id = eventId;
-
-    // These two events have no data, so no need to copy
-    if (eventId != QL_EVENT_USED_UNION_ROOM && eventId != QL_EVENT_USED_UNION_ROOM_CHAT)
-    {
-        if (eventId == QL_EVENT_LINK_TRADED || eventId == QL_EVENT_LINK_TRADED_UNION)
-            memcpy(sDeferredEvent.data, data, sizeof(struct QuestLogEvent_Traded));
-        else
-            memcpy(sDeferredEvent.data, data, sizeof(struct QuestLogEvent_LinkBattle));
-    }
-    return TRUE;
-}
-
-void ResetDeferredLinkEvent(void)
-{
-    sDeferredEvent = (struct DeferredLinkEvent){};
-}
-
-void QuestLog_StartRecordingInputsAfterDeferredEvent(void)
-{
-    if (sDeferredEvent.id != 0)
-    {
-        u16 *resp;
-        sLastDepartedLocation = 0;
-        QL_StartRecordingAction(sDeferredEvent.id);
-        resp = sRecordEventFuncs[sDeferredEvent.id](gQuestLogRecordingPointer, sDeferredEvent.data);
-        gQuestLogRecordingPointer = resp;
-        ResetDeferredLinkEvent();
-    }
-}
-
-static bool8 TryDeferTrainerBattleEvent(u16 eventId, const u16 * data)
-{
-    if (eventId != QL_EVENT_DEFEATED_TRAINER
-     && eventId != QL_EVENT_DEFEATED_GYM_LEADER
-     && eventId != QL_EVENT_DEFEATED_E4_MEMBER
-     && eventId != QL_EVENT_DEFEATED_CHAMPION)
-        return FALSE;
-
-    ResetDeferredLinkEvent();
-    if (gQuestLogPlaybackState != QL_PLAYBACK_STATE_STOPPED || FlagGet(FLAG_SYS_GAME_CLEAR) || ShouldRegisterEvent_HandleBeatStoryTrainer(eventId, data) != TRUE)
-    {
-        sDeferredEvent.id = eventId;
-        memcpy(sDeferredEvent.data, data, sizeof(struct QuestLogEvent_TrainerBattle));
-    }
-    return TRUE;
-}
-
-void QuestLogEvents_HandleEndTrainerBattle(void)
-{
-    if (sDeferredEvent.id != 0)
-    {
-        u16 *resp;
-        if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_STOPPED)
-        {
-            sLastDepartedLocation = 0;
-            QL_StartRecordingAction(sDeferredEvent.id);
-        }
-        UpdateRepeatEventCounter(sDeferredEvent.id);
-        resp = sRecordEventFuncs[sDeferredEvent.id](gQuestLogRecordingPointer, sDeferredEvent.data);
-        gQuestLogRecordingPointer = resp;
-        QL_RecordWait(1);
-        ResetDeferredLinkEvent();
-        QL_FinishRecordingScene();
-    }
-}
-
-void QL_RecordWait(u16 duration)
-{
-    gQuestLogRecordingPointer = QL_RecordAction_Wait(gQuestLogRecordingPointer, duration);
-    gQuestLogCurActionIdx++;
-}
-
-static bool8 IsEventWithSpecialEncounterSpecies(u16 eventId, const u16 * genericData)
-{
-    const struct QuestLogEvent_WildBattle * data;
-
-    if (eventId != QL_EVENT_DEFEATED_WILD_MON)
-        return FALSE;
-
-    data = (struct QuestLogEvent_WildBattle *)genericData;
-
-    if (IsSpeciesFromSpecialEncounter(data->defeatedSpecies) == TRUE)
-        return TRUE;
-
-    if (IsSpeciesFromSpecialEncounter(data->caughtSpecies) == TRUE)
-        return TRUE;
-
-    return FALSE;
-}
-
-u16 *QL_SkipCommand(u16 *curPtr, u16 **prevPtr_p)
-{
-    u16 eventId = curPtr[0] & QL_CMD_EVENT_MASK;
-    u16 count = curPtr[0] >> QL_CMD_COUNT_SHIFT;
-
-    if (eventId == QL_EVENT_DEFEATED_CHAMPION)
-        count = 0;
-
-    if (!IS_VALID_QL_EVENT(eventId))
-        return NULL;
-
-    *prevPtr_p = curPtr;
-    return sQuestLogEventCmdSizes[eventId] + (sQuestLogEventCmdSizes[eventId] - CMD_HEADER_SIZE) * count + (void *)curPtr;
-}
-
-void QL_UpdateLastDepartedLocation(const u16 *a0)
-{
-    const u8 *r2 = (const u8 *)(a0 + 2);
-    if ((a0[0] & QL_CMD_EVENT_MASK) != QL_EVENT_DEPARTED)
-        sLastDepartedLocation = 0;
-    else
-        sLastDepartedLocation = r2[1] + 1;
-}
-
-bool8 QL_LoadEvent(const u16 *eventData)
-{
-    const u16 *r0 = eventData;
-
-    if (eventData == NULL)
-        return FALSE;
-    if (r0[1] > gQuestLogCurActionIdx)
-        return FALSE;
-
-    sLoadEventFuncs[(r0[0] & QL_CMD_EVENT_MASK)](eventData);
-    gQuestLogRepeatEventTracker.id = r0[0];
-    gQuestLogRepeatEventTracker.numRepeats = (r0[0] & QL_CMD_COUNT_MASK) >> QL_CMD_COUNT_SHIFT;
-    if (gQuestLogRepeatEventTracker.numRepeats != 0)
-        gQuestLogRepeatEventTracker.counter = 1;
-    return TRUE;
-}
-
-bool8 QL_TryRepeatEvent(const u16 *eventData)
-{
-    // This is the first for a new event, do nothing. Counter may be changed later by QL_LoadEvent.
-    if (gQuestLogRepeatEventTracker.counter == 0)
-        return FALSE;
-
-    // Repeat event
-    sLoadEventFuncs[gQuestLogRepeatEventTracker.id](eventData);
-    if (++gQuestLogRepeatEventTracker.counter > gQuestLogRepeatEventTracker.numRepeats)
-        QL_ResetRepeatEventTracker();
-    return TRUE;
-}
-
-void QL_ResetRepeatEventTracker(void)
-{
-    gQuestLogRepeatEventTracker = (struct QuestLogRepeatEventTracker){};
-}
-
-static void UpdateRepeatEventCounter(u16 eventId)
-{
-    if (gQuestLogRepeatEventTracker.id != (u8)eventId || gQuestLogRepeatEventTracker.counter != gQuestLogCurActionIdx)
-    {
-        gQuestLogRepeatEventTracker.id = eventId;
-        gQuestLogRepeatEventTracker.numRepeats = 0;
-        gQuestLogRepeatEventTracker.counter = gQuestLogCurActionIdx;
-    }
-    // Allow 1 over the max. It will be recorded temporarily, ultimately replacing the oldest record.
-    else if (gQuestLogRepeatEventTracker.numRepeats < MAX_CMD_REPEAT + 1)
-    {
-        gQuestLogRepeatEventTracker.numRepeats++;
-    }
-}
-
-void QL_ResetEventStates(void)
-{
-    sNewlyEnteredMap = FALSE;
-    sLastDepartedLocation = 0;
-    sPlayedTheSlots = FALSE;
-}
-
-u16 *QL_RecordAction_SceneEnd(u16 *a0)
-{
-    if (!QL_IsRoomToSaveAction(a0, sQuestLogEventCmdSizes[QL_EVENT_SCENE_END]))
-        return NULL;
-    a0[0] = QL_EVENT_SCENE_END;
-    return a0 + 1;
-}
-
-u16 *QL_LoadAction_SceneEnd(u16 *a0, struct QuestLogAction * a1)
-{
-    if (!QL_IsRoomToSaveAction(a0, sQuestLogEventCmdSizes[QL_EVENT_SCENE_END]))
-        return NULL;
-    a1->type = QL_ACTION_SCENE_END;
-    a1->duration = 0;
-    a1->data.raw[0] = 0;
-    a1->data.raw[1] = 0;
-    a1->data.raw[2] = 0;
-    a1->data.raw[3] = 0;
-    return a0 + 1;
-}
-
-static u16 *QL_RecordAction_Wait(u16 *a0, u16 duration)
-{
-    if (!QL_IsRoomToSaveAction(a0, sQuestLogEventCmdSizes[QL_EVENT_WAIT]))
-        return NULL;
-    a0[0] = QL_EVENT_WAIT;
-    a0[1] = duration;
-    return a0 + 2;
-}
-
-u16 *QL_LoadAction_Wait(u16 *a0, struct QuestLogAction * a1)
-{
-    if (!QL_IsRoomToSaveAction(a0, sQuestLogEventCmdSizes[QL_EVENT_WAIT]))
-        return NULL;
-    a1->type = QL_ACTION_WAIT;
-    a1->duration = a0[1];
-    a1->data.raw[0] = 0;
-    a1->data.raw[1] = 0;
-    a1->data.raw[2] = 0;
-    a1->data.raw[3] = 0;
-    return a0 + 2;
-}
-
-u16 *QL_RecordAction_Input(u16 *script, struct QuestLogAction * a1)
-{
-    u8 *r6 = (u8 *)script + 4;
-
-    if (!QL_IsRoomToSaveAction(script, sQuestLogEventCmdSizes[QL_EVENT_INPUT]))
-        return NULL;
-    script[0] = QL_EVENT_INPUT;
-    script[1] = a1->duration;
-    r6[0] = a1->data.raw[0];
-    r6[1] = a1->data.raw[1];
-    r6[2] = a1->data.raw[2];
-    r6[3] = a1->data.raw[3];
-    return (u16 *)(r6 + 4);
-}
-
-u16 *QL_LoadAction_Input(u16 *a0, struct QuestLogAction * a1)
-{
-    u8 *r6 = (u8 *)a0 + 4;
-
-    if (!QL_IsRoomToSaveAction(a0, sQuestLogEventCmdSizes[QL_EVENT_INPUT]))
-        return NULL;
-    a1->type = QL_ACTION_INPUT;
-    a1->duration = a0[1];
-    a1->data.raw[0] = r6[0];
-    a1->data.raw[1] = r6[1];
-    a1->data.raw[2] = r6[2];
-    a1->data.raw[3] = r6[3];
-    return (u16 *)(r6 + 4);
-}
-
-u16 *QL_RecordAction_MovementOrGfxChange(u16 *script, struct QuestLogAction * a1)
-{
-    u16 *r4 = script;
-    u8 *r6 = (u8 *)script + 4;
-
-    if (!QL_IsRoomToSaveAction(r4, sQuestLogEventCmdSizes[QL_EVENT_MOVEMENT]))
-        return NULL;
-    if (a1->type == QL_ACTION_MOVEMENT)
-        r4[0] = QL_EVENT_MOVEMENT;
-    else
-        r4[0] = QL_EVENT_GFX_CHANGE;
-    r4[1] = a1->duration;
-    r6[0] = a1->data.raw[0];
-    r6[1] = a1->data.raw[1];
-    r6[2] = a1->data.raw[2];
-    r6[3] = a1->data.raw[3];
-    return (u16 *)(r6 + 4);
-}
-
-u16 *QL_LoadAction_MovementOrGfxChange(u16 *a0, struct QuestLogAction * a1)
-{
-    u16 *r5 = a0;
-    u8 *r6 = (u8 *)a0 + 4;
-
-    if (!QL_IsRoomToSaveAction(r5, sQuestLogEventCmdSizes[QL_EVENT_MOVEMENT]))
-        return NULL;
-    if (r5[0] == QL_EVENT_MOVEMENT)
-        a1->type = QL_ACTION_MOVEMENT;
-    else
-        a1->type = QL_ACTION_GFX_CHANGE;
-    a1->duration = r5[1];
-    a1->data.raw[0] = r6[0];
-    a1->data.raw[1] = r6[1];
-    a1->data.raw[2] = r6[2];
-    a1->data.raw[3] = r6[3];
-    return (u16 *)(r6 + 4);
-}
-
-static u16 *RecordEventHeader(u16 eventId, u16 *dest)
-{
-    u8 cmdSize;
-    u16 *record;
-    u8 i;
-    u8 count;
-
-    if (gQuestLogRepeatEventTracker.numRepeats == 0)
-        cmdSize = sQuestLogEventCmdSizes[eventId];
-    else
-        cmdSize = sQuestLogEventCmdSizes[eventId] - CMD_HEADER_SIZE; // First will already have the header
-
-    if (!QL_IsRoomToSaveEvent(dest, cmdSize))
-        return NULL;
-
-    record = (void *)dest;
-
-    if (gQuestLogRepeatEventTracker.numRepeats != 0)
-        record = (void *)record - (gQuestLogRepeatEventTracker.numRepeats * cmdSize + CMD_HEADER_SIZE);
-
-    if (gQuestLogRepeatEventTracker.numRepeats == MAX_CMD_REPEAT + 1)
-    {
-        // Shift back one, replacing oldest
-        for (i = 0; i < MAX_CMD_REPEAT; i++)
-        {
-            memcpy(
-                (void *)record + ((i + 0) * cmdSize + CMD_HEADER_SIZE),
-                (void *)record + ((i + 1) * cmdSize + CMD_HEADER_SIZE),
-                cmdSize
-            );
-        }
-        count = MAX_CMD_REPEAT;
-    }
-    else
-        count = gQuestLogRepeatEventTracker.numRepeats;
-
-    // Set header data (CMD_HEADER_SIZE)
-    record[0] = eventId + (count << QL_CMD_COUNT_SHIFT);
-    record[1] = gQuestLogCurActionIdx;
-
-    // Move past header and event data
-    record = (void *)record + (count * cmdSize + CMD_HEADER_SIZE);
-    return record;
-}
-
-static const u16 *LoadEvent(u16 eventId, const u16 *eventData)
-{
-    eventData = (const void *)eventData + (gQuestLogRepeatEventTracker.counter * (sQuestLogEventCmdSizes[eventId] - CMD_HEADER_SIZE) + CMD_HEADER_SIZE);
-    return eventData;
-}
-
-static void QuestLog_GetSpeciesName(u16 species, u8 *dest, u8 stringVarId)
-{
-    if (dest != NULL)
-    {
-        if (species != SPECIES_EGG)
-        {
-            StringCopy(dest, GetSpeciesName(species));
-        }
-        else
-        {
-            StringCopy(dest, gText_EggNickname);
-        }
-    }
-    else
-    {
-        if (species != SPECIES_EGG)
-            DynamicPlaceholderTextUtil_SetPlaceholderPtr(stringVarId, gSpeciesInfo[species].speciesName);
-        else
-            DynamicPlaceholderTextUtil_SetPlaceholderPtr(stringVarId, gText_EggNickname);
-    }
-}
-
-static u16 *RecordEvent_SwitchedPartyOrder(u16 *dest, const struct QuestLogEvent_SwitchedPartyOrder * data)
-{
-    u16 *r2 = RecordEventHeader(QL_EVENT_SWITCHED_PARTY_ORDER, dest);
-    if (r2 == NULL)
-        return NULL;
-
-    r2[0] = data->species1;
-    r2[1] = data->species2;
-    return r2 + 2;
-}
-
-static const u16 *LoadEvent_SwitchedPartyOrder(const u16 *eventData)
-{
-    const u16 *r4 = LoadEvent(QL_EVENT_SWITCHED_PARTY_ORDER, eventData);
-    QuestLog_GetSpeciesName(r4[0], gStringVar1, 0);
-    QuestLog_GetSpeciesName(r4[1], gStringVar2, 0);
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_SwitchMon1WithMon2);
-    return r4 + 2;
-}
-
-#define rItemId    record[0]
-#define rSpecies   record[1]
-#define rItemParam record[2]
-
-static u16 *RecordEvent_UsedItem(u16 *dest, const struct QuestLogEvent_Item * data)
-{
-    u16 *record = RecordEventHeader(QL_EVENT_USED_ITEM, dest);
-    if (record == NULL)
-        return NULL;
-
-    rItemId = data->itemId;
-    rSpecies = data->species;
-    rItemParam = data->itemParam;
-
-    if (data->itemId == ITEM_ESCAPE_ROPE)
-        sStepRecordingMode = STEP_RECORDING_MODE_DISABLED_UNTIL_DEPART;
-
-    return record + 3;
-}
-
-static const u16 *LoadEvent_UsedItem(const u16 *eventData)
-{
-    const u16 *record = LoadEvent(QL_EVENT_USED_ITEM, eventData);
-
-    switch (ItemId_GetPocket(rItemId))
-    {
-    case POCKET_ITEMS:
-    case POCKET_POKE_BALLS:
-    case POCKET_BERRIES:
-        StringCopy(gStringVar1, ItemId_GetName(rItemId));
-        if (rItemId == ITEM_ESCAPE_ROPE)
-        {
-            GetMapNameGeneric(gStringVar2, (u8)rItemParam);
-            StringExpandPlaceholders(gStringVar4, gText_QuestLog_UsedEscapeRope);
-        }
-        else if (rSpecies != 0xFFFF)
-        {
-            QuestLog_GetSpeciesName(rSpecies, gStringVar2, 0);
-            StringExpandPlaceholders(gStringVar4, gText_QuestLog_UsedItemOnMonAtThisLocation);
-        }
-        else
-        {
-            StringExpandPlaceholders(gStringVar4, gText_QuestLog_UsedTheItem);
-        }
-        break;
-    case POCKET_KEY_ITEMS:
-        StringCopy(gStringVar1, ItemId_GetName(rItemId));
-        StringExpandPlaceholders(gStringVar4, gText_QuestLog_UsedTheKeyItem);
-        break;
-    case POCKET_TM_HM:
-        QuestLog_GetSpeciesName(rSpecies, gStringVar1, 0);
-        StringCopy(gStringVar2, gMovesInfo[ItemIdToBattleMoveId(rItemId)].name);
-        if (rItemParam != 0xFFFF)
-        {
-            StringCopy(gStringVar3, gMovesInfo[rItemParam].name);
-            if (rItemId >= ITEM_HM01)
-                StringExpandPlaceholders(gStringVar4, gText_QuestLog_MonReplacedMoveWithHM);
-            else
-                StringExpandPlaceholders(gStringVar4, gText_QuestLog_MonReplacedMoveWithTM);
-        }
-        else
-        {
-            if (rItemId >= ITEM_HM01)
-                StringExpandPlaceholders(gStringVar4, gText_QuestLog_MonLearnedMoveFromHM);
-            else
-                StringExpandPlaceholders(gStringVar4, gText_QuestLog_MonLearnedMoveFromTM);
-        }
-        break;
-    }
-    return record + 3;
-}
-
-static u16 *RecordEvent_GiveTakeHeldItem(u16 eventId, u16 *dest, const struct QuestLogEvent_Item * data)
-{
-    u16 *record = RecordEventHeader(eventId, dest);
-    if (record == NULL)
-        return NULL;
-
-    rItemId = data->itemId;
-    rSpecies = data->species;
-    return record + 2;
-}
-
-static u16 *RecordEvent_GaveHeldItemFromPartyMenu(u16 *dest, const struct QuestLogEvent_Item * data)
-{
-    return RecordEvent_GiveTakeHeldItem(QL_EVENT_GAVE_HELD_ITEM, dest, data);
-}
-
-static const u16 *LoadEvent_GaveHeldItemFromPartyMenu(const u16 * eventData)
-{
-    const u16 *record = LoadEvent(QL_EVENT_GAVE_HELD_ITEM, eventData);
-    QuestLog_GetSpeciesName(rSpecies, gStringVar1, 0);
-    StringCopy(gStringVar2, ItemId_GetName(rItemId));
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_GaveMonHeldItem);
-    return record + 2;
-}
-
-static u16 *RecordEvent_GaveHeldItemFromBagMenu(u16 *dest, const struct QuestLogEvent_Item * data)
-{
-    return RecordEvent_GiveTakeHeldItem(QL_EVENT_GAVE_HELD_ITEM_BAG, dest, data);
-}
-
-static const u16 *LoadEvent_GaveHeldItemFromBagMenu(const u16 *eventData)
-{
-    const u16 *record = LoadEvent(QL_EVENT_GAVE_HELD_ITEM_BAG, eventData);
-    QuestLog_GetSpeciesName(rSpecies, gStringVar1, 0);
-    StringCopy(gStringVar2, ItemId_GetName(rItemId));
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_GaveMonHeldItem2);
-    return record + 2;
-}
-
-static u16 *RecordEvent_GaveHeldItemFromPC(u16 *dest, const struct QuestLogEvent_Item * data)
-{
-    return RecordEvent_GiveTakeHeldItem(QL_EVENT_GAVE_HELD_ITEM_PC, dest, data);
-}
-
-static const u16 *LoadEvent_GaveHeldItemFromPC(const u16 *eventData)
-{
-    const u16 *record = LoadEvent(QL_EVENT_GAVE_HELD_ITEM_PC, eventData);
-
-    QuestLog_GetSpeciesName(rSpecies, gStringVar2, 0);
-    StringCopy(gStringVar1, ItemId_GetName(rItemId));
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_GaveMonHeldItemFromPC);
-    return record + 2;
-}
-
-static u16 *RecordEvent_TookHeldItem(u16 *dest, const struct QuestLogEvent_Item * data)
-{
-    return RecordEvent_GiveTakeHeldItem(QL_EVENT_TOOK_HELD_ITEM, dest, data);
-}
-
-static const u16 *LoadEvent_TookHeldItem(const u16 *eventData)
-{
-    const u16 *record = LoadEvent(QL_EVENT_TOOK_HELD_ITEM, eventData);
-
-    QuestLog_GetSpeciesName(rSpecies, gStringVar1, 0);
-    StringCopy(gStringVar2, ItemId_GetName(rItemId));
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_TookHeldItemFromMon);
-    return record + 2;
-}
-
-#undef rItemId
-#undef rSpecies
-#undef rItemParam
-
-#define rTakenItemId record[0]
-#define rGivenItemId record[1]
-#define rSpecies     record[2]
-
-static u16 *RecordEvent_SwappedHeldItem(u16 eventId, u16 *dest, const struct QuestLogEvent_SwappedHeldItem * data)
-{
-    u16 *record = RecordEventHeader(eventId, dest);
-    if (record == NULL)
-        return NULL;
-
-    rTakenItemId = data->takenItemId;
-    rGivenItemId = data->givenItemId;
-    rSpecies = data->species;
-    return record + 3;
-}
-
-static u16 *RecordEvent_SwappedHeldItemFromBag(u16 *dest, const struct QuestLogEvent_SwappedHeldItem * data)
-{
-    return RecordEvent_SwappedHeldItem(QL_EVENT_SWAPPED_HELD_ITEM, dest, data);
-}
-
-static const u16 *LoadEvent_SwappedHeldItem(const u16 *eventData)
-{
-    const u16 *record = LoadEvent(QL_EVENT_SWAPPED_HELD_ITEM, eventData);
-    QuestLog_GetSpeciesName(rSpecies, gStringVar1, 0);
-    StringCopy(gStringVar2, ItemId_GetName(rTakenItemId));
-    StringCopy(gStringVar3, ItemId_GetName(rGivenItemId));
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_SwappedHeldItemsOnMon);
-    return record + 3;
-}
-
-static u16 *RecordEvent_SwappedHeldItemFromPC(u16 *dest, const struct QuestLogEvent_SwappedHeldItem * data)
-{
-    return RecordEvent_SwappedHeldItem(QL_EVENT_SWAPPED_HELD_ITEM_PC, dest, data);
-}
-
-static const u16 *LoadEvent_SwappedHeldItemFromPC(const u16 *eventData)
-{
-    const u16 *record = LoadEvent(QL_EVENT_SWAPPED_HELD_ITEM_PC, eventData);
-    QuestLog_GetSpeciesName(rSpecies, gStringVar2, 0);
-    StringCopy(gStringVar3, ItemId_GetName(rTakenItemId));
-    StringCopy(gStringVar1, ItemId_GetName(rGivenItemId));
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_SwappedHeldItemFromPC);
-    return record + 3;
-}
-
-#undef rTakenItemId
-#undef rGivenItemId
-#undef rSpecies
-
-// data argument will be a null pointer, no information needed for this event
-static u16 *RecordEvent_UsedPkmnCenter(u16 *dest, const u16 * data)
-{
-    u16 *record = dest;
-    if (gQuestLogRepeatEventTracker.id == QL_EVENT_USED_PKMN_CENTER && gQuestLogRepeatEventTracker.numRepeats != 0)
-        return record;
-
-    if (!QL_IsRoomToSaveEvent(dest, sQuestLogEventCmdSizes[QL_EVENT_USED_PKMN_CENTER]))
-        return NULL;
-
-    record[0] = QL_EVENT_USED_PKMN_CENTER;
-    record[1] = gQuestLogCurActionIdx;
-    return record + 2;
-}
-
-static const u16 *LoadEvent_UsedPkmnCenter(const u16 *eventData)
-{
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_MonsWereFullyRestoredAtCenter);
-    return eventData + 2;
-}
-
-static u16 *RecordEvent_LinkTraded(u16 *dest, const struct QuestLogEvent_Traded * data)
-{
-    u16 *nameDest = dest + 4;
-
-    dest[0] = QL_EVENT_LINK_TRADED;
-    dest[1] = gQuestLogCurActionIdx;
-    dest[2] = data->speciesSent;
-    dest[3] = data->speciesReceived;
-    memcpy(nameDest, data->partnerName, PLAYER_NAME_LENGTH);
-    return nameDest + 4;
-}
-
-static const u16 *LoadEvent_LinkTraded(const u16 *eventData)
-{
-    const u16 *name = eventData + 4;
-
-    memset(gStringVar1, EOS, PLAYER_NAME_LENGTH + 1);
-    memcpy(gStringVar1, name, PLAYER_NAME_LENGTH);
-
-    TranslateLinkPartnersName(gStringVar1);
-    QuestLog_GetSpeciesName(eventData[3], gStringVar2, 0); // Mon received
-    QuestLog_GetSpeciesName(eventData[2], gStringVar3, 0); // Mon sent
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_TradedMon1ForPersonsMon2);
-    return name + 4;
-}
-
-#define rOutcome      record[0]
-#define rBattler1Name record[1]
-#define rBattler2Name record[1 + PLAYER_NAME_LENGTH]
-#define rBattler3Name record[1 + PLAYER_NAME_LENGTH * 2]
-
-static u16 *RecordEvent_LinkBattledSingle(u16 *dest, const struct QuestLogEvent_LinkBattle * data)
-{
-    u8 * record;
-
-    dest[0] = QL_EVENT_LINK_BATTLED_SINGLE;
-    dest[1] = gQuestLogCurActionIdx;
-    record = (u8 *)(dest + 2);
-
-    rOutcome = data->outcome;
-    memcpy(&rBattler1Name, data->playerNames[0], PLAYER_NAME_LENGTH);
-    return (u16 *)(record + 1 + PLAYER_NAME_LENGTH);
-}
-
-static const u16 *LoadEvent_LinkBattledSingle(const u16 *eventData)
-{
-    const u8 * record = (const u8 *)(eventData + 2);
-    DynamicPlaceholderTextUtil_Reset();
-
-    memset(gStringVar1, EOS, PLAYER_NAME_LENGTH + 1);
-    memcpy(gStringVar1, &rBattler1Name, PLAYER_NAME_LENGTH);
-    TranslateLinkPartnersName(gStringVar1);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gStringVar1);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, sBattleOutcomeTexts[rOutcome]);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_SingleBattleWithPersonResultedInOutcome);
-    return (const u16 *)(record + 1 + PLAYER_NAME_LENGTH);
-}
-
-static u16 *RecordEvent_LinkBattledDouble(u16 *dest, const struct QuestLogEvent_LinkBattle * data)
-{
-    u8 * record;
-
-    dest[0] = QL_EVENT_LINK_BATTLED_DOUBLE;
-    dest[1] = gQuestLogCurActionIdx;
-    record = (u8 *)(dest + 2);
-
-    rOutcome = data->outcome;
-    memcpy(&rBattler1Name, data->playerNames[0], PLAYER_NAME_LENGTH);
-    return (u16 *)(record + 1 + PLAYER_NAME_LENGTH);
-}
-
-static const u16 *LoadEvent_LinkBattledDouble(const u16 *eventData)
-{
-    const u8 * record = (const u8 *)(eventData + 2);
-    DynamicPlaceholderTextUtil_Reset();
-
-    memset(gStringVar1, EOS, PLAYER_NAME_LENGTH + 1);
-    memcpy(gStringVar1, &rBattler1Name, PLAYER_NAME_LENGTH);
-    TranslateLinkPartnersName(gStringVar1);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gStringVar1);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, sBattleOutcomeTexts[rOutcome]);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_DoubleBattleWithPersonResultedInOutcome);
-    return (const u16 *)(record + 1 + PLAYER_NAME_LENGTH);
-}
-
-static u16 *RecordEvent_LinkBattledMulti(u16 *dest, const struct QuestLogEvent_LinkBattle * data)
-{
-    u8 * record;
-
-    dest[0] = QL_EVENT_LINK_BATTLED_MULTI;
-    dest[1] = gQuestLogCurActionIdx;
-    record = (u8 *)(dest + 2);
-
-    rOutcome = data->outcome;
-    memcpy(&rBattler1Name, data->playerNames[0], PLAYER_NAME_LENGTH);
-    memcpy(&rBattler2Name, data->playerNames[1], PLAYER_NAME_LENGTH);
-    memcpy(&rBattler3Name, data->playerNames[2], PLAYER_NAME_LENGTH);
-    return (u16 *)(record + 1 + PLAYER_NAME_LENGTH * 3);
-}
-
-static const u16 *LoadEvent_LinkBattledMulti(const u16 *eventData)
-{
-    const u8 * record = (const u8 *)(eventData + 2);
-    DynamicPlaceholderTextUtil_Reset();
-
-    memset(gStringVar1, EOS, PLAYER_NAME_LENGTH + 1);
-    memset(gStringVar2, EOS, PLAYER_NAME_LENGTH + 1);
-    memset(gStringVar3, EOS, PLAYER_NAME_LENGTH + 1);
-    StringCopy_PlayerName(gStringVar1, &rBattler1Name);
-    StringCopy_PlayerName(gStringVar2, &rBattler2Name);
-    StringCopy_PlayerName(gStringVar3, &rBattler3Name);
-    TranslateLinkPartnersName(gStringVar1);
-    TranslateLinkPartnersName(gStringVar2);
-    TranslateLinkPartnersName(gStringVar3);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gSaveBlock2Ptr->playerName);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, gStringVar1); // partner
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(2, gStringVar2); // opponent 1
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(3, gStringVar3); // opponent 2
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(4, sBattleOutcomeTexts[rOutcome]);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_MultiBattleWithPeopleResultedInOutcome);
-    return (const u16 *)(record + 1 + PLAYER_NAME_LENGTH * 3);
-}
-
-// data argument will be a null pointer, no information needed for this event
-static u16 *RecordEvent_UsedUnionRoom(u16 *dest, const u16 * data)
-{
-    dest[0] = QL_EVENT_USED_UNION_ROOM;
-    dest[1] = gQuestLogCurActionIdx;
-    return dest + 2;
-}
-
-static const u16 *LoadEvent_UsedUnionRoom(const u16 *eventData)
-{
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_MingledInUnionRoom);
-    return eventData + 2;
-}
-
-// data argument will be a null pointer, no information needed for this event
-static u16 *RecordEvent_UsedUnionRoomChat(u16 *dest, const u16 * data)
-{
-    dest[0] = QL_EVENT_USED_UNION_ROOM_CHAT;
-    dest[1] = gQuestLogCurActionIdx;
-    return dest + 2;
-}
-
-static const u16 *LoadEvent_UsedUnionRoomChat(const u16 *eventData)
-{
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_ChattedWithManyTrainers);
-    return eventData + 2;
-}
-
-static u16 *RecordEvent_LinkTradedUnionRoom(u16 *dest, const struct QuestLogEvent_Traded * data)
-{
-    u8 *name = (u8 *)(dest + 4);
-    dest[0] = QL_EVENT_LINK_TRADED_UNION;
-    dest[1] = gQuestLogCurActionIdx;
-    dest[2] = data->speciesSent;
-    dest[3] = data->speciesReceived;
-    memcpy(name, &data->partnerName, PLAYER_NAME_LENGTH);
-    return (u16 *)(name + 8);
-}
-
-static const u16 *LoadEvent_LinkTradedUnionRoom(const u16 *a0)
-{
-    const u8 *r6 = (const u8 *)(a0 + 4);
-    memset(gStringVar1, EOS, PLAYER_NAME_LENGTH + 1);
-    memcpy(gStringVar1, r6, PLAYER_NAME_LENGTH);
-    TranslateLinkPartnersName(gStringVar1);
-    QuestLog_GetSpeciesName(a0[3], gStringVar2, 0);
-    QuestLog_GetSpeciesName(a0[2], gStringVar3, 0);
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_TradedMon1ForTrainersMon2);
-    return (const u16 *)(r6 + 8);
-}
-
-static u16 *RecordEvent_LinkBattledUnionRoom(u16 *dest, const struct QuestLogEvent_LinkBattle * data)
-{
-    dest[0] = QL_EVENT_LINK_BATTLED_UNION;
-    dest[1] = gQuestLogCurActionIdx;
-    *(u8 *)&dest[2] = data->outcome;
-    memcpy((u8 *)dest + 5, &data->playerNames[0], PLAYER_NAME_LENGTH);
-    return dest + 6;
-}
-
-static const u16 *LoadEvent_LinkBattledUnionRoom(const u16 *eventData)
-{
-    const u8 * record = (const u8 *)(eventData + 2);
-
-    memset(gStringVar1, EOS, PLAYER_NAME_LENGTH + 1);
-    memcpy(gStringVar1, &rBattler1Name, PLAYER_NAME_LENGTH);
-    TranslateLinkPartnersName(gStringVar1);
-    StringCopy(gStringVar2, sBattleOutcomeTexts[rOutcome]);
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_BattledTrainerEndedInOutcome);
-    return (const u16 *)(record + 1 + PLAYER_NAME_LENGTH);
-}
-
-#undef rOutcome
-#undef rBattler1Name
-#undef rBattler2Name
-#undef rBattler3Name
-
-#define rSpecies1 record[0]
-#define rSpecies2 record[1]
-#define rBox1     (*((u8*)&record[2] + 0)) // 1st byte of record[2]
-#define rBox2     (*((u8*)&record[2] + 1)) // 2nd byte of record[2]
-
-static u16 *RecordEvent_SwitchedMonsBetweenBoxes(u16 *dest, const struct QuestLogEvent_MovedBoxMon * data)
-{
-    u16 * record = RecordEventHeader(QL_EVENT_SWITCHED_MONS_BETWEEN_BOXES, dest);
-    if (record == NULL)
-        return NULL;
-    rSpecies1 = data->species1;
-    rSpecies2 = data->species2;
-    rBox1 = data->box1;
-    rBox2 = data->box2;
-    return record + 3;
-}
-
-static const u16 *LoadEvent_SwitchedMonsBetweenBoxes(const u16 *eventData)
-{
-    const u8 *boxIdxs;
-    const u16 * r0 = LoadEvent(QL_EVENT_SWITCHED_MONS_BETWEEN_BOXES, eventData);
-    boxIdxs = (const u8 *)r0 + 4;
-    DynamicPlaceholderTextUtil_Reset();
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, GetBoxNamePtr(boxIdxs[0]));
-    QuestLog_GetSpeciesName(r0[0], NULL, 1);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(2, GetBoxNamePtr(boxIdxs[1]));
-    QuestLog_GetSpeciesName(r0[1], NULL, 3);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_SwitchedMonsBetweenBoxes);
-    return r0 + 3;
-}
-
-static u16 *RecordEvent_SwitchedMonsWithinBox(u16 *dest, const u16 *eventData)
-{
-    dest = RecordEventHeader(QL_EVENT_SWITCHED_MONS_WITHIN_BOX, dest);
-    if (dest == NULL)
-        return NULL;
-    dest[0] = eventData[0];
-    dest[1] = eventData[1];
-    *((u8 *)dest + 4) = *((const u8 *)eventData + 4);
-    return dest + 3;
-}
-
-static const u16 *LoadEvent_SwitchedMonsWithinBox(const u16 *eventData)
-{
-    const u8 *boxIdxs;
-    eventData = LoadEvent(QL_EVENT_SWITCHED_MONS_WITHIN_BOX, eventData);
-    boxIdxs = (const u8 *)eventData + 4;
-    DynamicPlaceholderTextUtil_Reset();
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, GetBoxNamePtr(boxIdxs[0]));
-    QuestLog_GetSpeciesName(eventData[0], NULL, 1);
-    QuestLog_GetSpeciesName(eventData[1], NULL, 2);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_SwitchedMonsWithinBox);
-    return eventData + 3;
-}
-
-static u16 *RecordEvent_SwitchedPartyMonForPCMon(u16 *dest, const u16 *eventData)
-{
-    u16 *r2;
-    u16 *ret;
-    r2 = RecordEventHeader(QL_EVENT_SWITCHED_PARTY_MON_FOR_PC_MON, dest);
-    if (r2 == NULL)
-        return NULL;
-    ret = r2 + 2;
-    if (*((const u8 *)eventData + 4) == TOTAL_BOXES_COUNT)
-    {
-        r2[0] = eventData[1];
-        r2[1] = eventData[0];
-        *((u8 *)r2 + 4) = *((const u8 *)eventData + 5);
-    }
-    else
-    {
-        r2[0] = eventData[0];
-        r2[1] = eventData[1];
-        *((u8 *)r2 + 4) = *((const u8 *)eventData + 4);
-    }
-    return ret + 1;
-}
-
-static const u16 *LoadEvent_SwitchedPartyMonForPCMon(const u16 *eventData)
-{
-    const u8 *boxIdxs;
-    eventData = LoadEvent(QL_EVENT_SWITCHED_PARTY_MON_FOR_PC_MON, eventData);
-    boxIdxs = (const u8 *)eventData + 4;
-    DynamicPlaceholderTextUtil_Reset();
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, GetBoxNamePtr(boxIdxs[0]));
-    QuestLog_GetSpeciesName(eventData[0], NULL, 1);
-    QuestLog_GetSpeciesName(eventData[1], NULL, 2);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_SwitchedPartyMonForPCMon);
-    return eventData + 3;
-}
-
-static u16 *RecordEvent_MovedMonBetweenBoxes(u16 *dest, const u16 *eventData)
-{
-    u16 *r2;
-    u16 *ret;
-    r2 = RecordEventHeader(QL_EVENT_MOVED_MON_BETWEEN_BOXES, dest);
-    if (r2 == NULL)
-        return NULL;
-    r2[0] = eventData[0];
-    ret = r2 + 1;
-    *((u8 *)ret + 0) = *((const u8 *)eventData + 4);
-    *((u8 *)ret + 1) = *((const u8 *)eventData + 5);
-    return ret + 1;
-}
-
-static const u16 *LoadEvent_MovedMonBetweenBoxes(const u16 *eventData)
-{
-    const u8 *boxIdxs;
-    eventData = LoadEvent(QL_EVENT_MOVED_MON_BETWEEN_BOXES, eventData);
-    boxIdxs = (const u8 *)eventData + 2;
-    DynamicPlaceholderTextUtil_Reset();
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, GetBoxNamePtr(boxIdxs[0]));
-    QuestLog_GetSpeciesName(eventData[0], NULL, 1);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(2, GetBoxNamePtr(boxIdxs[1]));
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_MovedMonToNewBox);
-    return (const u16 *)boxIdxs + 1;
-}
-
-static u16 *RecordEvent_MovedMonWithinBox(u16 *dest, const u16 *eventData)
-{
-    u16 *r2;
-    r2 = RecordEventHeader(QL_EVENT_MOVED_MON_WITHIN_BOX, dest);
-    if (r2 == NULL)
-        return NULL;
-    r2[0] = eventData[0];
-    *((u8 *)r2 + 2) = *((const u8 *)eventData + 4);
-    return r2 + 2;
-}
-
-static const u16 *LoadEvent_MovedMonWithinBox(const u16 *eventData)
-{
-    const u8 *boxIdxs;
-    eventData = LoadEvent(QL_EVENT_MOVED_MON_WITHIN_BOX, eventData);
-    boxIdxs = (const u8 *)eventData + 2;
-    DynamicPlaceholderTextUtil_Reset();
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, GetBoxNamePtr(boxIdxs[0]));
-    QuestLog_GetSpeciesName(eventData[0], NULL, 1);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_MovedMonWithinBox);
-    return (const u16 *)boxIdxs + 1;
-}
-
-static u16 *RecordEvent_WithdrewMonFromPC(u16 *dest, const u16 *eventData)
-{
-    u16 *r2;
-    r2 = RecordEventHeader(QL_EVENT_WITHDREW_MON_PC, dest);
-    if (r2 == NULL)
-        return NULL;
-    r2[0] = eventData[0];
-    *((u8 *)r2 + 2) = *((const u8 *)eventData + 4);
-    return r2 + 2;
-}
-
-static const u16 *LoadEvent_WithdrewMonFromPC(const u16 *eventData)
-{
-    const u8 *boxIdxs;
-    eventData = LoadEvent(QL_EVENT_WITHDREW_MON_PC, eventData);
-    boxIdxs = (const u8 *)eventData + 2;
-    DynamicPlaceholderTextUtil_Reset();
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, GetBoxNamePtr(boxIdxs[0]));
-    QuestLog_GetSpeciesName(eventData[0], NULL, 1);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_WithdrewMonFromPC);
-    return (const u16 *)boxIdxs + 1;
-}
-
-static u16 *RecordEvent_DepositedMonInPC(u16 *dest, const u16 *eventData)
-{
-    u16 *r2;
-    r2 = RecordEventHeader(QL_EVENT_DEPOSITED_MON_PC, dest);
-    if (r2 == NULL)
-        return NULL;
-    r2[0] = eventData[0];
-    *((u8 *)r2 + 2) = *((const u8 *)eventData + 4);
-    return r2 + 2;
-}
-
-static const u16 *LoadEvent_DepositedMonInPC(const u16 *eventData)
-{
-    const u8 *boxIdxs;
-    eventData = LoadEvent(QL_EVENT_DEPOSITED_MON_PC, eventData);
-    boxIdxs = (const u8 *)eventData + 2;
-    DynamicPlaceholderTextUtil_Reset();
-    QuestLog_GetSpeciesName(eventData[0], NULL, 0);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, GetBoxNamePtr(boxIdxs[0]));
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_DepositedMonInPC);
-    return (const u16 *)boxIdxs + 1;
-}
-
-static u16 *RecordEvent_SwitchedMultipleMons(u16 *dest, const u16 *eventData)
-{
-    u16 *r2;
-    r2 = RecordEventHeader(QL_EVENT_SWITCHED_MULTIPLE_MONS, dest);
-    if (r2 == NULL)
-        return NULL;
-    *((u8 *)r2 + 0) = *((const u8 *)eventData + 4);
-    *((u8 *)r2 + 1) = *((const u8 *)eventData + 5);
-    return r2 + 1;
-}
-
-static const u16 *LoadEvent_SwitchedMultipleMons(const u16 *eventData)
-{
-    const u16 *r4 = LoadEvent(QL_EVENT_SWITCHED_MULTIPLE_MONS, eventData);
-    DynamicPlaceholderTextUtil_Reset();
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, GetBoxNamePtr(*((const u8 *)r4 + 0)));
-    if (*((const u8 *)r4 + 0) == *((const u8 *)r4 + 1))
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, gText_QuestLog_ADifferentSpot);
-    else
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, GetBoxNamePtr(*((const u8 *)r4 + 1)));
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_SwitchedMultipleMons);
-    return r4 + 1;
-}
-
-#undef rSpecies1
-#undef rSpecies2
-#undef rBox1
-#undef rBox2
-
-#define rItemId record[0]
-
-static u16 *RecordEvent_DepositedItemInPC(u16 *dest, const struct QuestLogEvent_Item * data)
-{
-    u16 * record = RecordEventHeader(QL_EVENT_DEPOSITED_ITEM_PC, dest);
-    if (record == NULL)
-        return NULL;
-    rItemId = data->itemId;
-    return record + 1;
-}
-
-static const u16 *LoadEvent_DepositedItemInPC(const u16 *eventData)
-{
-    const u16 *record = LoadEvent(QL_EVENT_DEPOSITED_ITEM_PC, eventData);
-    CopyItemName(rItemId, gStringVar1);
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_StoredItemInPC);
-    return record + 1;
-}
-
-static u16 *RecordEvent_WithdrewItemFromPC(u16 *dest, const struct QuestLogEvent_Item * data)
-{
-    u16 * record = RecordEventHeader(QL_EVENT_WITHDREW_ITEM_PC, dest);
-    if (record == NULL)
-        return NULL;
-    rItemId = data->itemId;
-    return record + 1;
-}
-
-static const u16 *LoadEvent_WithdrewItemFromPC(const u16 *eventData)
-{
-    const u16 *record = LoadEvent(QL_EVENT_WITHDREW_ITEM_PC, eventData);
-    CopyItemName(rItemId, gStringVar1);
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_WithdrewItemFromPC);
-    return record + 1;
-}
-
-#undef rItemId
-
-#define rSpeciesOpponent record[0]
-#define rSpeciesPlayer   record[1]
-#define rTrainerId       record[2]
-#define rMapSec          (*((u8*)&record[3] + 0)) // 1st byte of record[3]
-#define rHpFractionId    (*((u8*)&record[3] + 1)) // 2nd byte of record[3]
-
-static u16 *RecordEvent_DefeatedTrainer(u16 eventId, u16 *dest, const struct QuestLogEvent_TrainerBattle * data)
-{
-    u16 * record = RecordEventHeader(eventId, dest);
-    if (record == NULL)
-        return NULL;
-    rSpeciesOpponent = data->speciesOpponent;
-    rSpeciesPlayer = data->speciesPlayer;
-    rTrainerId = data->trainerId;
-    rMapSec = data->mapSec;
-    rHpFractionId = data->hpFractionId;
-    return record + 4;
-}
-
-static u16 *RecordEvent_DefeatedGymLeader(u16 *dest, const struct QuestLogEvent_TrainerBattle * data)
-{
-    sStepRecordingMode = STEP_RECORDING_MODE_DISABLED;
-    return RecordEvent_DefeatedTrainer(QL_EVENT_DEFEATED_GYM_LEADER, dest, data);
-}
-
-static const u16 *LoadEvent_DefeatedGymLeader(const u16 *eventData)
-{
-    const u8 *r6;
-    eventData = LoadEvent(QL_EVENT_DEFEATED_GYM_LEADER, eventData);
-    r6 = (const u8 *)eventData + 6;
-    DynamicPlaceholderTextUtil_Reset();
-    GetMapNameGeneric(gStringVar1, r6[0]);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gStringVar1);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, GetTrainerNameFromId(eventData[2]));
-    QuestLog_GetSpeciesName(eventData[0], 0, 2);
-    QuestLog_GetSpeciesName(eventData[1], 0, 3);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(4, sDefeatedOpponentFlavorTexts[r6[1]]);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_TookOnGymLeadersMonWithMonAndWon);
-    return eventData + 4;
-}
-
-static u16 *RecordEvent_DefeatedWildMon(u16 *dest, const struct QuestLogEvent_WildBattle * data)
-{
-    u16 *body = dest;
-    u8 *footer = (u8 *)dest + sizeof(struct QuestLogEvent_WildBattle);
-    if (!QL_IsRoomToSaveEvent(body, sQuestLogEventCmdSizes[QL_EVENT_DEFEATED_WILD_MON]))
-        return NULL;
-    if (footer[0] == 0 && footer[1] == 0)
-    {
-        body[0] = QL_EVENT_DEFEATED_WILD_MON;
-        body[1] = gQuestLogCurActionIdx;
-    }
-    if (data->defeatedSpecies != SPECIES_NONE)
-        body[2] = data->defeatedSpecies;
-    if (data->caughtSpecies != SPECIES_NONE)
-        body[3] = data->caughtSpecies;
-    if (data->defeatedSpecies != SPECIES_NONE && footer[0] != 0xFF)
-        footer[0]++;
-    if (data->caughtSpecies != SPECIES_NONE && footer[1] != 0xFF)
-        footer[1]++;
-    footer[2] = data->mapSec;
-    return (u16 *)(footer + 4);
-}
-
-static const u16 *LoadEvent_DefeatedWildMon(const u16 *a0)
-{
-    const u8 *data;
-    if (!QL_IsRoomToSaveEvent(a0, sQuestLogEventCmdSizes[QL_EVENT_DEFEATED_WILD_MON]))
-        return NULL;
-
-    data = (const u8 *)a0 + 8;
-    DynamicPlaceholderTextUtil_Reset();
-    GetMapNameGeneric(gStringVar1, data[2]);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gStringVar1);
-    QuestLog_GetSpeciesName(a0[2], NULL, 1);
-    ConvertIntToDecimalStringN(gStringVar2, data[0], STR_CONV_MODE_LEFT_ALIGN, 3);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(2, gStringVar2);
-    QuestLog_GetSpeciesName(a0[3], NULL, 3);
-    ConvertIntToDecimalStringN(gStringVar3, data[1], STR_CONV_MODE_LEFT_ALIGN, 3);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(4, gStringVar3);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(5, gSaveBlock2Ptr->playerName);
-    if (data[0] == 0)
-    {
-        if (data[1] == 1)
-            DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_CaughtWildMon);
-        else
-            DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_CaughtWildMons);
-    }
-    else if (data[1] == 0)
-    {
-        if (data[0] == 1)
-            DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_DefeatedWildMon);
-        else
-            DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_DefeatedWildMons);
-    }
-    else if (data[0] == 1)
-    {
-        if (data[1] == 1)
-            DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_DefeatedWildMonAndCaughtWildMon);
-        else
-            DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_DefeatedWildMonAndCaughtWildMons);
-    }
-    else
-    {
-        if (data[1] == 1)
-            DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_DefeatedWildMonsAndCaughtWildMon);
-        else
-            DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_DefeatedWildMonsAndCaughtWildMons);
-    }
-    return (const u16 *)(data + 4);
-}
-
-static bool8 IsSpeciesFromSpecialEncounter(u16 species)
-{
-    switch (species)
-    {
-    case SPECIES_SNORLAX:
-    case SPECIES_ARTICUNO:
-    case SPECIES_ZAPDOS:
-    case SPECIES_MOLTRES:
-    case SPECIES_MEWTWO:
-    case SPECIES_LUGIA:
-    case SPECIES_HO_OH:
-    case SPECIES_DEOXYS:
-        return TRUE;
-    }
-    return FALSE;
-}
-
-static u16 *RecordEvent_DefeatedEliteFourMember(u16 *dest, const struct QuestLogEvent_TrainerBattle * data)
-{
-    sStepRecordingMode = STEP_RECORDING_MODE_DISABLED;
-    return RecordEvent_DefeatedTrainer(QL_EVENT_DEFEATED_E4_MEMBER, dest, data);
-}
-
-static const u16 *LoadEvent_DefeatedEliteFourMember(const u16 *eventData)
-{
-    const u8 *r5;
-    eventData = LoadEvent(QL_EVENT_DEFEATED_E4_MEMBER, eventData);
-    r5 = (const u8 *)eventData + 6;
-    DynamicPlaceholderTextUtil_Reset();
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, GetTrainerNameFromId(eventData[2]));
-    QuestLog_GetSpeciesName(eventData[0], NULL, 1);
-    QuestLog_GetSpeciesName(eventData[1], NULL, 2);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(3, sDefeatedOpponentFlavorTexts[r5[1]]);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_TookOnEliteFoursMonWithMonAndWon);
-    return eventData + 4;
-}
-
-static u16 *RecordEvent_DefeatedChampion(u16 *dest, const struct QuestLogEvent_TrainerBattle * data)
-{
-    if (!QL_IsRoomToSaveEvent(dest, sQuestLogEventCmdSizes[QL_EVENT_DEFEATED_CHAMPION]))
-        return NULL;
-    dest[0] = QL_EVENT_DEFEATED_CHAMPION | (2 << QL_CMD_COUNT_SHIFT); // Event will run two additional times, for each state in LoadEvent_DefeatedChampion
-    dest[1] = gQuestLogCurActionIdx;
-    dest[2] = data->speciesOpponent;
-    dest[3] = data->speciesPlayer;
-    *((u8 *)dest + 8) = data->hpFractionId;
-    sStepRecordingMode = STEP_RECORDING_MODE_DISABLED;
-    return dest + 5;
-}
-
-static const u16 *LoadEvent_DefeatedChampion(const u16 *a0)
-{
-    const u8 *r5;
-    if (!QL_IsRoomToSaveEvent(a0, sQuestLogEventCmdSizes[QL_EVENT_DEFEATED_CHAMPION]))
-        return NULL;
-
-    r5 = (const u8 *)a0 + 8;
-    DynamicPlaceholderTextUtil_Reset();
-
-    switch (gQuestLogRepeatEventTracker.counter)
-    {
-    case 0:
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gSaveBlock2Ptr->playerName);
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, gSaveBlock1Ptr->rivalName);
-        DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_PlayerBattledChampionRival);
-        break;
-    case 1:
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gSaveBlock1Ptr->rivalName);
-        QuestLog_GetSpeciesName(a0[2], NULL, 1);
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(2, gSaveBlock2Ptr->playerName);
-        QuestLog_GetSpeciesName(a0[3], NULL, 3);
-        DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_PlayerSentOutMon1RivalSentOutMon2);
-        break;
-    case 2:
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, sDefeatedChampionFlavorTexts[r5[0]]);
-        DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_WonTheMatchAsAResult);
-        break;
-    }
-    return (const u16 *)(r5 + 2);
-}
-
-static u16 *RecordEvent_DefeatedNormalTrainer(u16 *dest, const struct QuestLogEvent_TrainerBattle * data)
-{
-    sStepRecordingMode = STEP_RECORDING_MODE_DISABLED;
-    return RecordEvent_DefeatedTrainer(QL_EVENT_DEFEATED_TRAINER, dest, data);
-}
-
-static const u16 *LoadEvent_DefeatedTrainer(const u16 *eventData)
-{
-    const u16 *r5 = LoadEvent(QL_EVENT_DEFEATED_TRAINER, eventData);
-    const u8 *r6 = (const u8 *)r5 + 6;
-    u32 trainerClass = GetTrainerClassFromId(r5[2]);
-    DynamicPlaceholderTextUtil_Reset();
-    GetMapNameGeneric(gStringVar1, r6[0]);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gStringVar1);
-
-    if (trainerClass == TRAINER_CLASS_RIVAL_EARLY
-     || trainerClass == TRAINER_CLASS_RIVAL_LATE
-     || trainerClass == TRAINER_CLASS_CHAMPION)
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, GetExpandedPlaceholder(PLACEHOLDER_ID_RIVAL));
-    else
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, GetTrainerNameFromId(r5[2]));
-
-    QuestLog_GetSpeciesName(r5[0], NULL, 2);
-    QuestLog_GetSpeciesName(r5[1], NULL, 3);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(4, sDefeatedOpponentFlavorTexts[r6[1]]);
-    DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_TookOnTrainersMonWithMonAndWon);
-    return (const u16 *)(r6 + 2);
-}
-
-#undef rSpeciesOpponent
-#undef rSpeciesPlayer
-#undef rTrainerId
-#undef rMapSec
-#undef rHpFractionId
-
-#define rMapSec     record[0]
-#define rLocationId record[1]
-
-static u16 *RecordEvent_DepartedLocation(u16 *dest, const struct QuestLogEvent_Departed * data)
-{
-    u8 *record = (u8 *)RecordEventHeader(QL_EVENT_DEPARTED, dest);
-    if (record == NULL)
-        return NULL;
-
-    rMapSec = data->mapSec;
-    rLocationId = data->locationId;
-    if (rLocationId == QL_LOCATION_SAFARI_ZONE)
-        sStepRecordingMode = STEP_RECORDING_MODE_DISABLED;
-
-    return (u16 *)(record + 2);
-}
-
-static const u16 *LoadEvent_DepartedLocation(const u16 *eventData)
-{
-    u8 i, locationId;
-    const u8 *record = (const u8 *)LoadEvent(QL_EVENT_DEPARTED, eventData);
-
-    locationId = rLocationId;
-    GetMapNameGeneric(gStringVar1, rMapSec);
-    StringCopy(gStringVar2, sLocationNameTexts[locationId]);
-    if (sLocationToDepartedTextId[locationId] == QL_DEPARTED_GYM)
-    {
-        for (i = 0; i < NUM_BADGES; i++)
-        {
-            if (rMapSec != sGymCityMapSecs[i])
-                continue;
-            if (FlagGet(FLAG_BADGE01_GET + i) == TRUE)
-                StringExpandPlaceholders(gStringVar4, gText_QuestLog_DepartedGym);
-            else
-                StringExpandPlaceholders(gStringVar4, gText_QuestLog_GymWasFullOfToughTrainers);
-            break;
-        }
-        if (i == NUM_BADGES)
-            StringExpandPlaceholders(gStringVar4, sDepartedLocationTexts[sLocationToDepartedTextId[locationId]]);
-    }
-    else
-        StringExpandPlaceholders(gStringVar4, sDepartedLocationTexts[sLocationToDepartedTextId[locationId]]);
-
-    return (const u16 *)(record + 2);
-}
-
-#undef rMapSec
-#undef rLocationId
-
-void SetQLPlayedTheSlots(void)
-{
-    sPlayedTheSlots = TRUE;
-}
-
-static bool8 ShouldRegisterEvent_HandleDeparted(u16 eventId, const u16 * genericData)
-{
-    const struct QuestLogEvent_Departed * data;
-
-    if (eventId != QL_EVENT_DEPARTED)
-    {
-        sLastDepartedLocation = 0;
-        return TRUE;
-    }
-
-    data = (struct QuestLogEvent_Departed *)genericData;
-
-    if (sLastDepartedLocation == data->locationId + 1)
-        return FALSE;
-    sLastDepartedLocation = data->locationId + 1;
-    return TRUE;
-}
-
-static bool8 ShouldRegisterEvent_DepartedGameCorner(u16 eventId, const u16 * genericData)
-{
-    const struct QuestLogEvent_Departed * data;
-
-    if (eventId != QL_EVENT_DEPARTED)
-        return TRUE;
-
-    data = (struct QuestLogEvent_Departed *)genericData;
-
-    if (data->locationId == QL_LOCATION_GAME_CORNER && !sPlayedTheSlots)
-        return FALSE;
-
-    sPlayedTheSlots = FALSE;
-    return TRUE;
-}
-
-static u16 *RecordEvent_UsedFieldMove(u16 *dest, const struct QuestLogEvent_FieldMove * data)
-{
-    u8 *record;
-    dest = RecordEventHeader(QL_EVENT_USED_FIELD_MOVE, dest);
-    if (dest == NULL)
-        return NULL;
-    dest[0] = data->species;
-    record = (u8 *)dest + 2;
-    record[0] = data->fieldMove;
-    record[1] = data->mapSec;
-    if (record[0] == FIELD_MOVE_TELEPORT || record[0] == FIELD_MOVE_DIG)
-        sStepRecordingMode = STEP_RECORDING_MODE_DISABLED_UNTIL_DEPART;
-    else
-        sStepRecordingMode = STEP_RECORDING_MODE_DISABLED;
-    return (u16 *)(record + 2);
-}
-
-static const u16 *LoadEvent_UsedFieldMove(const u16 *eventData)
-{
-    const u16 *r4 = LoadEvent(QL_EVENT_USED_FIELD_MOVE, eventData);
-    const u8 *r5 = (const u8 *)r4 + 2;
-    QuestLog_GetSpeciesName(r4[0], gStringVar1, 0);
-    if (r5[1] != 0xFF)
-        GetMapNameGeneric(gStringVar2, r5[1]);
-
-    // If used Teleport, get name of destination
-    if (r5[0] == FIELD_MOVE_TELEPORT)
-    {
-        if (r5[1] == MAPSEC_PALLET_TOWN)
-            StringCopy(gStringVar3, gText_QuestLog_Home);
-        else
-            StringCopy(gStringVar3, gText_PokemonCenter);
-    }
-
-    StringExpandPlaceholders(gStringVar4, gFieldMovesInfo[r5[0]].questLogText);
-    return (const u16 *)(r5 + 2);
-}
-
-static u16 *RecordEvent_BoughtItem(u16 *dest, const struct QuestLogEvent_Shop * data)
-{
-    dest = RecordEventHeader(QL_EVENT_BOUGHT_ITEM, dest);
-    if (dest == NULL)
-        return NULL;
-    dest[0] = data->lastItemId;
-    dest[1] = data->itemQuantity;
-    dest[2] = data->totalMoney >> 16;
-    dest[3] = data->totalMoney;
-    *((u8 *)dest + 8) = data->mapSec;
-    *((u8 *)dest + 9) = TRUE; // data->hasMultipleTransactions ignored for some reason. It's assumed true if quantity >= 2
-    return dest + 5;
-}
-
-static const u16 *LoadEvent_BoughtItem(const u16 *eventData)
-{
-    const u16 *r4 = LoadEvent(QL_EVENT_BOUGHT_ITEM, eventData);
-    const u8 *r7 = (const u8 *)r4 + 8;
-    u32 r6 = (r4[2] << 16) + r4[3];
-    DynamicPlaceholderTextUtil_Reset();
-    GetMapNameGeneric(gStringVar1, r7[0]);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gStringVar1);
-    DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, ItemId_GetName(r4[0]));
-    if (r4[1] < 2)
-        DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_BoughtItem);
-    else
-    {
-        ConvertIntToDecimalStringN(gStringVar2, r6, STR_CONV_MODE_LEFT_ALIGN, 6);
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(2, gStringVar2);
-        DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_BoughtItemsIncludingItem);
-    }
-    return (const u16 *)(r7 + 2);
-}
-
-static u16 *RecordEvent_SoldItem(u16 *dest, const struct QuestLogEvent_Shop * data)
-{
-    dest = RecordEventHeader(QL_EVENT_SOLD_ITEM, dest);
-    if (dest == NULL)
-        return NULL;
-    dest[0] = data->lastItemId;
-    dest[1] = data->itemQuantity;
-    dest[2] = data->totalMoney >> 16;
-    dest[3] = data->totalMoney;
-    *((u8 *)dest + 8) = data->mapSec;
-    *((u8 *)dest + 9) = data->hasMultipleTransactions;
-    return dest + 5;
-}
-
-static const u16 *LoadEvent_SoldItem(const u16 *eventData)
-{
-    const u16 *r5 = LoadEvent(QL_EVENT_SOLD_ITEM, eventData);
-    const u8 *r7 = (const u8 *) r5 + 8;
-    u32 r6 = (r5[2] << 16) + r5[3];
-    DynamicPlaceholderTextUtil_Reset();
-    GetMapNameGeneric(gStringVar1, r7[0]);
-    if (r7[1] == 0) {
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gSaveBlock2Ptr->playerName);
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, gStringVar1);
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(2, ItemId_GetName(r5[0]));
-        if (r5[1] == 1)
-            DynamicPlaceholderTextUtil_SetPlaceholderPtr(3, gText_QuestLog_JustOne);
-        else
-        {
-            ConvertIntToDecimalStringN(gStringVar2, r5[1], STR_CONV_MODE_LEFT_ALIGN, 3);
-            DynamicPlaceholderTextUtil_SetPlaceholderPtr(4, gStringVar2);
-            DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar3, gText_QuestLog_Num);
-            DynamicPlaceholderTextUtil_SetPlaceholderPtr(3, gStringVar3);
-        }
-        DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_SoldNumOfItem);
-    }
-    else
-    {
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(0, gStringVar1);
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(1, ItemId_GetName(r5[0]));
-        ConvertIntToDecimalStringN(gStringVar2, r6, STR_CONV_MODE_LEFT_ALIGN, 6);
-        DynamicPlaceholderTextUtil_SetPlaceholderPtr(2, gStringVar2);
-        DynamicPlaceholderTextUtil_ExpandPlaceholders(gStringVar4, gText_QuestLog_SoldItemsIncludingItem);
-    }
-    return (const u16 *)(r7 + 2);
-}
-
-static u16 *RecordEvent_ObtainedStoryItem(u16 *dest, const struct QuestLogEvent_StoryItem * data)
-{
-    dest = RecordEventHeader(QL_EVENT_OBTAINED_STORY_ITEM, dest);
-    if (dest == NULL)
-        return NULL;
-    dest[0] = data->itemId;
-    *((u8 *)dest + 2) = data->mapSec;
-    return dest + 2;
-}
-
-static const u16 *LoadEvent_ObtainedStoryItem(const u16 *eventData)
-{
-    const u16 *r4 = LoadEvent(QL_EVENT_OBTAINED_STORY_ITEM, eventData);
-    const u8 *r5 = (const u8 *)r4 + 2;
-    GetMapNameGeneric(gStringVar1, r5[0]);
-    StringCopy(gStringVar2, ItemId_GetName(r4[0]));
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_ObtainedItemInLocation);
-    return (const u16 *)(r5 + 2);
-}
-
-void QuestLog_RecordEnteredMap(u16 worldMapFlag)
-{
-    s32 i;
-
-    if (QL_IS_PLAYBACK_STATE)
-        return;
-
-    for (i = 0; i < (int)ARRAY_COUNT(sWorldMapFlags); i++)
-    {
-        if (worldMapFlag == sWorldMapFlags[i])
-        {
-            if (!FlagGet(worldMapFlag))
-            {
-                sNewlyEnteredMap = TRUE;
-                break;
-            }
-            else
-            {
-                sNewlyEnteredMap += 0;
-                sNewlyEnteredMap = FALSE;
-                break;
-            }
-        }
-    }
-}
-
-void SetQuestLogEvent_Arrived(void)
-{
-    if (!QL_IS_PLAYBACK_STATE)
-    {
-        if (sNewlyEnteredMap)
-        {
-            u16 mapSec = gMapHeader.regionMapSectionId;
-            SetQuestLogEvent(QL_EVENT_ARRIVED, &mapSec);
-            sNewlyEnteredMap = FALSE;
-        }
-    }
-}
-
-static u16 *RecordEvent_ArrivedInLocation(u16 *dest, const u16 * data)
-{
-    dest = RecordEventHeader(QL_EVENT_ARRIVED, dest);
-    if (dest == NULL)
-        return NULL;
-    dest[0] = data[0];
-    return dest + 1;
-}
-
-static const u16 *LoadEvent_ArrivedInLocation(const u16 *eventData)
-{
-    const u16 *r4 = LoadEvent(QL_EVENT_ARRIVED, eventData);
-    GetMapNameGeneric(gStringVar1, (u8)r4[0]);
-    StringExpandPlaceholders(gStringVar4, gText_QuestLog_ArrivedInLocation);
-    return r4 + 1;
-}
-
-static void TranslateLinkPartnersName(u8 *dest)
-{
-    s32 i;
-    if (*dest++ == EXT_CTRL_CODE_BEGIN && *dest++ == EXT_CTRL_CODE_JPN)
-    {
-        for (i = 0; i < 5; i++)
-        {
-            if (*dest == EXT_CTRL_CODE_BEGIN)
-                break;
-            dest++;
-        }
-        *dest++ = EXT_CTRL_CODE_BEGIN;
-        *dest++ = EXT_CTRL_CODE_ENG;
-        *dest++ = EOS;
-    }
-}
diff --git a/src/quest_log_objects.c b/src/quest_log_objects.c
deleted file mode 100644
index 545040a8f..000000000
--- a/src/quest_log_objects.c
+++ /dev/null
@@ -1,146 +0,0 @@
-#include "global.h"
-#include "quest_log.h"
-#include "fieldmap.h"
-#include "field_player_avatar.h"
-#include "metatile_behavior.h"
-
-void QL_RecordObjects(struct QuestLogScene * questLog)
-{
-    u32 i;
-
-    for (i = 0; i < OBJECT_EVENTS_COUNT; i++)
-    {
-        questLog->objectEvents[i].active                         = gObjectEvents[i].active;
-        questLog->objectEvents[i].triggerGroundEffectsOnStop     = gObjectEvents[i].triggerGroundEffectsOnStop;
-        questLog->objectEvents[i].disableCoveringGroundEffects   = gObjectEvents[i].disableCoveringGroundEffects;
-        questLog->objectEvents[i].landingJump                    = gObjectEvents[i].landingJump;
-        questLog->objectEvents[i].frozen                         = gObjectEvents[i].frozen;
-        questLog->objectEvents[i].facingDirectionLocked          = gObjectEvents[i].facingDirectionLocked;
-        questLog->objectEvents[i].disableAnim                    = gObjectEvents[i].disableAnim;
-        questLog->objectEvents[i].enableAnim                     = gObjectEvents[i].enableAnim;
-        questLog->objectEvents[i].inanimate                      = gObjectEvents[i].inanimate;
-        questLog->objectEvents[i].invisible                      = gObjectEvents[i].invisible;
-        questLog->objectEvents[i].offScreen                      = gObjectEvents[i].offScreen;
-        questLog->objectEvents[i].trackedByCamera                = gObjectEvents[i].trackedByCamera;
-        questLog->objectEvents[i].isPlayer                       = gObjectEvents[i].isPlayer;
-        questLog->objectEvents[i].spriteAnimPausedBackup         = gObjectEvents[i].spriteAnimPausedBackup;
-        questLog->objectEvents[i].spriteAffineAnimPausedBackup   = gObjectEvents[i].spriteAffineAnimPausedBackup;
-        questLog->objectEvents[i].disableJumpLandingGroundEffect = gObjectEvents[i].disableJumpLandingGroundEffect;
-        questLog->objectEvents[i].fixedPriority                  = gObjectEvents[i].fixedPriority;
-        questLog->objectEvents[i].facingDirection                = gObjectEvents[i].facingDirection;
-        questLog->objectEvents[i].currentElevation               = gObjectEvents[i].currentElevation;
-        questLog->objectEvents[i].previousElevation              = gObjectEvents[i].previousElevation;
-        questLog->objectEvents[i].graphicsId                     = gObjectEvents[i].graphicsId;
-        questLog->objectEvents[i].movementType                   = gObjectEvents[i].movementType;
-        questLog->objectEvents[i].trainerType                    = gObjectEvents[i].trainerType;
-        questLog->objectEvents[i].localId                        = gObjectEvents[i].localId;
-        questLog->objectEvents[i].mapNum                         = gObjectEvents[i].mapNum;
-        questLog->objectEvents[i].mapGroup                       = gObjectEvents[i].mapGroup;
-        questLog->objectEvents[i].x                              = gObjectEvents[i].currentCoords.x;
-        questLog->objectEvents[i].y                              = gObjectEvents[i].currentCoords.y;
-        questLog->objectEvents[i].trainerRange_berryTreeId       = gObjectEvents[i].trainerRange_berryTreeId;
-        questLog->objectEvents[i].previousMetatileBehavior       = gObjectEvents[i].previousMetatileBehavior;
-        questLog->objectEvents[i].directionSequenceIndex         = gObjectEvents[i].directionSequenceIndex;
-        questLog->objectEvents[i].animId                         = gObjectEvents[i].playerCopyableMovement;
-    }
-}
-
-void QL_LoadObjects(const struct QuestLogScene * questLog, const struct ObjectEventTemplate * templates)
-{
-    u32 i, j;
-    const struct QuestLogObjectEvent * questLogObjectEvents = questLog->objectEvents;
-
-    CpuFill16(0, gObjectEvents, sizeof(gObjectEvents));
-
-    for (i = 0; i < OBJECT_EVENTS_COUNT; i++)
-    {
-        gObjectEvents[i].active                         = questLogObjectEvents[i].active;
-        gObjectEvents[i].triggerGroundEffectsOnStop     = questLogObjectEvents[i].triggerGroundEffectsOnStop;
-        gObjectEvents[i].disableCoveringGroundEffects   = questLogObjectEvents[i].disableCoveringGroundEffects;
-        gObjectEvents[i].landingJump                    = questLogObjectEvents[i].landingJump;
-        gObjectEvents[i].frozen                         = questLogObjectEvents[i].frozen;
-        gObjectEvents[i].facingDirectionLocked          = questLogObjectEvents[i].facingDirectionLocked;
-        gObjectEvents[i].disableAnim                    = questLogObjectEvents[i].disableAnim;
-        gObjectEvents[i].enableAnim                     = questLogObjectEvents[i].enableAnim;
-        gObjectEvents[i].inanimate                      = questLogObjectEvents[i].inanimate;
-        gObjectEvents[i].invisible                      = questLogObjectEvents[i].invisible;
-        gObjectEvents[i].offScreen                      = questLogObjectEvents[i].offScreen;
-        gObjectEvents[i].trackedByCamera                = questLogObjectEvents[i].trackedByCamera;
-        gObjectEvents[i].isPlayer                       = questLogObjectEvents[i].isPlayer;
-        gObjectEvents[i].spriteAnimPausedBackup         = questLogObjectEvents[i].spriteAnimPausedBackup;
-        gObjectEvents[i].spriteAffineAnimPausedBackup   = questLogObjectEvents[i].spriteAffineAnimPausedBackup;
-        gObjectEvents[i].disableJumpLandingGroundEffect = questLogObjectEvents[i].disableJumpLandingGroundEffect;
-        gObjectEvents[i].fixedPriority                  = questLogObjectEvents[i].fixedPriority;
-        gObjectEvents[i].facingDirection                = questLogObjectEvents[i].facingDirection;
-        gObjectEvents[i].currentElevation               = questLogObjectEvents[i].currentElevation;
-        gObjectEvents[i].previousElevation              = questLogObjectEvents[i].previousElevation;
-        gObjectEvents[i].graphicsId                     = questLogObjectEvents[i].graphicsId;
-        gObjectEvents[i].movementType                   = questLogObjectEvents[i].movementType;
-        gObjectEvents[i].trainerType                    = questLogObjectEvents[i].trainerType;
-        gObjectEvents[i].localId                        = questLogObjectEvents[i].localId;
-        gObjectEvents[i].mapNum                         = questLogObjectEvents[i].mapNum;
-        gObjectEvents[i].mapGroup                       = questLogObjectEvents[i].mapGroup;
-        gObjectEvents[i].currentCoords.x                = questLogObjectEvents[i].x;
-        gObjectEvents[i].currentCoords.y                = questLogObjectEvents[i].y;
-        gObjectEvents[i].trainerRange_berryTreeId       = questLogObjectEvents[i].trainerRange_berryTreeId;
-        gObjectEvents[i].previousMetatileBehavior       = questLogObjectEvents[i].previousMetatileBehavior;
-        gObjectEvents[i].directionSequenceIndex         = questLogObjectEvents[i].directionSequenceIndex;
-        gObjectEvents[i].playerCopyableMovement         = questLogObjectEvents[i].animId;
-
-        for (j = 0; j < OBJECT_EVENT_TEMPLATES_COUNT; j++)
-        {
-            if (gObjectEvents[i].localId == templates[j].localId)
-            {
-                gObjectEvents[i].initialCoords.x = templates[j].x + MAP_OFFSET;
-                gObjectEvents[i].initialCoords.y = templates[j].y + MAP_OFFSET;
-                gObjectEvents[i].rangeX = templates[j].movementRangeX;
-                gObjectEvents[i].rangeY = templates[j].movementRangeY;
-            }
-        }
-
-        gObjectEvents[i].currentMetatileBehavior = MapGridGetMetatileBehaviorAt(gObjectEvents[i].currentCoords.x, gObjectEvents[i].currentCoords.y);
-        if (gObjectEvents[i].previousMetatileBehavior == MapGridGetMetatileBehaviorAt((s16)(gObjectEvents[i].currentCoords.x), (s16)(gObjectEvents[i].currentCoords.y)))
-        {
-            gObjectEvents[i].previousCoords.x = gObjectEvents[i].currentCoords.x;
-            gObjectEvents[i].previousCoords.y = gObjectEvents[i].currentCoords.y;
-        }
-        else if (gObjectEvents[i].previousMetatileBehavior == MapGridGetMetatileBehaviorAt((s16)(gObjectEvents[i].currentCoords.x - 1), (s16)(gObjectEvents[i].currentCoords.y)))
-        {
-            gObjectEvents[i].previousCoords.x = gObjectEvents[i].currentCoords.x - 1;
-            gObjectEvents[i].previousCoords.y = gObjectEvents[i].currentCoords.y;
-        }
-        else if (gObjectEvents[i].previousMetatileBehavior == MapGridGetMetatileBehaviorAt((s16)(gObjectEvents[i].currentCoords.x + 1), (s16)(gObjectEvents[i].currentCoords.y)))
-        {
-            gObjectEvents[i].previousCoords.x = gObjectEvents[i].currentCoords.x + 1;
-            gObjectEvents[i].previousCoords.y = gObjectEvents[i].currentCoords.y;
-        }
-        else if (gObjectEvents[i].previousMetatileBehavior == MapGridGetMetatileBehaviorAt((s16)(gObjectEvents[i].currentCoords.x), (s16)(gObjectEvents[i].currentCoords.y - 1)))
-        {
-            gObjectEvents[i].previousCoords.x = gObjectEvents[i].currentCoords.x;
-            gObjectEvents[i].previousCoords.y = gObjectEvents[i].currentCoords.y - 1;
-        }
-        else if (gObjectEvents[i].previousMetatileBehavior == MapGridGetMetatileBehaviorAt((s16)(gObjectEvents[i].currentCoords.x), (s16)(gObjectEvents[i].currentCoords.y + 1)))
-        {
-            gObjectEvents[i].previousCoords.x = gObjectEvents[i].currentCoords.x;
-            gObjectEvents[i].previousCoords.y = gObjectEvents[i].currentCoords.y + 1;
-        }
-    }
-
-    CpuCopy16(gObjectEvents, gSaveBlock1Ptr->objectEvents, sizeof(gObjectEvents));
-}
-
-void QL_TryStopSurfing(void)
-{
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-    {
-        s16 x, y;
-
-        PlayerGetDestCoords(&x, &y);
-        if (!MetatileBehavior_IsSurfable(MapGridGetMetatileBehaviorAt(x, y)) && TestPlayerAvatarFlags(PLAYER_AVATAR_FLAG_SURFING))
-        {
-            struct ObjectEvent * objectEvent = &gObjectEvents[gPlayerAvatar.objectEventId];
-            SetPlayerAvatarTransitionFlags(PLAYER_AVATAR_FLAG_ON_FOOT);
-            DestroySprite(&gSprites[objectEvent->fieldEffectSpriteId]);
-        }
-    }
-}
diff --git a/src/quest_log_player.c b/src/quest_log_player.c
deleted file mode 100644
index 6559bd4e7..000000000
--- a/src/quest_log_player.c
+++ /dev/null
@@ -1,197 +0,0 @@
-#include "global.h"
-#include "bike.h"
-#include "script.h"
-#include "task.h"
-#include "field_player_avatar.h"
-#include "event_object_movement.h"
-#include "field_effect.h"
-#include "field_effect_helpers.h"
-#include "quest_log.h"
-#include "quest_log_player.h"
-
-static void QL_GfxTransition_Normal(void);
-static void QL_GfxTransition_Bike(void);
-static void QL_GfxTransition_Fish(void);
-static void Task_QLFishMovement(u8 taskId);
-static void QL_GfxTransition_StartSurf(void);
-static void QL_GfxTransition_VSSeeker(void);
-static void Task_QLVSSeekerMovement(u8 taskId);
-static void QL_GfxTransition_StopSurfSouth(void);
-static void QL_GfxTransition_StopSurfNorth(void);
-static void QL_GfxTransition_StopSurfWest(void);
-static void QL_GfxTransition_StopSurfEast(void);
-static void QL_SetObjectGraphicsId(struct ObjectEvent *object, u16 graphicsId);
-
-static void (*const sQLGfxTransitions[])(void) = {
-    [QL_PLAYER_GFX_NORMAL]      = QL_GfxTransition_Normal,
-    [QL_PLAYER_GFX_BIKE]        = QL_GfxTransition_Bike,
-    [QL_PLAYER_GFX_FISH]        = QL_GfxTransition_Fish,
-    [QL_PLAYER_GFX_SURF]        = QL_GfxTransition_StartSurf,
-    [QL_PLAYER_GFX_STOP_SURF_S] = QL_GfxTransition_StopSurfSouth,
-    [QL_PLAYER_GFX_STOP_SURF_N] = QL_GfxTransition_StopSurfNorth,
-    [QL_PLAYER_GFX_STOP_SURF_W] = QL_GfxTransition_StopSurfWest,
-    [QL_PLAYER_GFX_STOP_SURF_E] = QL_GfxTransition_StopSurfEast,
-    [QL_PLAYER_GFX_VSSEEKER]    = QL_GfxTransition_VSSeeker
-};
-
-void QuestLogUpdatePlayerSprite(u8 state)
-{
-    if (state < NELEMS(sQLGfxTransitions))
-        sQLGfxTransitions[state]();
-}
-
-bool32 QuestLogTryRecordPlayerAvatarGfxTransition(u8 state)
-{
-    if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_RECORDING)
-    {
-        QuestLogRecordPlayerAvatarGfxTransition(state);
-        return TRUE;
-    }
-    return FALSE;
-}
-
-void QuestLogCallUpdatePlayerSprite(u8 state)
-{
-    return QuestLogUpdatePlayerSprite(state);
-}
-
-static void QL_GfxTransition_Normal(void)
-{
-    struct ObjectEvent *objectEvent = &gObjectEvents[gPlayerAvatar.objectEventId];
-    QL_SetObjectGraphicsId(objectEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_NORMAL));
-    ObjectEventTurn(objectEvent, objectEvent->movementDirection);
-    SetPlayerAvatarStateMask(PLAYER_AVATAR_FLAG_ON_FOOT);
-}
-
-static void QL_GfxTransition_Bike(void)
-{
-    struct ObjectEvent *objectEvent = &gObjectEvents[gPlayerAvatar.objectEventId];
-    QL_SetObjectGraphicsId(objectEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_MACH_BIKE));
-    ObjectEventTurn(objectEvent, objectEvent->movementDirection);
-    SetPlayerAvatarStateMask(PLAYER_AVATAR_FLAG_MACH_BIKE);
-    BikeClearState(0, 0);
-}
-
-static void QL_GfxTransition_Fish(void)
-{
-    struct ObjectEvent *objectEvent = &gObjectEvents[gPlayerAvatar.objectEventId];
-    struct Sprite *sprite = &gSprites[objectEvent->spriteId];
-
-    if (gQuestLogPlaybackState == QL_PLAYBACK_STATE_RUNNING || gQuestLogPlaybackState == QL_PLAYBACK_STATE_ACTION_END)
-    {
-        u8 taskId;
-        LockPlayerFieldControls();
-        gPlayerAvatar.preventStep = TRUE;
-        taskId = CreateTask(Task_QLFishMovement, 0xFF);
-        gTasks[taskId].data[0] = 0;
-    }
-    else
-    {
-        QL_SetObjectGraphicsId(objectEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_FISHING));
-        StartSpriteAnim(sprite, GetFishingDirectionAnimNum(objectEvent->facingDirection));
-    }
-}
-
-static void Task_QLFishMovement(u8 taskId)
-{
-    struct ObjectEvent *objectEvent = &gObjectEvents[gPlayerAvatar.objectEventId];
-    struct Sprite *sprite = &gSprites[objectEvent->spriteId];
-
-    switch (gTasks[taskId].data[0])
-    {
-        case 0:
-            ObjectEventClearHeldMovementIfActive(objectEvent);
-            objectEvent->enableAnim = TRUE;
-            QL_SetObjectGraphicsId(objectEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_FISHING));
-            StartSpriteAnim(sprite, GetFishingDirectionAnimNum(objectEvent->facingDirection));
-            gTasks[taskId].data[0]++;
-            gTasks[taskId].data[1] = 0;
-            break;
-        case 1:
-            AlignFishingAnimationFrames(sprite);
-            if (gTasks[taskId].data[1] < 60)
-                gTasks[taskId].data[1]++;
-            else
-                gTasks[taskId].data[0]++;
-            break;
-        case 2:
-            StartSpriteAnim(sprite, GetFishingNoCatchDirectionAnimNum(GetPlayerFacingDirection()));
-            gTasks[taskId].data[0]++;
-            break;
-        case 3:
-            AlignFishingAnimationFrames(sprite);
-            if (sprite->animEnded)
-            {
-                if (!(gPlayerAvatar.flags & PLAYER_AVATAR_FLAG_SURFING))
-                    QL_SetObjectGraphicsId(objectEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_NORMAL));
-                else
-                    QL_SetObjectGraphicsId(objectEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_SURFING));
-                ObjectEventTurn(objectEvent, objectEvent->movementDirection);
-                sprite->x2 = 0;
-                sprite->y2 = 0;
-                UnlockPlayerFieldControls();
-                DestroyTask(taskId);
-            }
-            break;
-    }
-}
-
-static void QL_GfxTransition_StartSurf(void)
-{
-    struct ObjectEvent *objectEvent = &gObjectEvents[gPlayerAvatar.objectEventId];
-    u8 fieldEffectId;
-
-    if (!(gPlayerAvatar.flags & PLAYER_AVATAR_FLAG_SURFING))
-    {
-        QL_SetObjectGraphicsId(objectEvent, GetPlayerAvatarGraphicsIdByStateId(PLAYER_AVATAR_STATE_SURFING));
-        ObjectEventTurn(objectEvent, objectEvent->movementDirection);
-        SetPlayerAvatarStateMask(PLAYER_AVATAR_FLAG_SURFING);
-        gFieldEffectArguments[0] = objectEvent->currentCoords.x;
-        gFieldEffectArguments[1] = objectEvent->currentCoords.y;
-        gFieldEffectArguments[2] = gPlayerAvatar.objectEventId;
-        fieldEffectId = FieldEffectStart(FLDEFF_SURF_BLOB);
-        objectEvent->fieldEffectSpriteId = fieldEffectId;
-        SetSurfBlob_BobState(fieldEffectId, BOB_PLAYER_AND_MON);
-    }
-}
-
-static void QL_GfxTransition_VSSeeker(void)
-{
-    FieldEffectStart(FLDEFF_USE_VS_SEEKER);
-    CreateTask(Task_QLVSSeekerMovement, 0x00);
-}
-
-static void Task_QLVSSeekerMovement(u8 taskId)
-{
-    if (!FieldEffectActiveListContains(FLDEFF_USE_VS_SEEKER))
-    {
-        UnfreezeObjectEvents();
-        UnlockPlayerFieldControls();
-        DestroyTask(taskId);
-    }
-}
-
-static void QL_SetObjectGraphicsId(struct ObjectEvent * object, u16 graphicsId)
-{
-    ObjectEventSetGraphicsId(object, graphicsId);
-}
-
-static void QL_GfxTransition_StopSurfSouth(void)
-{
-    CreateStopSurfingTask_NoMusicChange(DIR_SOUTH);
-}
-
-static void QL_GfxTransition_StopSurfNorth(void)
-{
-    CreateStopSurfingTask_NoMusicChange(DIR_NORTH);
-}
-
-static void QL_GfxTransition_StopSurfWest(void)
-{
-    CreateStopSurfingTask_NoMusicChange(DIR_WEST);
-}
-
-static void QL_GfxTransition_StopSurfEast(void)
-{
-    CreateStopSurfingTask_NoMusicChange(DIR_EAST);
-}
diff --git a/src/region_map.c b/src/region_map.c
index 078c29394..97fc5773f 100644
--- a/src/region_map.c
+++ b/src/region_map.c
@@ -4012,7 +4012,6 @@ static void SetFlyWarpDestination(u16 mapsec)
     if (sMapFlyDestinations[idx][2])
     {
         SetWarpDestinationToHealLocation(sMapFlyDestinations[idx][2]);
-        SetUsedFlyQuestLogEvent(sMapFlyDestinations[idx]);
     }
     else
     {
diff --git a/src/reshow_battle_screen.c b/src/reshow_battle_screen.c
index 5d9b5ad39..533e6a4f1 100644
--- a/src/reshow_battle_screen.c
+++ b/src/reshow_battle_screen.c
@@ -3,7 +3,7 @@
 #include "link.h"
 #include "data.h"
 #include "scanline_effect.h"
-#include "help_system.h"
+
 #include "battle.h"
 #include "battle_interface.h"
 #include "battle_anim.h"
@@ -29,24 +29,6 @@ void ReshowBattleScreenAfterMenu(void)
     SetGpuReg(REG_OFFSET_MOSAIC, 0);
     gBattleScripting.reshowMainState = 0;
     gBattleScripting.reshowHelperState = 0;
-    if (!(gBattleTypeFlags & BATTLE_TYPE_LINK))
-    {
-        if (gBattleTypeFlags & BATTLE_TYPE_TRAINER)
-        {
-            if (gBattleTypeFlags & BATTLE_TYPE_DOUBLE)
-                SetHelpContext(HELPCONTEXT_TRAINER_BATTLE_DOUBLE);
-            else
-                SetHelpContext(HELPCONTEXT_TRAINER_BATTLE_SINGLE);
-        }
-        else if (gBattleTypeFlags & BATTLE_TYPE_SAFARI)
-        {
-            SetHelpContext(HELPCONTEXT_SAFARI_BATTLE);
-        }
-        else
-        {
-            SetHelpContext(HELPCONTEXT_WILD_BATTLE);
-        }
-    }
     SetMainCallback2(CB2_ReshowBattleScreenAfterMenu);
 }
 
diff --git a/src/save_failed_screen.c b/src/save_failed_screen.c
index e1c09dad7..6e819f015 100644
--- a/src/save_failed_screen.c
+++ b/src/save_failed_screen.c
@@ -7,7 +7,7 @@
 #include "text.h"
 
 #include "decompress.h"
-#include "help_system.h"
+#include "window.h"
 #include "m4a.h"
 #include "save.h"
 #include "strings.h"
@@ -45,13 +45,9 @@ bool32 RunSaveFailedScreen(void)
         if (!sIsInSaveFailedScreen)
             return FALSE;
         m4aMPlayVolumeControl(&gMPlayInfo_BGM, TRACKS_ALL, 128);
-        SaveCallbacks();
         sSaveFailedScreenState = 1;
         break;
     case 1:
-        SaveMapTiles();
-        SaveMapGPURegs();
-        SaveMapTextColors();
         BlankPalettes();
         SetGpuReg(REG_OFFSET_DISPCNT, 0);
         sSaveFailedScreenState = 2;
@@ -94,15 +90,11 @@ bool32 RunSaveFailedScreen(void)
         break;
     case 7:
         SetGpuReg(REG_OFFSET_DISPCNT, 0);
-        RestoreMapTiles();
         BlankPalettes();
         sSaveFailedScreenState = 8;
         break;
     case 8:
         m4aMPlayVolumeControl(&gMPlayInfo_BGM, TRACKS_ALL, 256);
-        RestoreMapTextColors();
-        RestoreGPURegs();
-        RestoreCallbacks();
         sIsInSaveFailedScreen = FALSE;
         sSaveFailedScreenState = 0;
         break;
@@ -159,7 +151,6 @@ static void PrintTextOnSaveFailedScreen(const u8 *str)
 {
     GenerateFontHalfRowLookupTable(TEXT_COLOR_DARK_GRAY, TEXT_COLOR_WHITE, TEXT_COLOR_LIGHT_GRAY);
     CpuFill16(PIXEL_FILL(1) | (PIXEL_FILL(1) << 8), gDecompressionBuffer + 0x20, 0x2300);
-    HelpSystemRenderText(2, gDecompressionBuffer + 0x20, str, 2, 2, 28, 10);
     RequestDmaCopyFromCharBuffer();
 }
 
diff --git a/src/scrcmd.c b/src/scrcmd.c
index 00b576f0c..b65101008 100644
--- a/src/scrcmd.c
+++ b/src/scrcmd.c
@@ -12,7 +12,7 @@
 #include "item.h"
 #include "overworld.h"
 #include "field_screen_effect.h"
-#include "quest_log.h"
+
 #include "map_preview_screen.h"
 #include "fieldmap.h"
 #include "field_move.h"
@@ -56,10 +56,7 @@ extern const u8 *gStdScripts[];
 extern const u8 *gStdScriptsEnd[];
 
 static bool8 ScriptContext_NextCommandEndsScript(struct ScriptContext * ctx);
-static u8 ScriptContext_GetQuestLogInput(struct ScriptContext * ctx);
-
 static EWRAM_DATA ptrdiff_t sAddressOffset = 0; // For relative addressing in vgoto etc., used by saved scripts (e.g. Mystery Event)
-static EWRAM_DATA u8 sQuestLogWaitButtonPressTimer = 0;
 static EWRAM_DATA u16 sPauseCounter = 0;
 static EWRAM_DATA u16 sMovingNpcId = 0;
 static EWRAM_DATA u16 sMovingNpcMapGroup = 0;
@@ -606,7 +603,6 @@ bool8 ScrCmd_additem(struct ScriptContext * ctx)
     Script_RequestEffects(SCREFF_V1 | SCREFF_SAVE);
 
     gSpecialVar_Result = AddBagItem(itemId, quantity);
-    TrySetObtainedItemQuestLogEvent(itemId);
     return FALSE;
 }
 
@@ -754,7 +750,6 @@ bool8 ScrCmd_setworldmapflag(struct ScriptContext * ctx)
     u16 value = ScriptReadHalfword(ctx);
     
     Script_RequestEffects(SCREFF_V1 | SCREFF_SAVE);
-    QuestLog_RecordEnteredMap(value);
     MapPreview_SetFlag(value);
     return FALSE;
 }
@@ -1182,8 +1177,6 @@ bool8 ScrCmd_playbgm(struct ScriptContext * ctx)
 
     Script_RequestEffects(SCREFF_V1 | SCREFF_SAVE | SCREFF_HARDWARE);
 
-    if (QL_IS_PLAYBACK_STATE)
-        return FALSE;
     if (save == TRUE)
         Overworld_SetSavedMusic(songId);
     PlayNewMapMusic(songId);
@@ -1202,8 +1195,6 @@ bool8 ScrCmd_fadedefaultbgm(struct ScriptContext * ctx)
 {
     Script_RequestEffects(SCREFF_V1 | SCREFF_HARDWARE);
 
-    if (QL_IS_PLAYBACK_STATE)
-        return FALSE;
     Overworld_ChangeMusicToDefault();
     return FALSE;
 }
@@ -1214,8 +1205,6 @@ bool8 ScrCmd_fadenewbgm(struct ScriptContext * ctx)
     
     Script_RequestEffects(SCREFF_V1 | SCREFF_SAVE | SCREFF_HARDWARE);
 
-    if (QL_IS_PLAYBACK_STATE)
-        return FALSE;
     Overworld_ChangeMusicTo(music);
     return FALSE;
 }
@@ -1226,8 +1215,6 @@ bool8 ScrCmd_fadeoutbgm(struct ScriptContext * ctx)
 
     Script_RequestEffects(SCREFF_V1 | SCREFF_SAVE | SCREFF_HARDWARE);
 
-    if (QL_IS_PLAYBACK_STATE)
-        return FALSE;
     if (speed != 0)
         FadeOutBGMTemporarily(4 * speed);
     else
@@ -1241,9 +1228,6 @@ bool8 ScrCmd_fadeinbgm(struct ScriptContext * ctx)
     u8 speed = ScriptReadByte(ctx);
 
     Script_RequestEffects(SCREFF_V1 | SCREFF_SAVE | SCREFF_HARDWARE);
-
-    if (QL_IS_PLAYBACK_STATE)
-        return FALSE;
     if (speed != 0)
         FadeInBGM(4 * speed);
     else
@@ -1666,7 +1650,6 @@ bool8 ScrCmd_loadhelp(struct ScriptContext * ctx)
 bool8 ScrCmd_unloadhelp(struct ScriptContext * ctx)
 {
     Script_RequestEffects(SCREFF_V1 | SCREFF_HARDWARE);
-    DestroyHelpMessageWindow_();
     return FALSE;
 }
 
@@ -1705,34 +1688,6 @@ static bool8 WaitForAorBPress(void)
     if (JOY_NEW(B_BUTTON))
         return TRUE;
 
-    if (ScriptContext_NextCommandEndsScript(sQuestLogScriptContextPtr) == TRUE)
-    {
-        u8 qlogInput = ScriptContext_GetQuestLogInput(sQuestLogScriptContextPtr);
-        RegisterQuestLogInput(qlogInput);
-        if (qlogInput != QL_INPUT_OFF)
-        {
-            if (gQuestLogState != QL_STATE_PLAYBACK)
-            {
-                ClearMsgBoxCancelableState();
-                if (qlogInput != QL_INPUT_A && qlogInput != QL_INPUT_B)
-                    SetQuestLogInputIsDpadFlag();
-                else
-                {
-                    ClearQuestLogInput();
-                    ClearQuestLogInputIsDpadFlag();
-                }
-                return TRUE;
-            }
-        }
-    }
-    if (QL_GetPlaybackState() == QL_PLAYBACK_STATE_RUNNING || gQuestLogState == QL_STATE_PLAYBACK)
-    {
-        if (sQuestLogWaitButtonPressTimer == 120)
-            return TRUE;
-        else
-            sQuestLogWaitButtonPressTimer++;
-    }
-
     return FALSE;
 }
 
@@ -1751,49 +1706,12 @@ static bool8 ScriptContext_NextCommandEndsScript(struct ScriptContext * ctx)
         return TRUE;
 }
 
-static u8 ScriptContext_GetQuestLogInput(struct ScriptContext * ctx)
-{
-    if (JOY_HELD(DPAD_UP) && gSpecialVar_Facing != DIR_NORTH)
-        return QL_INPUT_UP;
-
-    if (JOY_HELD(DPAD_DOWN) && gSpecialVar_Facing != DIR_SOUTH)
-        return QL_INPUT_DOWN;
-
-    if (JOY_HELD(DPAD_LEFT) && gSpecialVar_Facing != DIR_WEST)
-        return QL_INPUT_LEFT;
-
-    if (JOY_HELD(DPAD_RIGHT) && gSpecialVar_Facing != DIR_EAST)
-        return QL_INPUT_RIGHT;
-
-    if (JOY_NEW(L_BUTTON))
-        return QL_INPUT_L;
-
-    if (JOY_HELD(R_BUTTON))
-        return QL_INPUT_R;
-
-    if (JOY_HELD(START_BUTTON))
-        return QL_INPUT_START;
 
-    if (JOY_HELD(SELECT_BUTTON))
-        return QL_INPUT_SELECT;
-
-    if (JOY_NEW(A_BUTTON))
-        return QL_INPUT_A;
-
-    if (JOY_NEW(B_BUTTON))
-        return QL_INPUT_B;
-
-    return QL_INPUT_OFF;
-}
 
 bool8 ScrCmd_waitbuttonpress(struct ScriptContext * ctx)
 {
     Script_RequestEffects(SCREFF_V1 | SCREFF_HARDWARE);
 
-    sQuestLogScriptContextPtr = ctx;
-
-    if (QL_GetPlaybackState() == QL_PLAYBACK_STATE_RUNNING || gQuestLogState == QL_STATE_PLAYBACK)
-        sQuestLogWaitButtonPressTimer = 0;
     SetupNativeScript(ctx, WaitForAorBPress);
     return TRUE;
 }
@@ -2382,7 +2300,7 @@ bool8 ScrCmd_showmoneybox(struct ScriptContext * ctx)
     u8 y = ScriptReadByte(ctx);
     u8 ignore = ScriptReadByte(ctx);
 
-    if (!ignore && QL_AvoidDisplay(QL_DestroyAbortedDisplay) != TRUE)
+    if (!ignore)
     {
         Script_RequestEffects(SCREFF_V1 | SCREFF_HARDWARE);
 
@@ -2421,8 +2339,7 @@ bool8 ScrCmd_showcoinsbox(struct ScriptContext * ctx)
 
     Script_RequestEffects(SCREFF_V1 | SCREFF_HARDWARE);
 
-    if (QL_AvoidDisplay(QL_DestroyAbortedDisplay) != TRUE)
-        ShowCoinsWindow(GetCoins(), x, y);
+    ShowCoinsWindow(GetCoins(), x, y);
     return FALSE;
 }
 
diff --git a/src/script.c b/src/script.c
index a8b8a5352..2f3edf20d 100644
--- a/src/script.c
+++ b/src/script.c
@@ -1,7 +1,7 @@
 #include "global.h"
 #include "script.h"
 #include "event_data.h"
-#include "quest_log.h"
+
 #include "mystery_gift.h"
 #include "random.h"
 #include "trainer_see.h"
@@ -34,8 +34,6 @@ static struct ScriptContext sImmediateScriptContext;
 static bool8 sLockFieldControls;
 static u8 sMsgBoxWalkawayDisabled;
 static u8 sMsgBoxIsCancelable;
-static u8 sQuestLogInput;
-static u8 sQuestLogInputIsDpad;
 static u8 sMsgIsSignpost;
 
 extern ScrCmdFunc gScriptCmdTable[];
@@ -218,38 +216,6 @@ bool8 ArePlayerFieldControlsLocked(void)
     return sLockFieldControls;
 }
 
-void SetQuestLogInputIsDpadFlag(void)
-{
-    sQuestLogInputIsDpad = TRUE;
-}
-
-void ClearQuestLogInputIsDpadFlag(void)
-{
-    sQuestLogInputIsDpad = FALSE;
-}
-
-bool8 IsQuestLogInputDpad(void)
-{
-    if(sQuestLogInputIsDpad == TRUE)
-        return TRUE;
-    else
-        return FALSE;
-}
-
-void RegisterQuestLogInput(u8 var)
-{
-    sQuestLogInput = var;
-}
-
-void ClearQuestLogInput(void)
-{
-    sQuestLogInput = 0;
-}
-
-u8 GetRegisteredQuestLogInput(void)
-{
-    return sQuestLogInput;
-}
 
 void DisableMsgBoxWalkaway(void)
 {
@@ -357,7 +323,6 @@ void ScriptContext_SetupScript(const u8 *ptr)
 {
     ClearMsgBoxCancelableState();
     EnableMsgBoxWalkaway();
-    ClearQuestLogInputIsDpadFlag();
 
     InitScriptContext(&sGlobalScriptContext, gScriptCmdTable, gScriptCmdTableEnd);
     SetupBytecodeScript(&sGlobalScriptContext, ptr);
@@ -473,8 +438,6 @@ bool8 TryRunOnFrameMapScript(void)
 {
     u8 *ptr;
 
-    if (gQuestLogState == QL_STATE_PLAYBACK_LAST)
-        return FALSE;
 
     ptr = MapHeaderCheckScriptTable(MAP_SCRIPT_ON_FRAME_TABLE);
 
diff --git a/src/script_menu.c b/src/script_menu.c
index ff0dc00b3..2d5c1dde4 100644
--- a/src/script_menu.c
+++ b/src/script_menu.c
@@ -3,7 +3,7 @@
 #include "menu.h"
 #include "task.h"
 #include "script_menu.h"
-#include "quest_log.h"
+
 #include "event_data.h"
 #include "field_specials.h"
 #include "item_icon.h"
@@ -1051,7 +1051,7 @@ void DrawMultichoiceMenuInternal(u8 left, u8 top, u8 multichoiceId, bool8 ignore
     u8 height;
     u8 windowId;
 
-    if ((ignoreBPress & 2) || QL_AvoidDisplay(QL_DestroyAbortedDisplay) != TRUE)
+    if ((ignoreBPress & 2))
     {
         ignoreBPress &= 1;
         strWidth = 0;
@@ -1254,9 +1254,6 @@ bool8 ScriptMenu_YesNo(u8 unused, u8 stuff)
         return FALSE;
     gSpecialVar_Result = SCR_MENU_UNSET;
 
-    if (QL_AvoidDisplay(QL_DestroyAbortedDisplay))
-        return TRUE;
-
     DisplayYesNoMenuDefaultYes();
     CreateTask(Task_YesNoMenu_HandleInput, 80);
     return TRUE;
@@ -1301,8 +1298,6 @@ bool8 ScriptMenu_MultichoiceGrid(u8 left, u8 top, u8 multichoiceId, bool8 ignore
         return FALSE;
     gSpecialVar_Result = SCR_MENU_UNSET;
 
-    if (QL_AvoidDisplay(QL_DestroyAbortedDisplay) == TRUE)
-        return TRUE;
 
     list = sMultichoiceLists[multichoiceId].list;
     count = sMultichoiceLists[multichoiceId].count;
@@ -1444,8 +1439,6 @@ bool8 ScriptMenu_ShowPokemonPic(u16 species, u8 x, u8 y)
 {
     u8 spriteId;
     u8 taskId;
-    if (QL_AvoidDisplay(QL_DestroyAbortedDisplay) == TRUE)
-        return TRUE;
     if (FindTaskIdByFunc(Task_ScriptShowMonPic) != TASK_NONE)
         return FALSE;
     spriteId = CreateMonSprite_PicBox(species, 8 * x + 40, 8 * y + 40, FALSE);
@@ -1530,8 +1523,6 @@ bool8 OpenMuseumFossilPic(void)
 {
     u8 spriteId;
     u8 taskId;
-    if (QL_AvoidDisplay(QL_DestroyAbortedDisplay) == TRUE)
-        return TRUE;
     if (FindTaskIdByFunc(Task_WaitMuseumFossilPic) != TASK_NONE)
         return FALSE;
     if (gSpecialVar_0x8004 == SPECIES_KABUTOPS)
@@ -1583,32 +1574,6 @@ static void DestroyScriptMenuWindow(u8 windowId)
     RemoveWindow(windowId);
 }
 
-void QL_DestroyAbortedDisplay(void)
-{
-    u8 taskId;
-    s16 *data;
-    ScriptContext_SetupScript(EventScript_ReleaseEnd);
-
-    taskId = FindTaskIdByFunc(Task_ScriptShowMonPic);
-    if (taskId != TASK_NONE)
-    {
-        data = gTasks[taskId].data;
-        if (tState < 2)
-            FreeResourcesAndDestroySprite(&gSprites[tSpriteId], tSpriteId);
-    }
-
-    taskId = FindTaskIdByFunc(Task_WaitMuseumFossilPic);
-    if (taskId != TASK_NONE)
-    {
-        data = gTasks[taskId].data;
-        if (tState < 2)
-        {
-            DestroySprite(&gSprites[tSpriteId]);
-            FreeSpriteTilesByTag(GFXTAG_FOSSIL);
-        }
-    }
-}
-
 void DrawSeagallopDestinationMenu(void)
 {
     // 8004 = Starting location
@@ -1622,8 +1587,6 @@ void DrawSeagallopDestinationMenu(void)
     u8 i;
     gSpecialVar_Result = SCR_MENU_UNSET;
 
-    if (QL_AvoidDisplay(QL_DestroyAbortedDisplay) == TRUE)
-        return;
 
     if (gSpecialVar_0x8005 == 1)
     {
diff --git a/src/seagallop.c b/src/seagallop.c
index 04e719085..e12de8356 100644
--- a/src/seagallop.c
+++ b/src/seagallop.c
@@ -4,7 +4,7 @@
 #include "trainer_pokemon_sprites.h"
 #include "text_window.h"
 #include "task.h"
-#include "help_system.h"
+
 #include "overworld.h"
 #include "event_data.h"
 #include "field_fadetransition.h"
@@ -174,7 +174,6 @@ static const struct SpriteTemplate sWakeSpriteTemplate = {
 void DoSeagallopFerryScene(void)
 {
     SetVBlankCallback(NULL);
-    HelpSystem_Disable();
     SetMainCallback2(CB2_SetUpSeagallopScene);
 }
 
@@ -297,7 +296,6 @@ static void Task_Seagallop_2(u8 taskId)
     if (BGMusicStopped() && !gPaletteFade.active)
     {
         Task_Seagallop_3();
-        HelpSystem_Enable();
         DestroyTask(taskId);
     }
 }
diff --git a/src/shop.c b/src/shop.c
index 966435709..66b317963 100644
--- a/src/shop.c
+++ b/src/shop.c
@@ -24,7 +24,7 @@
 #include "event_object_movement.h"
 #include "money.h"
 #include "move.h"
-#include "quest_log.h"
+
 #include "script.h"
 #include "text_window.h"
 #include "constants/field_weather.h"
@@ -81,7 +81,6 @@ EWRAM_DATA u16 (*gShopTilemapBuffer3)[0x400] = {0};
 EWRAM_DATA u16 (*gShopTilemapBuffer4)[0x400] = {0};
 EWRAM_DATA struct ListMenuItem *sShopMenuListMenu = {0};
 static EWRAM_DATA u8 (*sShopMenuItemStrings)[ITEM_NAME_LENGTH + 2] = {0};
-EWRAM_DATA struct QuestLogEvent_Shop sHistory[2] = {0};
 
 //Function Declarations
 static u8 CreateShopMenu(u8 martType);
@@ -138,7 +137,6 @@ static void ExitBuyMenu(u8 taskId);
 static void Task_ExitBuyMenu(u8 taskId);
 static void DebugFunc_PrintPurchaseDetails(u8 taskId);
 static void DebugFunc_PrintShopMenuHistoryBeforeClearMaybe(void);
-static void RecordTransactionForQuestLog(void);
 static void BuyMenuInitWindows(bool32 isSellingTM);
 static void BuyMenuPrint(u8 windowId, u8 font, const u8 *text, u8 x, u8 y, u8 letterSpacing, u8 lineSpacing, u8 speed, u8 color);
 static void BuyMenuDisplayMessage(u8 taskId, const u8 *text, TaskFunc callback);
@@ -441,7 +439,6 @@ static void CB2_GoToSellMenu(void)
 static void Task_HandleShopMenuQuit(u8 taskId)
 {
     ClearShopMenuWindow();
-    RecordTransactionForQuestLog();
     DestroyTask(taskId);
     if (sShopData.callback != NULL)
         sShopData.callback();
@@ -1175,7 +1172,6 @@ static void BuyMenuTryMakePurchase(u8 taskId)
         GetSetItemObtained(tItemId, FLAG_SET_ITEM_OBTAINED);
         BuyMenuDisplayMessage(taskId, gText_HereYouGoThankYou, BuyMenuSubtractMoney);
         DebugFunc_PrintPurchaseDetails(taskId);
-        RecordItemTransaction(tItemId, tItemCount, QL_EVENT_BOUGHT_ITEM - QL_EVENT_USED_POKEMART);
     }
     else
     {
@@ -1270,68 +1266,6 @@ static void DebugFunc_PrintShopMenuHistoryBeforeClearMaybe(void)
 {
 }
 
-// Records a transaction during a single shopping session.
-// This is for the Quest Log to save information about the player's purchases/sales when they finish.
-void RecordItemTransaction(u16 itemId, u16 quantity, u8 logEventId)
-{
-    struct QuestLogEvent_Shop *history;
-
-    // There should only be a single entry for buying/selling respectively,
-    // so if one has already been created then get it first.
-    if (sHistory[0].logEventId == logEventId)
-    {
-        history = &sHistory[0];
-    }
-    else if (sHistory[1].logEventId == logEventId)
-    {
-        history = &sHistory[1];
-    }
-    else
-    {
-        // First transaction of this type, save it in an empty slot
-        if (sHistory[0].logEventId == 0)
-            history = &sHistory[0];
-        else
-            history = &sHistory[1];
-        history->logEventId = logEventId;
-    }
-
-    // Set flag if this isn't the first time we've bought/sold in this session
-    if (history->lastItemId != ITEM_NONE)
-        history->hasMultipleTransactions = TRUE;
-
-    history->lastItemId = itemId;
-
-    // Add to number of items bought/sold
-    if (history->itemQuantity < 999)
-    {
-        history->itemQuantity += quantity;
-        if (history->itemQuantity > 999)
-            history->itemQuantity = 999;
-    }
-
-    // Add to amount of money spent buying or earned selling
-    if (history->totalMoney < 999999)
-    {
-        // logEventId will either be 1 (bought) or 2 (sold)
-        // so for buying it will add the full price and selling will add half price
-        history->totalMoney += (ItemId_GetPrice(itemId) >> (logEventId - 1)) * quantity;
-        if (history->totalMoney > 999999)
-            history->totalMoney = 999999;
-    }
-}
-
-// Will record QL_EVENT_BOUGHT_ITEM and/or QL_EVENT_SOLD_ITEM, or nothing.
-static void RecordTransactionForQuestLog(void)
-{
-    u16 eventId = sHistory[0].logEventId;
-    if (eventId != 0)
-        SetQuestLogEvent(eventId + QL_EVENT_USED_POKEMART, (const u16 *)&sHistory[0]);
-
-    eventId = sHistory[1].logEventId;
-    if (eventId != 0)
-        SetQuestLogEvent(eventId + QL_EVENT_USED_POKEMART, (const u16 *)&sHistory[1]);
-}
 
 void CreatePokemartMenu(const u16 *itemsForSale)
 {
@@ -1339,9 +1273,6 @@ void CreatePokemartMenu(const u16 *itemsForSale)
     CreateShopMenu(MART_TYPE_REGULAR);
     SetShopMenuCallback(ScriptContext_Enable);
     DebugFunc_PrintShopMenuHistoryBeforeClearMaybe();
-    memset(&sHistory, 0, sizeof(sHistory));
-    sHistory[0].mapSec = gMapHeader.regionMapSectionId;
-    sHistory[1].mapSec = gMapHeader.regionMapSectionId;
 }
 
 void CreateDecorationShop1Menu(const u16 *itemsForSale)
diff --git a/src/slot_machine.c b/src/slot_machine.c
index c7722850b..c09a0f522 100644
--- a/src/slot_machine.c
+++ b/src/slot_machine.c
@@ -3,7 +3,7 @@
 #include "decompress.h"
 #include "task.h"
 #include "coins.h"
-#include "quest_log.h"
+
 #include "overworld.h"
 #include "menu.h"
 #include "text_window.h"
@@ -1008,7 +1008,6 @@ static void MainTask_SlotsGameLoop(u8 taskId)
         }
         break;
     case 2:
-        SetQLPlayedTheSlots();
         CalcSlotBias();
         StartReels();
         sSlotMachineState->currentReel = 0;
diff --git a/src/sound.c b/src/sound.c
index 9973648e2..46029b61e 100644
--- a/src/sound.c
+++ b/src/sound.c
@@ -4,7 +4,7 @@
 #include "battle.h"
 #include "m4a.h"
 #include "pokemon.h"
-#include "quest_log.h"
+
 #include "constants/cries.h"
 #include "constants/songs.h"
 #include "constants/sound.h"
@@ -179,17 +179,10 @@ bool8 IsNotWaitingForBGMStop(void)
 void PlayFanfareByFanfareNum(u8 fanfareNum)
 {
     u16 songNum;
-    if(gQuestLogState == QL_STATE_PLAYBACK)
-    {
-        sFanfareCounter = 0xFF;
-    }
-    else
-    {
-        m4aMPlayStop(&gMPlayInfo_BGM);
-        songNum = sFanfares[fanfareNum].songNum;
-        sFanfareCounter = sFanfares[fanfareNum].duration;
-        m4aSongNumStart(songNum);
-    }
+    m4aMPlayStop(&gMPlayInfo_BGM);
+    songNum = sFanfares[fanfareNum].songNum;
+    sFanfareCounter = sFanfares[fanfareNum].duration;
+    m4aSongNumStart(songNum);
 }
 
 bool8 WaitFanfare(bool8 stop)
@@ -366,11 +359,8 @@ void PlayCry_DuckNoRestore(u16 species, s8 pan, u8 mode)
 
 void PlayCry_Script(u16 species, u8 mode)
 {
-    if (!QL_IS_PLAYBACK_STATE) // This check is exclusive to FR/LG
-    {
-        m4aMPlayVolumeControl(&gMPlayInfo_BGM, TRACKS_ALL, 85);
-        PlayCryInternal(species, 0, CRY_VOLUME, CRY_PRIORITY_NORMAL, mode);
-    }
+    m4aMPlayVolumeControl(&gMPlayInfo_BGM, TRACKS_ALL, 85);
+    PlayCryInternal(species, 0, CRY_VOLUME, CRY_PRIORITY_NORMAL, mode);
     gPokemonCryBGMDuckingCounter = 2;
     RestoreBGMVolumeAfterPokemonCry();
 }
@@ -554,7 +544,7 @@ void PlayBGM(u16 songNum)
 
 void PlaySE(u16 songNum)
 {
-    if (gDisableMapMusicChangeOnMapLoad == 0 && gQuestLogState != QL_STATE_PLAYBACK)
+    if (gDisableMapMusicChangeOnMapLoad == 0)
         m4aSongNumStart(songNum);
 }
 
@@ -616,12 +606,10 @@ bool8 IsSpecialSEPlaying(void)
 
 void SetBGMVolume_SuppressHelpSystemReduction(u16 volume)
 {
-    gDisableHelpSystemVolumeReduce = TRUE;
     m4aMPlayVolumeControl(&gMPlayInfo_BGM, TRACKS_ALL, volume);
 }
 
 void BGMVolumeMax_EnableHelpSystemReduction(void)
 {
-    gDisableHelpSystemVolumeReduce = FALSE;
     m4aMPlayVolumeControl(&gMPlayInfo_BGM, TRACKS_ALL, 256);
 }
diff --git a/src/start_menu.c b/src/start_menu.c
index 903b8c198..8d43edce3 100644
--- a/src/start_menu.c
+++ b/src/start_menu.c
@@ -5,12 +5,12 @@
 #include "scanline_effect.h"
 #include "overworld.h"
 #include "link.h"
+#include "constants/battle.h"
 #include "pokedex.h"
 #include "item_menu.h"
 #include "party_menu.h"
 #include "save.h"
 #include "link_rfu.h"
-#include "help_message.h"
 #include "event_data.h"
 #include "fieldmap.h"
 #include "safari_zone.h"
@@ -25,7 +25,7 @@
 #include "event_object_movement.h"
 #include "event_object_lock.h"
 #include "script.h"
-#include "quest_log.h"
+
 #include "new_game.h"
 #include "event_scripts.h"
 #include "field_weather.h"
@@ -35,7 +35,7 @@
 #include "option_menu.h"
 #include "rtc.h"
 #include "save_menu_util.h"
-#include "help_system.h"
+
 #include "wild_encounter.h"
 #include "constants/songs.h"
 #include "constants/field_weather.h"
@@ -445,7 +445,7 @@ static s8 DoDrawStartMenu(void)
         break;
     case 6:
         sStartMenuCursorPos = InitMenuNormal(GetStartMenuWindowId(), FONT_NORMAL, 0, 0, 15, sNumStartMenuItems, sStartMenuCursorPos);
-        if (DEBUG_OVERWORLD_MENU != TRUE && !MenuHelpers_IsLinkActive() && InUnionRoom() != TRUE && gSaveBlock2Ptr->optionsButtonMode == OPTIONS_BUTTON_MODE_HELP)
+        if (DEBUG_OVERWORLD_MENU != TRUE && !MenuHelpers_IsLinkActive() && InUnionRoom() != TRUE)
             DrawHelpMessageWindowWithText(sStartMenuDescPointers[sStartMenuOrder[sStartMenuCursorPos]]);
         CopyWindowToVram(GetStartMenuWindowId(), COPYWIN_MAP);
         return TRUE;
@@ -527,17 +527,11 @@ static bool8 StartCB_HandleInput(void)
     {
         PlaySE(SE_SELECT);
         sStartMenuCursorPos = Menu_MoveCursor(-1);
-        if (DEBUG_OVERWORLD_MENU != TRUE && !MenuHelpers_IsLinkActive() && InUnionRoom() != TRUE && gSaveBlock2Ptr->optionsButtonMode == OPTIONS_BUTTON_MODE_HELP)
-            PrintTextOnHelpMessageWindow(sStartMenuDescPointers[sStartMenuOrder[sStartMenuCursorPos]], 2);
     }
     if (JOY_NEW(DPAD_DOWN))
     {
         PlaySE(SE_SELECT);
         sStartMenuCursorPos = Menu_MoveCursor(+1);
-        if (DEBUG_OVERWORLD_MENU != TRUE && !MenuHelpers_IsLinkActive() && InUnionRoom() != TRUE && gSaveBlock2Ptr->optionsButtonMode == OPTIONS_BUTTON_MODE_HELP)
-        {
-            PrintTextOnHelpMessageWindow(sStartMenuDescPointers[sStartMenuOrder[sStartMenuCursorPos]], 2);
-        }
     }
     if (JOY_NEW(A_BUTTON))
     {
@@ -555,8 +549,6 @@ static bool8 StartCB_HandleInput(void)
     {
         DestroySafariZoneStatsWindow();
         DestroyTimeWindow();
-        if (DEBUG_OVERWORLD_MENU != TRUE)
-            DestroyHelpMessageWindow_();
         CloseStartMenu();
         return TRUE;
     }
@@ -664,8 +656,6 @@ static bool8 StartMenuExitCallback(void)
 {
     DestroySafariZoneStatsWindow();
     DestroyTimeWindow();
-    if (DEBUG_OVERWORLD_MENU != TRUE)
-        DestroyHelpMessageWindow_();
     CloseStartMenu();
     return TRUE;
 }
@@ -688,8 +678,6 @@ static bool8 StartMenuSafariZoneRetireCallback(void)
 {
     DestroySafariZoneStatsWindow();
     DestroyTimeWindow();
-    if (DEBUG_OVERWORLD_MENU != TRUE)
-        DestroyHelpMessageWindow_();
     CloseStartMenu();
     SafariZoneRetirePrompt();
     return TRUE;
@@ -716,8 +704,6 @@ static bool8 StartMenuLinkPlayerCallback(void)
 
 static bool8 StartCB_Save1(void)
 {
-    BackupHelpContext();
-    SetHelpContext(HELPCONTEXT_SAVE);
     StartMenu_PrepareForSave();
     sStartMenuCallback = StartCB_Save2;
     return FALSE;
@@ -733,19 +719,16 @@ static bool8 StartCB_Save2(void)
         ClearDialogWindowAndFrameToTransparent(0, TRUE);
         ClearPlayerHeldMovementAndUnfreezeObjectEvents();
         UnlockPlayerFieldControls();
-        RestoreHelpContext();
         return TRUE;
     case SAVECB_RETURN_CANCEL:
         ClearDialogWindowAndFrameToTransparent(0, FALSE);
         DrawStartMenuInOneGo();
-        RestoreHelpContext();
         sStartMenuCallback = StartCB_HandleInput;
         break;
     case SAVECB_RETURN_ERROR:
         ClearDialogWindowAndFrameToTransparent(0, TRUE);
         ClearPlayerHeldMovementAndUnfreezeObjectEvents();
         UnlockPlayerFieldControls();
-        RestoreHelpContext();
         return TRUE;
     }
     return FALSE;
@@ -769,8 +752,6 @@ static u8 RunSaveDialogCB(void)
 void Field_AskSaveTheGame(void)
 {
     sTimeWindowId = WINDOW_NONE;
-    BackupHelpContext();
-    SetHelpContext(HELPCONTEXT_SAVE);
     StartMenu_PrepareForSave();
     CreateTask(task50_save_game, 80);
 }
@@ -800,7 +781,6 @@ static void task50_save_game(u8 taskId)
     }
     DestroyTask(taskId);
     ScriptContext_Enable();
-    RestoreHelpContext();
 }
 
 static void CloseSaveMessageWindow(void)
@@ -861,8 +841,6 @@ static u8 SaveDialogCB_PrintAskSaveText(void)
     ClearStdWindowAndFrame(GetStartMenuWindowId(), FALSE);
     RemoveStartMenuWindow();
     DestroyTimeWindow();
-    if (DEBUG_OVERWORLD_MENU != TRUE)
-        DestroyHelpMessageWindow(0);
     PrintSaveStats();
     PrintSaveTextWithFollowupFunc(gText_WouldYouLikeToSaveTheGame, SaveDialogCB_AskSavePrintYesNoMenu);
     return SAVECB_RETURN_CONTINUE;
@@ -935,7 +913,6 @@ static u8 SaveDialogCB_AskOverwriteOrReplacePreviousFileHandleInput(void)
 
 static u8 SaveDialogCB_PrintSavingDontTurnOffPower(void)
 {
-    SaveQuestLogData();
     PrintSaveTextWithFollowupFunc(gText_SavingDontTurnOffThePower, SaveDialogCB_DoSave);
     return SAVECB_RETURN_CONTINUE;
 }
diff --git a/src/strings.c b/src/strings.c
index f0c026a90..bf1665d39 100644
--- a/src/strings.c
+++ b/src/strings.c
@@ -902,7 +902,6 @@ const u8 gStartMenuDesc_Exit[] = _("Close this MENU window.");
 const u8 gStartMenuDesc_Retire[] = _("Retire from the SAFARI GAME and return to\nthe registration counter.");
 const u8 gStartMenuDesc_Debug[] = _("Debug Menu.");
 
-#include "data/text/quest_log.h"
 
 const u8 gText_WasUsedOn[] = _(" was used on\n");
 const u8 gText_Period[] = _(".");
diff --git a/src/teachy_tv.c b/src/teachy_tv.c
index 6a0ee3a42..180c2abc3 100644
--- a/src/teachy_tv.c
+++ b/src/teachy_tv.c
@@ -22,7 +22,7 @@
 #include "battle_controllers.h"
 #include "global.fieldmap.h"
 #include "teachy_tv.h"
-#include "help_system.h"
+
 #include "overworld.h"
 #include "graphics.h"
 #include "fieldmap.h"
@@ -496,7 +496,6 @@ static void TeachyTvMainCallback(void)
         ScheduleBgCopyTilemapToVram(1);
         ScheduleBgCopyTilemapToVram(2);
         ScheduleBgCopyTilemapToVram(3);
-        SetHelpContextDontCheckBattle(HELPCONTEXT_BAG);
         BlendPalettes(PALETTES_ALL, 0x10, 0);
         BeginNormalPaletteFade(PALETTES_ALL, 0, 0x10, 0, 0);
         SetVBlankCallback(TeachyTvVblankHandler);
diff --git a/src/text.c b/src/text.c
index d8a51f82f..9c03a143e 100644
--- a/src/text.c
+++ b/src/text.c
@@ -9,7 +9,7 @@
 #include "main.h"
 #include "menu.h"
 #include "palette.h"
-#include "quest_log.h"
+
 #include "sound.h"
 #include "string_util.h"
 #include "strings.h"
@@ -965,7 +965,7 @@ void TextPrinterClearDownArrow(struct TextPrinter *textPrinter)
 bool32 TextPrinterWaitAutoMode(struct TextPrinter *textPrinter)
 {
     struct TextPrinterSubStruct *subStruct = (struct TextPrinterSubStruct *)(&textPrinter->subStructFields);
-    u8 delay = (gQuestLogState == QL_STATE_PLAYBACK) ? 50 : 120;
+    u8 delay = 50;
 
     if (subStruct->autoScrollDelay == delay)
     {
@@ -1161,8 +1161,7 @@ static u16 RenderText(struct TextPrinter *textPrinter)
                 textPrinter->printerTemplate.currentChar++;
                 currChar |= *textPrinter->printerTemplate.currentChar << 8;
                 textPrinter->printerTemplate.currentChar++;
-                if (!QL_IS_PLAYBACK_STATE)
-                    PlayBGM(currChar);
+                PlayBGM(currChar);
                 return RENDER_REPEAT;
             case EXT_CTRL_CODE_ESCAPE:
                 textPrinter->printerTemplate.currentChar++;
diff --git a/src/text_window.c b/src/text_window.c
index ce0eb875a..d9da2c7dc 100644
--- a/src/text_window.c
+++ b/src/text_window.c
@@ -4,13 +4,11 @@
 #include "window.h"
 
 #include "graphics.h"
-#include "help_message.h"
 #include "palette.h"
 #include "text_window.h"
 
 static const u16 sSignpostWindow_Gfx[] = INCBIN_U16("graphics/text_window/signpost.4bpp");
 static const u16 sStdTextWindow_Gfx[]  = INCBIN_U16("graphics/text_window/std.4bpp");
-static const u16 sQuestLogWindow_Gfx[] = INCBIN_U16("graphics/text_window/quest_log.4bpp");
 
 static const u8 sTextWindowFrame1_Gfx[]  = INCBIN_U8("graphics/text_window/type1.4bpp");
 static const u8 sTextWindowFrame2_Gfx[]  = INCBIN_U8("graphics/text_window/type2.4bpp");
@@ -72,11 +70,6 @@ void LoadStdWindowGfxOnBg(u8 bgId, u16 destOffset, u8 palOffset)
     LoadPalette(GetTextWindowPalette(3), palOffset, PLTT_SIZE_4BPP);
 }
 
-void LoadHelpMessageWindowGfx(u8 windowId, u16 destOffset, u8 palOffset)
-{
-    LoadBgTiles(GetWindowAttribute(windowId, WINDOW_BG), gHelpMessageWindow_Gfx, 0x280, destOffset);
-    LoadPalette(GetTextWindowPalette(2), palOffset, PLTT_SIZE_4BPP);
-}
 
 void LoadSignpostWindowGfx(u8 windowId, u16 destOffset, u8 palOffset)
 {
@@ -95,10 +88,7 @@ void LoadStdWindowTiles(u8 windowId, u16 destOffset)
     LoadBgTiles(GetWindowAttribute(windowId, WINDOW_BG), sStdTextWindow_Gfx, 0x120, destOffset);
 }
 
-void LoadQuestLogWindowTiles(u8 windowId, u16 destOffset)
-{
-    LoadBgTiles(GetWindowAttribute(windowId, WINDOW_BG), sQuestLogWindow_Gfx, 0x280, destOffset);
-}
+
 
 void LoadMessageBoxGfx(u8 windowId, u16 destOffset, u8 palOffset)
 {
diff --git a/src/title_screen.c b/src/title_screen.c
index 5153e2e5c..a8974e151 100644
--- a/src/title_screen.c
+++ b/src/title_screen.c
@@ -9,7 +9,7 @@
 #include "decompress.h"
 #include "event_data.h"
 #include "graphics.h"
-#include "help_system.h"
+
 #include "intro.h"
 #include "load_save.h"
 #include "m4a.h"
@@ -625,7 +625,6 @@ static void SetTitleScreenScene_Run(s16 *data)
     switch (tState)
     {
     case 0:
-        SetHelpContext(HELPCONTEXT_TITLE_SCREEN);
         CreateTask(Task_TitleScreen_BlinkPressStart, 0);
 #if defined(FIRERED)
         CreateTask(Task_FlameSpawner, 5);
@@ -634,7 +633,6 @@ static void SetTitleScreenScene_Run(s16 *data)
 #endif
         SetGpuRegsForTitleScreenRun();
         tSlashSpriteId = CreateSlashSprite();
-        HelpSystem_Enable();
         tState++;
         // fallthrough
     case 1:
@@ -719,7 +717,6 @@ static void SetTitleScreenScene_Restart(s16 *data)
         }
         break;
     case 4:
-        HelpSystem_Disable();
         DestroyTask(FindTaskIdByFunc(Task_TitleScreenMain));
         SetMainCallback2(CB2_InitCopyrightScreenAfterTitleScreen);
         break;
diff --git a/src/tm_case.c b/src/tm_case.c
index 3a6f384de..7484ebdee 100644
--- a/src/tm_case.c
+++ b/src/tm_case.c
@@ -23,7 +23,6 @@
 #include "menu_indicators.h"
 #include "constants/items.h"
 #include "constants/songs.h"
-#include "constants/quest_log.h"
 
 #define TAG_SCROLL_ARROW 110
 
@@ -1299,7 +1298,6 @@ static void Task_DoSaleOfTMs(u8 taskId)
     PlaySE(SE_SHOP);
     RemoveBagItem(gSpecialVar_ItemId, tQuantitySelected);
     AddMoney(&gSaveBlock1Ptr->money, ItemId_GetPrice(gSpecialVar_ItemId) / 2 * tQuantitySelected);
-    RecordItemTransaction(gSpecialVar_ItemId, tQuantitySelected, QL_EVENT_SOLD_ITEM - QL_EVENT_USED_POKEMART);
     DestroyListMenuTask(tListTaskId, &sTMCaseStaticResources.scrollOffset, &sTMCaseStaticResources.selectedRow);
     TMCaseSetup_GetTMCount();
     TMCaseSetup_InitListMenuPositions();
diff --git a/src/trade_scene.c b/src/trade_scene.c
index 30d0a0dd1..21046a0be 100644
--- a/src/trade_scene.c
+++ b/src/trade_scene.c
@@ -20,8 +20,8 @@
 #include "evolution_scene.h"
 #include "overworld.h"
 #include "field_fadetransition.h"
-#include "quest_log.h"
-#include "help_system.h"
+
+
 #include "pokedex.h"
 #include "save.h"
 #include "load_save.h"
@@ -106,7 +106,7 @@ struct {
     /*0xF0*/ u16 monSpecies[2];
     /*0xF4*/ u16 cachedMapMusic;
     /*0xF6*/ u8 unk_F6;
-    /*0xF8*/ struct QuestLogEvent_Traded questLogData;
+    
     /*0x104*/ u8 textColor[3];
     /*0x107*/ u8 filler_107[1];
     /*0x108*/ bool8 isCableTrade;
@@ -877,9 +877,6 @@ void CB2_LinkTrade(void)
     case 10:
         BeginNormalPaletteFade(PALETTES_ALL, 0, 16, 0, RGB_BLACK);
         ShowBg(0);
-        sTradeAnim->questLogData.speciesSent = GetMonData(&gPlayerParty[gSelectedTradeMonPositions[TRADE_PLAYER]], MON_DATA_SPECIES_OR_EGG);
-        sTradeAnim->questLogData.speciesReceived = GetMonData(&gEnemyParty[gSelectedTradeMonPositions[TRADE_PARTNER] % PARTY_SIZE], MON_DATA_SPECIES_OR_EGG);
-        memcpy(sTradeAnim->questLogData.partnerName, gLinkPlayers[GetMultiplayerId() ^ 1].name, PLAYER_NAME_LENGTH);
         gMain.state++;
         break;
     case 11:
@@ -1794,7 +1791,6 @@ static bool8 DoTradeAnim_Cable(void)
             }
             SetMainCallback2(CB2_ReturnToField);
             BufferInGameTradeMonName();
-            HelpSystem_Enable();
         }
         break;
     }
@@ -2294,7 +2290,6 @@ static bool8 DoTradeAnim_Wireless(void)
             }
             SetMainCallback2(CB2_ReturnToField);
             BufferInGameTradeMonName();
-            HelpSystem_Enable();
         }
         break;
     }
@@ -2589,15 +2584,6 @@ static void CB2_SaveAndEndTrade(void)
         DrawTextOnTradeWindow(0, gStringVar4, 0);
         break;
     case 50:
-        if (InUnionRoom())
-        {
-            SetQuestLogEvent(QL_EVENT_LINK_TRADED_UNION, (void *)&sTradeAnim->questLogData);
-        }
-        else
-        {
-            SetQuestLogEvent(QL_EVENT_LINK_TRADED, (void *)&sTradeAnim->questLogData);
-            IncrementGameStat(GAME_STAT_POKEMON_TRADES);
-        }
         if (gWirelessCommType)
             MysteryGift_TryIncrementStat(CARD_STAT_NUM_TRADES, gLinkPlayers[GetMultiplayerId() ^ 1].trainerId);
         SetContinueGameWarpStatusToDynamicWarp();
@@ -2736,7 +2722,6 @@ void DoInGameTradeScene(void)
     LockPlayerFieldControls();
     CreateTask(Task_InGameTrade, 10);
     BeginNormalPaletteFade(PALETTES_ALL, 0, 0, 16, RGB_BLACK);
-    HelpSystem_Disable();
 }
 
 static void Task_InGameTrade(u8 taskId)
diff --git a/src/trainer_card.c b/src/trainer_card.c
index 133713aa0..a7381d748 100644
--- a/src/trainer_card.c
+++ b/src/trainer_card.c
@@ -13,7 +13,7 @@
 #include "pokedex.h"
 #include "pokemon_icon.h"
 #include "graphics.h"
-#include "help_system.h"
+
 #include "trainer_pokemon_sprites.h"
 #include "constants/songs.h"
 #include "constants/game_stat.h"
@@ -558,7 +558,6 @@ static void Task_TrainerCard(u8 taskId)
 
         if (JOY_NEW(A_BUTTON))
         {
-            SetHelpContext(HELPCONTEXT_TRAINER_CARD_BACK);
             FlipTrainerCard();
             PlaySE(SE_CARD_FLIP);
             sTrainerCardDataPtr->mainState = STATE_WAIT_FLIP_TO_BACK;
@@ -597,7 +596,6 @@ static void Task_TrainerCard(u8 taskId)
             }
             else
             {
-                SetHelpContext(HELPCONTEXT_TRAINER_CARD_FRONT);
                 FlipTrainerCard();
                 sTrainerCardDataPtr->mainState = STATE_WAIT_FLIP_TO_FRONT;
                 PlaySE(SE_CARD_FLIP);
@@ -1034,7 +1032,6 @@ static void InitBgsAndWindows(void)
 static void SetTrainerCardCB2(void)
 {
     SetMainCallback2(CB2_TrainerCard);
-    SetHelpContext(HELPCONTEXT_TRAINER_CARD_FRONT);
 }
 
 static void SetUpTrainerCardTask(void)
diff --git a/src/trainer_fan_club.c b/src/trainer_fan_club.c
index ccef686e8..711724f00 100644
--- a/src/trainer_fan_club.c
+++ b/src/trainer_fan_club.c
@@ -338,11 +338,6 @@ static void BufferFanClubTrainerName(u8 whichLinkTrainer, u8 whichNPCTrainer)
 }
 #endif //FREE_LINK_BATTLE_RECORDS
 
-void Special_UpdateTrainerFansAfterLinkBattle(void)
-{
-    UpdateTrainerFansAfterLinkBattle(TRAINER_FAN_CLUB);
-}
-
 static void UpdateTrainerFansAfterLinkBattle(struct TrainerFanClub *fanClub)
 {
     if (VarGet(VAR_MAP_SCENE_SAFFRON_CITY_POKEMON_TRAINER_FAN_CLUB) == 2)
diff --git a/src/trainer_see.c b/src/trainer_see.c
index 26ac5d3f9..9040acc76 100644
--- a/src/trainer_see.c
+++ b/src/trainer_see.c
@@ -4,7 +4,7 @@
 #include "event_object_movement.h"
 #include "field_effect.h"
 #include "field_player_avatar.h"
-#include "quest_log.h"
+
 #include "script.h"
 #include "script_movement.h"
 #include "task.h"
@@ -119,9 +119,6 @@ static const TrainerSeeFunc sTrainerSeeFuncList2[] = {
 bool8 CheckForTrainersWantingBattle(void)
 {
     u8 i;
-    if (QL_IsTrainerSightDisabled() == TRUE)
-        return FALSE;
-
     if (FlagGet(OW_FLAG_NO_TRAINER_SEE))
         return FALSE;
 
diff --git a/src/union_room.c b/src/union_room.c
index 333c20011..5c3354f22 100644
--- a/src/union_room.c
+++ b/src/union_room.c
@@ -25,7 +25,7 @@
 #include "overworld.h"
 #include "party_menu.h"
 #include "pokemon_jump.h"
-#include "quest_log.h"
+
 #include "random.h"
 #include "save_location.h"
 #include "script.h"
@@ -2896,7 +2896,6 @@ static void Task_RunUnionRoom(u8 taskId)
                     break;
                 }
             }
-            DestroyHelpMessageWindow_();
         }
         break;
     case UR_STATE_REGISTER_SELECT_MON_FADE:
@@ -2979,7 +2978,6 @@ static void Task_RunUnionRoom(u8 taskId)
             case LIST_CANCEL:
             case 8: // EXIT
                 HandleCancelActivity(TRUE);
-                DestroyHelpMessageWindow_();
                 uroom->state = UR_STATE_MAIN;
                 break;
             default:
@@ -3103,8 +3101,6 @@ void InitUnionRoom(void)
     struct WirelessLink_URoom * data;
 
     sUnionRoomPlayerName[0] = EOS;
-    if (QL_IS_PLAYBACK_STATE)
-        return;
     CreateTask(Task_InitUnionRoom, 0);
     sWirelessLinkMain.uRoom = sWirelessLinkMain.uRoom; // Needed to match.
     sWirelessLinkMain.uRoom = data = AllocZeroed(sizeof(struct WirelessLink_URoom));
diff --git a/src/union_room_chat.c b/src/union_room_chat.c
index 2f4bb3eb5..c70714ef0 100644
--- a/src/union_room_chat.c
+++ b/src/union_room_chat.c
@@ -1,13 +1,13 @@
 #include "global.h"
 #include "gflib.h"
 #include "dynamic_placeholder_text_util.h"
-#include "help_system.h"
+
 #include "link.h"
 #include "link_rfu.h"
 #include "load_save.h"
 #include "menu.h"
 #include "overworld.h"
-#include "quest_log.h"
+
 #include "save.h"
 #include "scanline_effect.h"
 #include "strings.h"
@@ -319,7 +319,6 @@ void EnterUnionRoomChat(void)
     sWork = Alloc(sizeof(struct UnionRoomChat));
     InitChatWork(sWork);
     gKeyRepeatStartDelay = 20;
-    HelpSystem_DisableToggleWithRButton();
     SetVBlankCallback(NULL);
     SetMainCallback2(CB2_LoadInterface);
 }
@@ -383,7 +382,6 @@ static void CB2_LoadInterface(void)
         if (!gPaletteFade.active)
         {
             SetMainCallback2(CB2_UnionRoomChatMain);
-            SetQuestLogEvent(QL_EVENT_USED_UNION_ROOM_CHAT, NULL);
             sWork->handleInputTask = CreateTask(Task_HandlePlayerInput, 8);
             sWork->receiveMessagesTask = CreateTask(Task_ReceiveChatMessage, 7);
             LoadWirelessStatusIndicatorSpriteGfx();
@@ -1009,7 +1007,6 @@ static void ChatEntryRoutine_SaveAndExit(void)
     case 13:
         if (!gPaletteFade.active)
         {
-            HelpSystem_EnableToggleWithRButton();
             UnionRoomChat_FreeGraphicsWork();
             FreeChatWork();
             SetMainCallback2(CB2_ReturnToField);
diff --git a/src/vs_seeker.c b/src/vs_seeker.c
index cb41bb51b..5816cd318 100644
--- a/src/vs_seeker.c
+++ b/src/vs_seeker.c
@@ -23,7 +23,6 @@
 #include "constants/event_objects.h"
 #include "constants/maps.h"
 #include "constants/items.h"
-#include "constants/quest_log.h"
 #include "constants/trainer_types.h"
 
 // Each trainer can have up to 6 parties, including their original party.
@@ -762,7 +761,6 @@ void Task_VsSeeker_0(u8 taskId)
     }
     else if (respval == VSSEEKER_CAN_USE)
     {
-        ItemUse_SetQuestLogEvent(QL_EVENT_USED_ITEM, 0, gSpecialVar_ItemId, 0xFFFF);
         FieldEffectStart(FLDEFF_USE_VS_SEEKER);
         gTasks[taskId].func = Task_VsSeeker_1;
         gTasks[taskId].data[0] = 15;
diff --git a/src/wild_encounter.c b/src/wild_encounter.c
index 77e8da08e..6758d5230 100644
--- a/src/wild_encounter.c
+++ b/src/wild_encounter.c
@@ -13,7 +13,7 @@
 #include "event_scripts.h"
 #include "script.h"
 #include "link.h"
-#include "quest_log.h"
+
 #include "safari_zone.h"
 #include "rtc.h"
 #include "constants/maps.h"
@@ -803,9 +803,6 @@ bool8 UpdateRepelCounter(void)
     if (InUnionRoom() == TRUE)
         return FALSE;
 
-    if (gQuestLogState == QL_STATE_PLAYBACK)
-        return FALSE;
-
     if (steps != 0)
     {
         steps--;
diff --git a/test/battle/trainer_control.h b/test/battle/trainer_control.h
index 62a804569..fb51e78f7 100644
--- a/test/battle/trainer_control.h
+++ b/test/battle/trainer_control.h
@@ -97,7 +97,7 @@
         .trainerClass = TRAINER_CLASS_PKMN_TRAINER_1,
 #line 36
         .trainerPic = TRAINER_PIC_RED,
-        .encounterMusic_gender = 
+        .encounterMusic_gender =
 #line 38
             TRAINER_ENCOUNTER_MUSIC_MALE,
 #line 39
@@ -128,7 +128,7 @@
         .trainerClass = TRAINER_CLASS_PKMN_TRAINER_1,
 #line 48
         .trainerPic = TRAINER_PIC_RED,
-        .encounterMusic_gender = 
+        .encounterMusic_gender =
 #line 50
             TRAINER_ENCOUNTER_MUSIC_MALE,
 #line 51
@@ -159,7 +159,7 @@
         .trainerClass = TRAINER_CLASS_PKMN_TRAINER_1,
 #line 60
         .trainerPic = TRAINER_PIC_RED,
-        .encounterMusic_gender = 
+        .encounterMusic_gender =
 #line 62
             TRAINER_ENCOUNTER_MUSIC_MALE,
 #line 63
@@ -190,7 +190,7 @@
         .trainerClass = TRAINER_CLASS_PKMN_TRAINER_1,
 #line 72
         .trainerPic = TRAINER_PIC_RED,
-        .encounterMusic_gender = 
+        .encounterMusic_gender =
 #line 74
             TRAINER_ENCOUNTER_MUSIC_MALE,
 #line 75
@@ -220,7 +220,7 @@
         .trainerClass = TRAINER_CLASS_PKMN_TRAINER_1,
 #line 84
         .trainerPic = TRAINER_PIC_RED,
-        .encounterMusic_gender = 
+        .encounterMusic_gender =
 #line 86
             TRAINER_ENCOUNTER_MUSIC_MALE,
 #line 87
@@ -285,7 +285,7 @@
         .trainerClass = TRAINER_CLASS_PKMN_TRAINER_1,
 #line 101
         .trainerPic = TRAINER_PIC_RED,
-        .encounterMusic_gender = 
+        .encounterMusic_gender =
 #line 103
             TRAINER_ENCOUNTER_MUSIC_MALE,
 #line 104
@@ -380,7 +380,7 @@
         .trainerClass = TRAINER_CLASS_PKMN_TRAINER_1,
 #line 126
         .trainerPic = TRAINER_PIC_RED,
-        .encounterMusic_gender = 
+        .encounterMusic_gender =
 #line 128
             TRAINER_ENCOUNTER_MUSIC_MALE,
 #line 129
@@ -529,7 +529,7 @@
         .trainerClass = TRAINER_CLASS_PKMN_TRAINER_1,
 #line 164
         .trainerPic = TRAINER_PIC_RED,
-        .encounterMusic_gender = 
+        .encounterMusic_gender =
 #line 166
             TRAINER_ENCOUNTER_MUSIC_MALE,
 #line 167
@@ -591,7 +591,7 @@
         .trainerClass = TRAINER_CLASS_PKMN_TRAINER_1,
 #line 183
         .trainerPic = TRAINER_PIC_RED,
-        .encounterMusic_gender = 
+        .encounterMusic_gender =
 #line 185
             TRAINER_ENCOUNTER_MUSIC_MALE,
 #line 186
@@ -651,7 +651,7 @@
         .trainerClass = TRAINER_CLASS_PKMN_TRAINER_1,
 #line 201
         .trainerPic = TRAINER_PIC_RED,
-        .encounterMusic_gender = 
+        .encounterMusic_gender =
 #line 203
             TRAINER_ENCOUNTER_MUSIC_MALE,
 #line 204
@@ -704,4 +704,3 @@
             },
         },
     },
-
